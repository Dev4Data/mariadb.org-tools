##, -*- python -*-
# ex: set syntax=python:

#-------------------------------------------------------------------------------
# To reload buildbot:
#  1) check that this file does not have any syntax errors with:
#       sudo -u buildbot PYTHONPATH=/usr/local/buildbot/lib/python python -c 'exec open("maria-master.cfg", "r")'
#     (no output = no syntax errors)
#  2) reload with:
#       sudo /etc/init.d/buildmaster reload
#  3) check the reload process:
#       sudo less /var/lib/buildbot/maria/twistd.log
#     - or -
#       sudo tail -f /var/lib/buildbot/maria/twistd.log
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
#  Notice: Once per day this file is auto-commited into the mariadb-tools
#          project on Launchpad if it has been modified. As a safety feature,
#          in case someone is currently making changes to the file, commits
#          will _not_ take place if the file was modified less than two hours
#          before the cron job runs.
#
#          The cron job runs every morning at 0300
#
#          The auto-commit script does a "bzr pull" prior to checking if there
#          are uncommited changes that need to be commited; but because of the
#          way the script works, the version of this file currently in
#          production trumps all other versions when it comes to deciding what
#          to auto-commit and push, even if the changes on Launchpad are more
#          recent.
#
#          With that in mind, if you are modifing this file, you are encouraged
#          follow the following procedure:
#
#              First:  Branch the mariadb-tools project from Launchpad, if you
#                      haven't already, and prototype and stage your changes
#                      there first. You can commit your changes locally, but
#                      don't push your changes yet.
#
#              Second: When your changes are ready, do a last pull from
#                      Launchpad and a diff of the production file, just to
#                      make sure there are no conflicts with your changes or
#                      that you are not overwriting someone else's more recent
#                      production changes.
#
#              Third:  Assuming you are not erasing someone else's changes,
#                      copy your version of the file to the production
#                      location and reload buildbot.
#
#              Fourth: Test and verify that all is well with your changes after
#                      they are in production.
#
#              Fifth:  Commit your changes in your local branch of
#                      mariadb-tools, if you haven't already, with a meaningful
#                      commit message; and push your changes up to Launchpad.
#-------------------------------------------------------------------------------

# Master configuration file for MariaDB buildbot.
# Copyright (C) 2012  Monty Program AB.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

# On our Ubuntu/Debian VMs we use debconf-set-selections with a seed file
# to auto-populate the answers to the questions that the .deb packages ask.
# 'rootpass' - the default password for root user is set during the same
# process.


from buildbot.changes.filter import ChangeFilter


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# We load the slave and database passwords from an external file, so
# that the rest of the configuration can be public.
configDict= { "cfg": { } }
execfile("/etc/buildbot/maria-master-private.cfg", configDict, { })

c['db_url'] = configDict["cfg"]["db_url"]


####### BUILDSLAVES

def mkSlave(name, **kwargs):
    return BuildSlave(name, configDict["cfg"]["slavePasswords"][name], **kwargs)

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a tuple of bot-name and bot-password. These correspond to values given to
# the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave
c['slaves'] = [mkSlave("valgrind", max_builds=1)
#              ,mkSlave("centos5", max_builds=1)
#              ,mkSlave("archivist-cnc", max_builds=1)
#              ,mkSlave("archivist-amd64", max_builds=1)
#              ,mkSlave("adutko-amd64", max_builds=1)
#              ,mkSlave("adutko-alpha", max_builds=1)
#              ,mkSlave("toby-sol10", max_builds=1)
#              ,mkSlave("toby-sol10-sparc", max_builds=1)
#               ,mkSlave("psergey-pylon-x86", max_builds=1)
#               ,mkSlave("psergey-pylon-amd64", max_builds=1)
#               ,mkSlave("psergey-foxhole-x86", max_builds=1)
#               ,mkSlave("psergey-pslp2-x86", max_builds=1)
              ,mkSlave("work-opensuse-amd64", max_builds=1)
#              ,mkSlave("sanja-gentoo-x86_64", max_builds=1)
              ,mkSlave("sanja-mac-x86", max_builds=1)
              ,mkSlave("knielsen-kvm-x86", max_builds=2)
#              ,mkSlave("opensolaris-x86", max_builds=1)
              ,mkSlave("adutko-centos5-amd64", max_builds=1)
              ,mkSlave("mariadb-brs", max_builds=1)
              ,mkSlave("adutko-ultrasparc3", max_builds=1)
              ,mkSlave("centos56-quality2", max_builds=2)
#             ,mkSlave("philip-win2008r2-amd64", max_builds=1)
#              ,mkSlave("mac-mini-intel", max_builds=1)
              ,mkSlave("haidong-fedora13-x86", max_builds=1)
#             ,mkSlave("haidong-win7-x86", max_builds=1) # can not run 24/7
              ,mkSlave("solaris10-x86", max_builds=1)
#             ,mkSlave("solaris-sparc", max_builds=1)
              ,mkSlave("jakob-freebsd", max_builds=1)
              ,mkSlave("adutko3", max_builds=1)
              ,mkSlave("wlads-box",max_builds=4)
              ,mkSlave("terrier2", max_builds=1)
              ,mkSlave("wizard-box", max_builds=1)
              ,mkSlave("wizard-box2", max_builds=1)
#              ,mkSlave("bbwin1", max_builds=1)
              ,mkSlave("bbwin2", max_builds=1)
              ,mkSlave("bbwin3", max_builds=3)
              ,mkSlave("bb-win32", max_builds=4)
              ,mkSlave("bb-win-azure", max_builds=4)
              ,mkSlave("bb-win-azure-2", max_builds=4)
              ,mkSlave("bc1-win", max_builds=4)
              ,mkSlave("win-connectors", max_builds=4)
              ,mkSlave("aps82-204", max_builds=1)
              ,mkSlave("bsd9", max_builds=1)
#              ,mkSlave("macintosh", max_builds=1)
              ,mkSlave("labrador", max_builds=2)
              ,mkSlave("db-mac-1012", max_builds=1)
              ,mkSlave("starfsmenn1", max_builds=1)
              ,mkSlave("starfsmenn2", max_builds=1)
#              ,mkSlave("raspberrypi", max_builds=1)
              ,mkSlave("bb01", max_builds=4)
              ,mkSlave("bb02", max_builds=4)
              ,mkSlave("bb03", max_builds=4)
              ,mkSlave("bb05", max_builds=8)
              ,mkSlave("aidi", max_builds=30)
              ,mkSlave("p801", max_builds=4)
              ,mkSlave("bc01", max_builds=4)
#              ,mkSlave("power01", max_builds=3)
              ,mkSlave("power8-vlp01", max_builds=1)
#              ,mkSlave("power8-vlp02", max_builds=1)
              ,mkSlave("power8-vlp03", max_builds=1)
              ,mkSlave("power8-vlp04", max_builds=1)
              ,mkSlave("power8-vlp05", max_builds=1)
              ,mkSlave("power8-vlp06", max_builds=1)
              ,mkSlave("p8-rhel6-bb", max_builds=1)
#              ,mkSlave("p8-trusty-bb", max_builds=1)
#              ,mkSlave("p8-xenial-bb", max_builds=1)
#             ,mkSlave("ibmz-rhel6", max_builds=1)
#              ,mkSlave("ibmz-sles11", max_builds=1)
               ]

# There was bb05 here, removed (temporarily?)
kvm_slaves=["bb01", "bb02", "bb03", "bb05", "aidi"]
# , "centos56-quality2"
# Build slaves that have a kvm new enough to understand compat:1.1 qemu images.
# There was bb05 here, removed (temporarily?)
kvm11_slaves=["bb01", "bb02", "bb03", "bb05", "aidi"]

# Build slaves for connectors
connector_slaves=["bc01"]

# to limit to two concurrent builds on a slave, use
#  c['slaves'] = [BuildSlave("bot1name", "bot1passwd", max_builds=2)]


# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

# Get changes from Launchpad branch subscription emails.
# This requires that buildbot@askmonty.org be subscribed to each branch to be tracked.
from buildbot.changes import mail

bzrBranches = {
    "lp:~maria-captains/maria/5.1" : "5.1",
    "lp:~maria-captains/maria/5.2" : "5.2",
    "lp:~maria-captains/maria/mariadb-5.1-knielsen" : "mariadb-5.1-knielsen",
    "lp:~maria-captains/maria/mariadb-5.2-knielsen" : "mariadb-5.2-knielsen",
    "lp:~maria-captains/maria/mariadb-5.1-monty" : "mariadb-5.1-monty",
    "lp:~maria-captains/maria/mariadb-5.2-monty" : "mariadb-5.2-monty",
    "lp:~maria-captains/maria/5.1-release" : "5.1-release",
    "lp:~maria-captains/maria/5.2-release" : "5.2-release",
    "lp:~maria-captains/maria/5.1-serg" : "5.1-serg",
    "lp:~maria-captains/maria/5.2-serg" : "5.2-serg",
    "lp:~maria-captains/maria/5.3-serg" : "5.3-serg",
    "lp:~maria-captains/maria/5.3-knielsen" : "5.3-knielsen",
    "lp:~maria-captains/maria/5.3" : "5.3",
    "lp:~maria-captains/maria/maria-10.0-mwl253" : "maria-10.0-mwl253",
    "lp:~maria-captains/maria/mariadb-5.3-monty" : "mariadb-5.3-monty",
    "lp:~maria-captains/maria/10.0-show-explain" : "10.0-show-explain",
    "lp:~maria-captains/maria/5.5" : "5.5",
    "lp:~maria-captains/maria/5.6" : "5.6",
    "lp:~maria-captains/maria/trunk" : "trunk",
    "lp:~maria-captains/maria/5.5-serg" : "5.5-serg",
    "lp:~maria-captains/maria/5.5-wlad" : "5.5-wlad",
    "lp:~maria-captains/maria/5.5-knielsen" : "5.5-knielsen",
    "lp:~maria-captains/maria/5.5-release" : "5.5-release",
    "lp:~maria-captains/maria/5.5-hf" : "5.5-hf",
    "lp:~maria-captains/maria/5.5-noga-hf" : "5.5-noga-hf",
    "lp:~maria-captains/maria/5.5-jani" : "5.5-jani",
    "lp:~maria-captains/maria/maria-5.5-galera" : "maria-5.5-galera",
    "lp:~maria-captains/maria/maria-10.0-galera" : "maria-10.0-galera",
    "lp:~maria-captains/maria/maria-5.5-monty" : "maria-5.5-monty",
    "lp:~maria-captains/maria/10.0" : "10.0",
    "lp:~maria-captains/maria/10.0-monty" : "10.0-monty",
    "lp:~maria-captains/maria/10.0-serg" : "10.0-serg",
    "lp:~maria-captains/maria/10.0-connect" : "10.0-connect",
    "lp:~maria-captains/maria/10.0-release" : "10.0-release",
    "lp:~maria-captains/maria/10.0-bar" : "10.0-bar",
    "lp:~maria-captains/maria/10-hf" : "10-hf",
    "lp:~maria-captains/maria/10.0-knielsen" : "10.0-knielsen",
    "lp:~maria-captains/maria/10.0-mdev26" : "10.0-mdev26",
    "lp:~maria-captains/maria/maria-10.0-mwl253" : "maria-10.0-mwl253",
    "lp:~maria-captains/maria/10.0-show-explain" : "10.0-show-explain",
    "lp:~maria-captains/maria/10.0-spider" : "10.0-spider",
    "lp:~maria-captains/maria/5.5-svoj" : "5.5-svoj",
    "lp:~maria-captains/maria/10.0-mroonga" : "10.0-mroonga",
    "lp:~maria-captains/maria/10.0-FusionIO" : "10.0-FusionIO",
    "lp:~maria-captains/maria/10.0-Galera-FusionIO" : "10.0-Galera-FusionIO",
    "lp:~maria-captains/maria/10.0-elenst" : "10.0-elenst",
    "lp:~maria-captains/maria/5.5-elenst" : "5.5-elenst",
    "lp:~maria-captains/maria/10.0-mdev6657-try2" : "10.0-mdev6657-try2",
    "lp:~maria-captains/maria/10.0-csc8034-r1" : "10.0-csc8034-r1",
    "lp:~maria-captains/maria/10.0-custombld" : "10.0-custombld",
    "lp:~maria-captains/maria/10.0.15-mdev6634-r2" : "10.0.15-mdev6634-r2",
    }

bzrBranches_all = dict(bzrBranches)

mailSource = mail.BzrLaunchpadEmailMaildirSource("/var/lib/buildbot/Maildir",
                                                 branchMap=bzrBranches_all)
c['change_source'] = [mailSource]

gitBranches = {
    "https://github.com/MariaDB/server" :
      (
        "10.3",
        "10.2",
        "10.1",
        "10.0",
        "5.5",
        "10.0-galera",
        "5.5-galera",
        "10.2-spider",
        "bb-*", # yes, wildcards are ok
        "hf-*", # hotfix branches
      ),
    "https://github.com/Buggynours/MariaDB" : # this is Olivier Bertrand
      (
        "ob-*",
      ),
    "https://github.com/oerdnj/MariaDB-server" : # this is Ondrej Sury
      (
        "os-*",
      ),
    "https://github.com/Kentoku/MariaDB" : # this is Kentoku Shiba
      (
        "ks-*",
      ),
    "https://github.com/ottok/mariadb" : # Otto, new debian packaging
      (
        "ok-*",
      ),
    "https://github.com/ottok/mariadb-10.0" : # Otto, mirror of official debian packaging
      (
        "jessie",
        "jessie-*",
      ),
    "https://github.com/f4rnham/server" : # Martin Kaluznik, MDEV-7502
      (
        "bb-*",
      ),
    "git@github.com:mariadb-corporation/MariaDBEnterprise" :
      (
        "10.1e",
        "10.0e",
        "hf-*",
        "bb-*",
        "5.5e",
        "10.0e-galera",
        "5.5e-galera",
        "10.0.30-MDEV-11958",
      ),
     "https://github.com/MariaDB/mariadb-connector-c":
      (
        "master",
        "connector_c_2.2",
        "connector_c_3.0",
        "bb-*",
      ),
     "https://github.com/MariaDB/mariadb-connector-j":
      (
        "master",
      ),
     "https://github.com/MariaDB/mariadb-connector-odbc":
      (
        "odbc-2.0",
        "odbc-3.0",
        "master"
      ),
     "https://github.com/MariaDB/galera": # Nirbhay: mariadb-3.x-* is for specific galera bugs/features.
      (
        "mariadb-3.x",
        "mariadb-3.x-*",
      )
    }


# bzr/git branch filter
import fnmatch
def fnmatch_any(s, list_of_patterns):
    return any(fnmatch.fnmatch(s, p) for p in list_of_patterns)

class BranchFilter(ChangeFilter):
    def __init__(self, on_launchpad = {}, on_github = {}):
        self.bzr_branches = on_launchpad
        self.git_branches = on_github

    def filter_change(self, change):
        repo = getattr(change, 'repository', '?')
        branch = getattr(change, 'branch', '?')
        if re.match('(https://|git@)github.com', repo):
            # git branch on github
            return fnmatch_any(branch, self.git_branches.get(repo, ()))
        else:
            # bzr branch on launchpad
            return branch == self.bzr_branches.get('lp:' + repo)

    def __repr__(self):
        return "<%s>" % (self.__class__.__name__,)

# Some branches are more important than others...
def myNextBuild(bldr, requests):
  best_r= None
  best_prio= None
  for r in requests:
    if r.source is not None:
      b= r.source.branch
    else:
      b= r.properties.get("branch")
    # Put here the name of the tree you want to temporarily prioritize over everything
    if b in ["current-hottest-tree", "bb-10.0-MDEV-11958"]:
        prio= 2
    elif b in ["5.1-release", "5.2-release", "5.3-release", "5.5-release", "10.0-release", "5.5e", "10.0e", "10.1e", "5.5e-galera", "10.0e-galera"]:
        prio= 2
    elif b in ["5.1", "5.2", "5.3", "5.5", "10.0", "bb-10.1-serg", "bb-5.5-serg",
             "10.0-galera", "5.5-galera", "10.3", "10.2", "10.1", "bb-10.2-serg",
             "10.2-spider"]:
        prio= 1
    elif fnmatch.fnmatch(b, 'hf-*'):
        prio= 1
    else:
        prio= 0
    if best_r is None or prio > best_prio:
        best_r= r
        best_prio= prio
  return best_r

# Some builders only run in main trees.
mainTreesList10_2Plus = ["10.3", "10.2",
                         "bb-10.2-compatibility", "bb-10.2-mariarocks", "bb-10.2-marko", "10.2-spider", "bb-10.2-vicentiu2"
                         ]
mainTreesList10_1Plus = ["10.1", "10.1e",
                         "bb-10.1-serg"
                         ] + mainTreesList10_2Plus
mainTreesList10_0Plus = ["10.0", "10.0e",
                         "10.0e-galera", "10.0-galera", "jessie", "jessie-*"
                         ] + mainTreesList10_1Plus
mainTreesList = ["5.1-release", "5.2-release", "5.1", "5.5-release", "5.3",
                 "5.2", "5.5", "5.5e", "trunk", "5.5e-galera", "5.5-galera", "bb-5.5-serg"
                 ] + mainTreesList10_0Plus
def isMainTree(step):
  return step.getProperty("branch") in mainTreesList
def isMainTree10_2Plus(step):
  return step.getProperty("branch") in mainTreesList10_2Plus
def isMainTree10_1Plus(step):
  return step.getProperty("branch") in mainTreesList10_1Plus
def isMainTree10_0Plus(step):
  return step.getProperty("branch") in mainTreesList10_0Plus

# In 5.[123] we use OurDelta legacy bakery scripts.
# In 5.5+ we have the necessary stuff directly in the source tree.
# And 5.5 uses CMake while older use autotools
def branch_is_5_123(step):
  if re.search("5\\.[123]", step.getProperty("branch")):
    return True
  else:
    return False

def branch_is_10_x(step):
  if re.search("10\\.[0-9]", step.getProperty("branch")):
    return True
  elif re.search("jessie", step.getProperty("branch")):
    return True
  else:
    return False

def branch_is_10_1_or_later(step):
  if re.search("10\\.[1-9]", step.getProperty("branch")):
    return True
  else:
    return False

def branch_is_10_2_or_later(step):
  if re.search("10\\.[2-9]", step.getProperty("branch")):
    return True
  else:
    return False

def branch_is_10_3_or_later(step):
  if re.search("10\\.[3-9]", step.getProperty("branch")):
    return True
  else:
    return False

def branch_is_enterprise(step):
  return re.search("5\\.5e", step.getProperty("branch")) or re.search("10\\.[0-9]e", step.getProperty("branch"))

def branch_has_previous_minor_versions(step):
  if re.search("10\\.4", step.getProperty("branch")):
    return False
  else:
    return True

def branch_is_5_5_or_later(step):
  return not branch_is_5_123(step)

def branch_is_not_10_1(step):
  return not re.search("10\\.1", step.getProperty("branch"))

def branch_is_not_10_2(step):
  return not re.search("10\\.2", step.getProperty("branch"))

def branch_is_not_10_3(step):
  return not re.search("10\\.3", step.getProperty("branch"))

def branch_is_not_galera(step):
  return not re.search("galera", step.getProperty("branch"))

def branch_is_not_connector(step):
  return not re.search("mariadb-connector", step.getProperty("branch"))


# Trees for Debian Packaging quality assurance
debpkgBranches= ["ok-*", "jessie", "jessie-*", "os-"]

def debpkg_branch(step):
  return fnmatch_any(step.getProperty("branch"), debpkgBranches)

def rpm_test_branch(step):
  return fnmatch.fnmatch(step.getProperty("branch"), "*-rpm-*") or step.getProperty("branch") == 'bb-10.1-elenst'

# Some additional new images are maintained to build Galera package.
def getGaleraBuildImage(kvm_image) :
  imagelist = ("vm-sid-amd64",
               "vm-sid-i386",
               "vm-centos5-amd64",
               "vm-centos5-i386",
               "vm-sles11sp1-amd64",)
  found = any(kvm_image in image for image in imagelist)
  if found:
      kvm_build_image=kvm_image + "-galera"
  else:
      kvm_build_image=kvm_image + "-build"
  return kvm_build_image


# For example, if you had CVSToys installed on your repository, and your
# CVSROOT/freshcfg file had an entry like this:
#pb = ConfigurationSet([
#    (None, None, None, PBService(userpass=('foo', 'bar'), port=4519)),
#    ])

# then you could use the following buildmaster Change Source to subscribe to
# the FreshCVS daemon and be notified on every commit:
#
#from buildbot.changes.freshcvs import FreshCVSSource
#fc_source = FreshCVSSource("cvs.example.com", 4519, "foo", "bar")
#c['change_source'] = fc_source

# or, use a PBChangeSource, and then have your repository's commit script run
# 'buildbot sendchange', or use contrib/svn_buildbot.py, or
# contrib/arch_buildbot.py :
#
#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()


####### SCHEDULERS

## configure the Schedulers

# Unused builders:
#    "centos5-debug",
#    "lenny-amd64-dbg", "adutko-alpha",
#    "jaunty-x86-valgrind", "jaunty-amd64-rel",
#    "gentoo-x86-dbg",
#    "ubuntu-x86-dbg",
#    "gentoo-amd64-sanja",
#    "opensolaris-511-x86",
#    "sol10-amd64-dbg", "sol10-sparc32-forte", "sol10-sparc64-forte",
#    "mac-mini-x86-dbg",
#    "win7-x86",	# can not run 24/7
#    "fedora13-x86-dbg",
#    "adutko-generic",
#    "aps82-204-generic"
#    "freebsd-amd64",

myMainBuilders = [
#    "work-amd64-valgrind",
    "win32-debug",
    "winx64-debug",
#    "macintosh",
    "labrador",
#    "mac-1012-bintar",
#    "bld-starfs-debug",
#    "bld-starfs-release",
#   "raspberrypi",
#    "power01"
    ]

myPower8Builders = [
     "p8-rhel6-bintar"
    ,"p8-rhel6-bintar-debug"
    ,"p8-rhel7-bintar"
    ,"p8-rhel7-bintar-debug"
    ,"p8-rhel71-bintar"
    ,"p8-rhel71-bintar-debug"
#    ,"p8-trusty-bintar"
#    ,"p8-trusty-bintar-debug"
#    ,"p8-trusty-deb"
#    ,"p8-xenial-bintar"
#    ,"p8-xenial-bintar-debug"
#    ,"p8-xenial-deb"
    ,"p8-rhel6-rpm"
    ,"p8-rhel7-rpm"
    ,"p8-rhel71-rpm"
    ,"p8-suse12-rpm"
    ]

myIBMzBuilders = [
    "ibmz-rhel6-bintar"
    ,"ibmz-rhel6-rpm"
    ,"ibmz-sles11-bintar"
    ,"ibmz-sles11-rpm"
    ]

myNonSystemdBuilders = [
#     "kvm-deb-debian6-amd64"
#    ,"kvm-deb-debian6-x86"
    "kvm-deb-wheezy-amd64"
    ,"kvm-deb-wheezy-x86"
#    ,"kvm-deb-precise-amd64"
#    ,"kvm-deb-precise-x86"
    ,"kvm-deb-trusty-ppc64le"
    ,"kvm-deb-trusty-amd64"
    ,"kvm-deb-trusty-x86"
#    ,"kvm-deb-utopic-amd64"
#    ,"kvm-deb-utopic-x86"
#    ,"kvm-rpm-centos5-amd64"
#    ,"kvm-rpm-centos5-x86"
    ,"kvm-rpm-centos6-amd64"
    ,"kvm-rpm-centos6-x86"
    ,"kvm-zyp-sles11-amd64"
#    ,"kvm-zyp-sles11sp1-amd64"
    ,"kvm-zyp-sles11-x86"
    ,"kvm-zyp-sles12-amd64"
#    ,"kvm-rpm-rhel5-amd64"
#    ,"kvm-rpm-rhel5-x86"
    ]

default_branch_filter = BranchFilter(on_launchpad=bzrBranches,
                                     on_github=gitBranches)
from buildbot.scheduler import AnyBranchScheduler, Triggerable
c['schedulers'] = []
c['schedulers'].append(AnyBranchScheduler(
    name="mariadb",
    change_filter=default_branch_filter,
    treeStableTimer=60,
    builderNames=myMainBuilders))

# Power 8 builders only support 5.5 and 10.0
# We need a BranchFilter so we don't get random stuff from GitHub.
c['schedulers'].append(AnyBranchScheduler(
    name="mariadb-power8",
    change_filter=BranchFilter(on_launchpad={"lp:~maria-captains/maria/5.5" : "5.5",
                                             "lp:~maria-captains/maria/10.0" : "10.0"},
                               on_github={"https://github.com/MariaDB/server" : ("10.3","10.2","10.1","10.0","5.5","5.5-galera","10.0-galera","bb-10.2-mdev10813","10.2-spider"),
                                          "git@github.com:mariadb-corporation/MariaDBEnterprise" : ("10.1e","10.0e","5.5e","10.0e-galera","5.5e-galera")}),
    treeStableTimer=60,
    builderNames=myPower8Builders))

# IBMz builders only support 10.1+
# We need a BranchFilter so we don't get random stuff from GitHub.
#c['schedulers'].append(AnyBranchScheduler(
#    name="mariadb-ibmz",
#    change_filter=BranchFilter(on_github={"https://github.com/MariaDB/server" : ("10.3","10.2","10.1"),
#                                          "git@github.com:mariadb-corporation/MariaDBEnterprise" : ("10.1e","10.2e")}),
#    treeStableTimer=60,
#    builderNames=myIBMzBuilders))

# dgcov script only supports bzr
c['schedulers'].append(AnyBranchScheduler(
    name="mariadb-bzronly",
    change_filter=BranchFilter(on_launchpad=bzrBranches),
    treeStableTimer=60,
    builderNames=["kvm-dgcov-jaunty-i386"]))

c['schedulers'].append(AnyBranchScheduler(
    name="jdbc",
    branches= "https://github.com/MariaDB/mariadb-connector-j.git",
    treeStableTimer=60,
    builderNames=["win-jdbc"
                  ]))

c['schedulers'].append(AnyBranchScheduler(
    name="connector_odbc",
    change_filter=BranchFilter(on_github={"https://github.com/MariaDB/mariadb-connector-odbc" : ("odbc-2.0")}),
    treeStableTimer=60,
    builderNames=["win_connector_odbc"
                  ]))
c['schedulers'].append(AnyBranchScheduler(
    name="connector_odbc_linux",
    change_filter=BranchFilter(on_github={"https://github.com/MariaDB/mariadb-connector-odbc" : ("odbc-2.0")}),
    treeStableTimer=60,
    builderNames=["linux_x64-connector-odbc", "linux_x86-connector-odbc", "centos7_x86-connector-odbc", "centos7_x64-connector-odbc", "jessie_x86-connector-odbc", "jessie_x64-connector-odbc", "generic_x64-connector-odbc",
                  "generic_x86-connector-odbc"
                  ]))

c['schedulers'].append(AnyBranchScheduler(
    name="connector-c",
    change_filter=BranchFilter(on_github={"https://github.com/MariaDB/mariadb-connector-c" : ("connector_c_2.3")}),
    treeStableTimer=60,
    builderNames=["win-connector_c", "freebsd_x64-connector_c", "freebsd11_x64-connector_c", "freebsd11_x86-connector_c", "linux_x64-connector_c", "linux_x86-connector_c", "centos6_i386-connector_c"
                  ]))

c['schedulers'].append(AnyBranchScheduler(
    name="connector-c-3",
    change_filter=BranchFilter(on_github={"https://github.com/MariaDB/mariadb-connector-c" : ("master", "connector_c_3.0", "bb-*")}),
    treeStableTimer=60,
    builderNames=["win-connector_c_3", "linux_x64-connector_c", "linux_x86-connector_c", "centos6_i386-connector_c", "freebsd11_x64-connector_c", "freebsd11_x86-connector_c"
                  ]))

# A scheduler for the GCov build

c['schedulers'].append(AnyBranchScheduler(
    name="gcov",
    treeStableTimer=60,
    branches=["5.1", "5.2", "5.3" ],
    builderNames=["gcov"]
))

#
# A scheduler for the build that compiles DBD::mysql, php and the like
#

c['schedulers'].append(AnyBranchScheduler(
    name="compile-connectors",
    treeStableTimer=60,
    branches=["5.1", "5.2", "5.3"],
    builderNames=["compile-connectors"]
))

#
# A scheduler for testing with customer data
#

c['schedulers'].append(AnyBranchScheduler(
    name="test-customer-data",
    treeStableTimer=60,
    change_filter=BranchFilter(on_launchpad={"lp:~maria-captains/maria/5.2" : "5.2",
                                             "lp:~maria-captains/maria/5.3" : "5.3",
                                             "lp:~maria-captains/maria/5.5" : "5.5",
                                             "lp:~maria-captains/maria/10.0" : "10.0"},
                               on_github={"git@github.com:mariadb-corporation/MariaDBEnterprise" : ("10.1e", "10.0e","5.5e",)}),
    builderNames=["test-customer-data"]
))



#
# A scheduler for the builder that compiles Net::HandlerSocket and tests handlersocket
#

c['schedulers'].append(AnyBranchScheduler(
    name="test-handlersocket",
    treeStableTimer=60,
    change_filter=BranchFilter(on_launchpad={"lp:~maria-captains/maria/5.5" : "5.5",
                                             "lp:~maria-captains/maria/10.0" : "10.0"}),
    builderNames=["test-handlersocket"]
))

# A scheduler for creating tarballs used by non-bzr builders.
c['schedulers'].append(AnyBranchScheduler(
    name="tarbake",
    change_filter=default_branch_filter,
    treeStableTimer=60,
    properties= {"bakebranch": "lp:~maria-captains/ourdelta/ourdelta-montyprogram-fixes"},
    builderNames=["kvm-tarbake-jaunty-x86"]))

# A scheduler for running those of the kvm-based builders that are run in
# all trees.
c['schedulers'].append(Triggerable(
        name="kvm-sched-alltrees",
        builderNames=[
                      "kvm-fulltest",
#                      "kvm-fulltest2",
                      "winx64-packages",
                      "win32-packages",
#                      "bsd9-64",
#                      "kvm-deb-hardy-x86",
                      "kvm-deb-wheezy-amd64",
                      "kvm-deb-trusty-amd64",
                      "kvm-deb-trusty-ppc64le",
#                      "kvm-rpm-fedora18-amd64",
#                      "kvm-bintar-precise-x86",
                      "kvm-bintar-trusty-x86",
                      "kvm-bintar-trusty-amd64",
                      "kvm-bintar-quantal-x86",
#                      "kvm-bintar-centos5-x86",
                      "kvm-bintar-centos5-amd64",
                      "kvm-bintar-quantal-amd64",
#                      "kvm-bintar-centos5-amd64",
                      "kvm-rpm-centos6-amd64",
                      "kvm-rpm-centos7-amd64",
                      "kvm-rpm-centos73-amd64",
                      "kvm-rpm-centos73-ppc64",
                      "kvm-rpm-centos73-ppc64le",
                      "kvm-deb-sid-amd64", "kvm-deb-sid-x86",
#                      "sol10-64",
#                     "sol10-sparc",
#                      "xenial-amd64-valgrind",
                      ]))
# A scheduler for running those of the kvm-based builders that are run only
# in main trees.
c['schedulers'].append(Triggerable(
        name="kvm-sched-mainonly",
        builderNames=[
                      "work-amd64-valgrind",
                      "mac-1012-bintar",
                      "mac-1012-pkg",
                      "bld-starfs-debug", "bld-starfs-release",
                      "kvm-bintar-centos5-x86", 
#                     "kvm-bintar-centos5-amd64",
#                      "kvm-bintar-trusty-x86",
#                      "kvm-bintar-trusty-amd64",
                      "kvm-freebsd11-x86", "kvm-freebsd11-amd64",
#                      "kvm-rpm-centos5-x86", "kvm-rpm-centos5-amd64",
                      "kvm-rpm-centos6-x86", 
#			"kvm-rpm-centos6-amd64",
#                      "kvm-rpm-centos7_0-x86_64",
#                      "kvm-zyp-opensuse13_1-x86", "kvm-zyp-opensuse13_1-x86_64",
#                      "kvm-zyp-opensuse13-x86", "kvm-zyp-opensuse13-amd64",
#                      "kvm-zyp-sles11-x86_64",
#                      "kvm-zyp-sles11-x86", "kvm-zyp-sles11-amd64",
#                      "kvm-zyp-sles11sp1-amd64",
#                      "kvm-zyp-sles12-x86_64",
                      "kvm-zyp-sles12-amd64",
#                      "kvm-rpm-fedora16-x86", "kvm-rpm-fedora16-amd64",
#                      "kvm-rpm-fedora18-x86",
#                      "kvm-rpm-fedora19-x86", "kvm-rpm-fedora19-amd64",
#                      "kvm-rpm-fedora20-x86", "kvm-rpm-fedora20-amd64",
#                      "kvm-rpm-opensuse12-x86", "kvm-rpm-opensuse12-amd64",
#                      "kvm-rpm-rhel5-x86",
#                      "kvm-rpm-rhel5-amd64",
#                      "kvm-rpm-rhel6-x86",  # Some kvm images are missing
#                      "kvm-rpm-rhel6-amd64",
#                      "kvm-deb-debian5-amd64", "kvm-deb-debian5-x86",
#                      "kvm-deb-debian6-amd64", "kvm-deb-debian6-x86",
                      "kvm-deb-wheezy-x86",
#                      "kvm-deb-hardy-amd64",
#                      "kvm-deb-lucid-amd64", "kvm-deb-lucid-x86",
#                      "kvm-deb-maverick-amd64", "kvm-deb-maverick-x86",
#                      "kvm-deb-natty-amd64", "kvm-deb-natty-x86",
#                      "kvm-deb-oneiric-amd64", "kvm-deb-oneiric-x86",
#                      "kvm-deb-quantal-amd64", "kvm-deb-quantal-x86",
#                      "kvm-deb-raring-amd64", "kvm-deb-raring-x86",
#                      "kvm-deb-saucy-amd64", "kvm-deb-saucy-x86",
                      "kvm-deb-trusty-x86",
#                      "kvm-deb-utopic-amd64", "kvm-deb-utopic-x86",
#                      "kvm-bintar-hardy-amd64", "kvm-bintar-hardy-x86",
#                      "kvm-bintar-precise-amd64",
#                      "opensolaris-511-bintar",
                      "kvm-fulltest-big",
                      "kvm-fulltest2-big",
                      "sol10-64",
#                      "xenial-amd64-valgrind",
                      ]))

c['schedulers'].append(Triggerable(
        name="kvm-sched-enterprise-only",
        builderNames=[
                      "kvm-zyp-sles11-x86", "kvm-zyp-sles11-amd64",
                      ]))

# These are no longer used, the distro is out of support or they have been
# superceeded by other builders.
#                      "kvm-rpm-fedora17-x86", "kvm-rpm-fedora17-amd64",
#                      "kvm-zip-winxp-x86",
#                      "kvm-deb-debian4-amd64", "kvm-deb-debian4-x86",
#                      "kvm-deb-intrepid-amd64", "kvm-deb-intrepid-x86",
#                      "kvm-deb-jaunty-amd64", "kvm-deb-jaunty-x86",
#                      "kvm-deb-karmic-amd64", "kvm-deb-karmic-x86",

# A scheduler for running those of the kvm-based builders that are run only
# in main trees, and only in 5.5, 10.0, and 10.1
#c['schedulers'].append(Triggerable(
#        name="kvm-sched-mainonly-5.5-10.1",
#        builderNames=[
#                      "kvm-deb-precise-amd64", "kvm-deb-precise-x86",
#                      ]))


# A scheduler for running those of the kvm-based builders that are run only
# in main trees, and only in 10.0 or later.
c['schedulers'].append(Triggerable(
        name="kvm-sched-mainonly-10.1+",
        # Fedora 24 has MariaDB 10.1, so no need to build lower versions
        builderNames=[
                      "kvm-rpm-fedora24-x86", "kvm-rpm-fedora24-amd64",
                      "kvm-rpm-fedora25-x86", "kvm-rpm-fedora25-amd64",
                      "kvm-deb-stretch-amd64", "kvm-deb-stretch-x86",
                      "kvm-deb-stretch-ppc64le",
                      "kvm-deb-zesty-amd64", "kvm-deb-zesty-x86",
                      ]))

c['schedulers'].append(Triggerable(
        name="kvm-sched-mainonly-10.0+",
        # Debian SID has MariaDB 10.0 native, so our 5.5 3rd-party builds
        # do not work.
	# Ubuntu Utopic has Boost 1.55, with which the old OQGRAPH does not build.
        # And the official repo has MariaDB 5.5, so there is no critical need
        # to build it
        builderNames=[
                      "kvm-deb-jessie-amd64", "kvm-deb-jessie-x86",
                      "kvm-deb-jessie-ppc64le",
                      #"kvm-deb-vivid-amd64", "kvm-deb-vivid-x86",
                      #"kvm-deb-wily-amd64", "kvm-deb-wily-x86",
                      "kvm-deb-xenial-amd64", "kvm-deb-xenial-x86",
                      "kvm-deb-xenial-ppc64le",
                      "kvm-deb-yakkety-amd64", "kvm-deb-yakkety-x86",
                      #"kvm-rpm-fedora21-x86", "kvm-rpm-fedora21-amd64",
                      #"kvm-rpm-fedora22-x86", "kvm-rpm-fedora22-amd64",
                      #"kvm-rpm-fedora23-x86", "kvm-rpm-fedora23-amd64",
                      "kvm-zyp-opensuse42-amd64",
                      ]))

# Created on 2017-01-22 by Elena
# to have xenial built for non-main 10+ trees instead of precise,
# which is only built for main 5.5-10.1 trees
c['schedulers'].append(Triggerable(
        name="kvm-sched-devtrees-10.0+",
        builderNames=[
                      "kvm-deb-xenial-x86",
                      ]))

# Precise is now EOL - removing this scheduler - 2017-05-31 - dbart
## To preserve precise for 5.5 development trees, since
## we don't build xenail there
#c['schedulers'].append(Triggerable(
#        name="kvm-sched-devtrees-5.5",
#        builderNames=[
#                      "kvm-deb-precise-x86",
#                      ]))


# kvm-fulltest2 - moved from 'alltrees' to a separate scheduler for 5.5+,
#   because it doesn't compile on 5.1-5.3
c['schedulers'].append(Triggerable(
    name="kvm-sched-fulltest2",
    builderNames=["kvm-fulltest2"]
))

execfile("/etc/buildbot/builders/qa/qa_schedulers.py");

#
# A scheduler for building Galera packages
#
myGaleraBuilders = [
                    #"kvm-rpm-centos5-x86-gal", "kvm-rpm-centos5-amd64-gal",
                    "kvm-rpm-centos6-x86-gal", "kvm-rpm-centos6-amd64-gal",
                    "kvm-rpm-centos7-amd64-gal",
                    "kvm-rpm-centos73-amd64-gal",
                    "kvm-rpm-centos73-ppc64-gal",
                    "kvm-rpm-centos73-ppc64le-gal",
                    # "kvm-rpm-fedora19-x86-gal", "kvm-rpm-fedora19-amd64-gal",
                    # "kvm-rpm-fedora20-x86-gal", "kvm-rpm-fedora20-amd64-gal",
                    #"kvm-rpm-fedora21-x86-gal", "kvm-rpm-fedora21-amd64-gal",
                    #"kvm-rpm-fedora22-x86-gal", "kvm-rpm-fedora22-amd64-gal",
                    #"kvm-rpm-fedora23-x86-gal", "kvm-rpm-fedora23-amd64-gal",
                    "kvm-rpm-fedora24-x86-gal", "kvm-rpm-fedora24-amd64-gal",
                    "kvm-rpm-fedora25-x86-gal", "kvm-rpm-fedora25-amd64-gal",
                    #"kvm-rpm-rhel5-x86-gal", "kvm-rpm-rhel5-amd64-gal",

                    # "kvm-deb-lucid-amd64-gal", "kvm-deb-lucid-x86-gal",
                    "kvm-deb-precise-amd64-gal", "kvm-deb-precise-x86-gal",
                    "kvm-deb-trusty-amd64-gal", "kvm-deb-trusty-x86-gal",
                    "kvm-deb-trusty-ppc64le-gal",
                    # "kvm-deb-utopic-amd64-gal", "kvm-deb-utopic-x86-gal",
                    #"kvm-deb-vivid-amd64-gal", "kvm-deb-vivid-x86-gal",
                    #"kvm-deb-wily-amd64-gal", "kvm-deb-wily-x86-gal",
                    "kvm-deb-xenial-amd64-gal", "kvm-deb-xenial-x86-gal",
                    "kvm-deb-xenial-ppc64le-gal",
                    "kvm-deb-yakkety-amd64-gal", "kvm-deb-yakkety-x86-gal",
                    "kvm-deb-zesty-amd64-gal", "kvm-deb-zesty-x86-gal",
                    #"kvm-deb-debian6-amd64-gal", "kvm-deb-debian6-x86-gal",
                    "kvm-deb-wheezy-amd64-gal", "kvm-deb-wheezy-x86-gal",
                    "kvm-deb-jessie-amd64-gal", "kvm-deb-jessie-x86-gal",
                    "kvm-deb-jessie-ppc64le-gal",
                    "kvm-deb-stretch-amd64-gal", "kvm-deb-stretch-x86-gal",
                    "kvm-deb-stretch-ppc64le-gal",
                    "kvm-deb-sid-amd64-gal", "kvm-deb-sid-x86-gal",

                    #"kvm-zyp-opensuse13-x86-gal", "kvm-zyp-opensuse13-amd64-gal",
                    "kvm-zyp-opensuse42-amd64-gal",
                    "kvm-zyp-sles11-x86-gal", "kvm-zyp-sles11-amd64-gal",
                    "kvm-zyp-sles12-amd64-gal", "kvm-zyp-sles11sp1-amd64-gal",

                    # Power8
                    "p8-rhel6-rpm-gal", "p8-rhel7-rpm-gal",
                    "p8-rhel71-rpm-gal",
                    #"p8-trusty-deb-gal",
                    "p8-suse12-rpm-gal",
                    #"p8-xenial-deb-gal",
                   ]


c['schedulers'].append(AnyBranchScheduler(
    name="galera",
    treeStableTimer=60,
    change_filter=BranchFilter(on_github=
      {
        "https://github.com/MariaDB/galera":
        (
          "mariadb-3.x",
          "mariadb-3.x-*",
        )
      }),
    builderNames=myGaleraBuilders))

#
# a scheduler for testing debian packaging: all deb builders, nothing else
#

c['schedulers'].append(Triggerable(
        name="kvm-sched-debpkg-trees",
        builderNames=[
#                      "kvm-deb-debian6-amd64", "kvm-deb-debian6-x86",
                      "kvm-deb-wheezy-amd64",  "kvm-deb-wheezy-x86",
#                      "kvm-deb-precise-amd64", "kvm-deb-precise-x86",
                      "kvm-deb-trusty-amd64",  "kvm-deb-trusty-x86",
                      "kvm-deb-trusty-ppc64le",
#                      "kvm-deb-utopic-amd64",  "kvm-deb-utopic-x86",
                      "kvm-deb-stretch-amd64", "kvm-deb-stretch-x86",
                      "kvm-deb-stretch-ppc64le",
                      "kvm-deb-sid-amd64",     "kvm-deb-sid-x86",
                      "kvm-deb-jessie-amd64",  "kvm-deb-jessie-x86",
                      "kvm-deb-jessie-ppc64le",
#                      "kvm-deb-vivid-amd64",   "kvm-deb-vivid-x86",
#                      "kvm-deb-wily-amd64",   "kvm-deb-wily-x86",
                      "kvm-deb-xenial-amd64",   "kvm-deb-xenial-x86",
                      "kvm-deb-xenial-ppc64le",
                      "kvm-deb-yakkety-amd64",   "kvm-deb-yakkety-x86",
                      "kvm-deb-zesty-amd64",   "kvm-deb-zesty-x86",
                      ]))

c['schedulers'].append(Triggerable(
        name="kvm-sched-systemd-trees",
        builderNames=[
                      "kvm-deb-wheezy-amd64",
#                      "kvm-deb-sid-amd64",     "kvm-deb-sid-x86",
                      "kvm-deb-stretch-amd64", "kvm-deb-stretch-x86",
                      "kvm-deb-stretch-ppc64le",
                      "kvm-deb-jessie-amd64",  "kvm-deb-jessie-x86",
                      "kvm-deb-jessie-ppc64le",
#                      "kvm-deb-vivid-amd64",   "kvm-deb-vivid-x86",
#                      "kvm-deb-wily-amd64",   "kvm-deb-wily-x86",
                      "kvm-deb-xenial-amd64",   "kvm-deb-xenial-x86",
                      "kvm-deb-xenial-ppc64le",
                      "kvm-deb-yakkety-amd64",   "kvm-deb-yakkety-x86",
                      "kvm-deb-zesty-amd64",   "kvm-deb-zesty-x86",
                      "kvm-rpm-centos6-x86",
                      "kvm-rpm-centos7-amd64",
                      "kvm-rpm-centos73-amd64",
                      "kvm-rpm-centos73-ppc64",
                      "kvm-rpm-centos73-ppc64le",
#                      "kvm-rpm-fedora20-amd64", "kvm-rpm-fedora20-x86",
#                      "kvm-rpm-fedora21-amd64", "kvm-rpm-fedora21-x86",
#                      "kvm-rpm-fedora22-amd64", "kvm-rpm-fedora22-x86",
#                      "kvm-rpm-fedora23-amd64", "kvm-rpm-fedora23-x86",
                      "kvm-rpm-fedora24-amd64", "kvm-rpm-fedora24-x86",
                      "kvm-rpm-fedora25-amd64", "kvm-rpm-fedora25-x86",
#                      "kvm-zyp-opensuse13-amd64", "kvm-zyp-opensuse13-x86",
                      "kvm-zyp-opensuse42-amd64"
                      ]))


c['schedulers'].append(Triggerable(
        name="kvm-sched-rpm-test-trees",
        builderNames=[
#                      "kvm-rpm-centos5-amd64",
#                      "kvm-rpm-centos5-x86",
                      "kvm-rpm-centos6-amd64",
                      "kvm-rpm-centos6-x86",
                      "kvm-rpm-centos7-amd64",
                      "kvm-rpm-centos73-amd64",
                      "kvm-rpm-centos73-ppc64",
                      "kvm-rpm-centos73-ppc64le",
#                      "kvm-rpm-fedora22-amd64",
#                      "kvm-rpm-fedora22-x86",
#                      "kvm-rpm-fedora23-amd64",
#                      "kvm-rpm-fedora23-x86",
                      "kvm-rpm-fedora24-amd64",
                      "kvm-rpm-fedora24-x86",
                      "kvm-rpm-fedora25-amd64",
                      "kvm-rpm-fedora25-x86",
#                      "kvm-rpm-rhel5-amd64",
#                      "kvm-rpm-rhel5-x86",
#                      "kvm-zyp-opensuse13-amd64",
#                      "kvm-zyp-opensuse13-x86",
                      "kvm-zyp-opensuse42-amd64",
                      "kvm-zyp-sles11-amd64",
                      "kvm-zyp-sles11-x86",
#                      "kvm-zyp-sles11sp1-amd64",
                      "kvm-zyp-sles12-amd64"
                      ]))


# setup the force scheduler (added for buildbot 0.8.8)
from buildbot.schedulers.forcesched import ForceScheduler

c['schedulers'].append(ForceScheduler(
                        name="force",
                        builderNames=[
                          "bld-starfs-debug"
                          ,"bld-starfs-release"
#                          ,"bsd9-64"
                          ,"compile-connectors"
                          ,"gcov"
                          ,"kvm-bintar-centos5-amd64"
                          ,"kvm-bintar-centos5-x86"
                          ,"kvm-bintar-quantal-amd64"
                          ,"kvm-bintar-quantal-x86"
                          ,"kvm-bintar-trusty-amd64"
                          ,"kvm-bintar-trusty-x86"
                          ,"kvm-freebsd11-amd64"
                          ,"kvm-freebsd11-x86"
#                          ,"kvm-deb-debian6-amd64"
#                          ,"kvm-deb-debian6-amd64-gal"
#                          ,"kvm-deb-debian6-x86"
#                          ,"kvm-deb-debian6-x86-gal"
#                          ,"kvm-deb-lucid-amd64"
#                          ,"kvm-deb-lucid-amd64-gal"
#                          ,"kvm-deb-lucid-x86"
#                          ,"kvm-deb-lucid-x86-gal"
#                          ,"kvm-deb-precise-amd64"
                          ,"kvm-deb-precise-amd64-gal"
#                          ,"kvm-deb-precise-x86"
                          ,"kvm-deb-precise-x86-gal"
                          ,"kvm-deb-sid-amd64"
                          ,"kvm-deb-sid-amd64-gal"
                          ,"kvm-deb-sid-x86"
                          ,"kvm-deb-sid-x86-gal"
                          ,"kvm-deb-stretch-amd64"
                          ,"kvm-deb-stretch-amd64-gal"
                          ,"kvm-deb-stretch-x86"
                          ,"kvm-deb-stretch-x86-gal"
                          ,"kvm-deb-stretch-ppc64le"
                          ,"kvm-deb-stretch-ppc64le-gal"
                          ,"kvm-deb-trusty-amd64"
                          ,"kvm-deb-trusty-amd64-gal"
                          ,"kvm-deb-trusty-x86"
                          ,"kvm-deb-trusty-x86-gal"
                          ,"kvm-deb-trusty-ppc64le"
                          ,"kvm-deb-trusty-ppc64le-gal"
#                          ,"kvm-deb-utopic-amd64"
#                          ,"kvm-deb-utopic-amd64-gal"
#                          ,"kvm-deb-utopic-x86"
#                          ,"kvm-deb-utopic-x86-gal"
#                          ,"kvm-deb-vivid-amd64"
#                          ,"kvm-deb-vivid-amd64-gal"
#                          ,"kvm-deb-vivid-x86"
#                          ,"kvm-deb-vivid-x86-gal"
#                          ,"kvm-deb-wily-amd64"
#                          ,"kvm-deb-wily-amd64-gal"
#                          ,"kvm-deb-wily-x86"
#                          ,"kvm-deb-wily-x86-gal"
                          ,"kvm-deb-xenial-amd64"
                          ,"kvm-deb-xenial-amd64-gal"
                          ,"kvm-deb-xenial-x86"
                          ,"kvm-deb-xenial-x86-gal"
                          ,"kvm-deb-xenial-ppc64le"
                          ,"kvm-deb-xenial-ppc64le-gal"
                          ,"kvm-deb-yakkety-amd64"
                          ,"kvm-deb-yakkety-amd64-gal"
                          ,"kvm-deb-yakkety-x86"
                          ,"kvm-deb-yakkety-x86-gal"
                          ,"kvm-deb-zesty-amd64"
                          ,"kvm-deb-zesty-amd64-gal"
                          ,"kvm-deb-zesty-x86"
                          ,"kvm-deb-zesty-x86-gal"
                          ,"kvm-deb-wheezy-amd64"
                          ,"kvm-deb-wheezy-amd64-gal"
                          ,"kvm-deb-wheezy-x86"
                          ,"kvm-deb-wheezy-x86-gal"
                          ,"kvm-deb-jessie-amd64"
                          ,"kvm-deb-jessie-amd64-gal"
                          ,"kvm-deb-jessie-x86"
                          ,"kvm-deb-jessie-x86-gal"
                          ,"kvm-deb-jessie-ppc64le"
                          ,"kvm-deb-jessie-ppc64le-gal"
                          ,"kvm-dgcov-jaunty-i386"
                          ,"kvm-fulltest"
                          ,"kvm-fulltest-big"
                          ,"kvm-fulltest2"
                          ,"kvm-fulltest2-big"
#                          ,"kvm-qa-linux"
#                          ,"kvm-rpm-centos5-amd64"
#                          ,"kvm-rpm-centos5-amd64-gal"
#                          ,"kvm-rpm-centos5-x86"
#                          ,"kvm-rpm-centos5-x86-gal"
                          ,"kvm-rpm-centos6-amd64"
                          ,"kvm-rpm-centos6-amd64-gal"
                          ,"kvm-rpm-centos6-x86"
                          ,"kvm-rpm-centos6-x86-gal"
                          ,"kvm-rpm-centos7-amd64"
                          ,"kvm-rpm-centos7-amd64-gal"
                          ,"kvm-rpm-centos73-amd64"
                          ,"kvm-rpm-centos73-amd64-gal"
                          ,"kvm-rpm-centos73-ppc64"
                          ,"kvm-rpm-centos73-ppc64-gal"
                          ,"kvm-rpm-centos73-ppc64le"
                          ,"kvm-rpm-centos73-ppc64le-gal"
#                          ,"kvm-rpm-fedora19-amd64"
#                          ,"kvm-rpm-fedora19-amd64-gal"
#                          ,"kvm-rpm-fedora19-x86"
#                          ,"kvm-rpm-fedora19-x86-gal"
#                          ,"kvm-rpm-fedora20-amd64"
#                          ,"kvm-rpm-fedora20-amd64-gal"
#                          ,"kvm-rpm-fedora20-x86"
#                          ,"kvm-rpm-fedora20-x86-gal"
#                          ,"kvm-rpm-fedora21-amd64"
#                          ,"kvm-rpm-fedora21-amd64-gal"
#                          ,"kvm-rpm-fedora21-x86"
#                          ,"kvm-rpm-fedora21-x86-gal"
#                          ,"kvm-rpm-fedora22-amd64"
#                          ,"kvm-rpm-fedora22-amd64-gal"
#                          ,"kvm-rpm-fedora22-x86"
#                          ,"kvm-rpm-fedora22-x86-gal"
#                          ,"kvm-rpm-fedora23-amd64"
#                          ,"kvm-rpm-fedora23-amd64-gal"
#                          ,"kvm-rpm-fedora23-x86"
#                          ,"kvm-rpm-fedora23-x86-gal"
                          ,"kvm-rpm-fedora24-amd64"
                          ,"kvm-rpm-fedora24-amd64-gal"
                          ,"kvm-rpm-fedora24-x86"
                          ,"kvm-rpm-fedora24-x86-gal"
                          ,"kvm-rpm-fedora25-amd64"
                          ,"kvm-rpm-fedora25-amd64-gal"
                          ,"kvm-rpm-fedora25-x86"
                          ,"kvm-rpm-fedora25-x86-gal"
#                          ,"kvm-rpm-rhel5-amd64"
#                          ,"kvm-rpm-rhel5-amd64-gal"
#                          ,"kvm-rpm-rhel5-x86"
#                          ,"kvm-rpm-rhel5-x86-gal"
                          ,"kvm-tarbake-jaunty-x86"
#                          ,"kvm-zyp-opensuse13-amd64"
#                          ,"kvm-zyp-opensuse13-amd64-gal"
#                          ,"kvm-zyp-opensuse13-x86"
#                          ,"kvm-zyp-opensuse13-x86-gal"
                          ,"kvm-zyp-opensuse42-amd64"
                          ,"kvm-zyp-opensuse42-amd64-gal"
# As of 2017-01-12, we've decided to stop building SLES11 packages
# but let's keep it for the "force" scheduler
                          ,"kvm-zyp-sles11-amd64"
                          ,"kvm-zyp-sles11sp1-amd64"
                          ,"kvm-zyp-sles11-amd64-gal"
                          ,"kvm-zyp-sles11sp1-amd64-gal"
                          ,"kvm-zyp-sles11-x86"
                          ,"kvm-zyp-sles11-x86-gal"
                          ,"kvm-zyp-sles12-amd64"
                          ,"kvm-zyp-sles12-amd64-gal"
                          ,"labrador"
                          ,"mac-1012-bintar"
                          ,"mac-1012-pkg"
                          ,"freebsd_x64-connector_c"
                          ,"freebsd11_x64-connector_c"
                          ,"freebsd11_x86-connector_c"
                          ,"linux_x64-connector_c"
                          ,"linux_x86-connector_c"
                          ,"centos6_i386-connector_c"
                          ,"linux_x64-connector-odbc"
                          ,"linux_x86-connector-odbc"
                          ,"centos7_x86-connector-odbc"
                          ,"centos7_x64-connector-odbc"
                          ,"jessie_x86-connector-odbc"
                          ,"jessie_x64-connector-odbc"
                          ,"generic_x86-connector-odbc"
                          ,"generic_x64-connector-odbc"
                          ,"linux_x64-connector-odbc-new"
                          ,"linux_x86-connector-odbc-new"
                          ,"centos7_x86-connector-odbc-new"
                          ,"centos7_x64-connector-odbc-new"
                          ,"jessie_x86-connector-odbc-new"
                          ,"jessie_x64-connector-odbc-new"
                          ,"generic_x86-connector-odbc-new"
                          ,"generic_x64-connector-odbc-new"
#                          ,"opensolaris-511-bintar"
                          ,"p8-rhel6-bintar"
                          ,"p8-rhel6-bintar-debug"
                          ,"p8-rhel6-rpm"
                          ,"p8-rhel6-rpm-gal"
                          ,"p8-rhel71-bintar"
                          ,"p8-rhel71-bintar-debug"
                          ,"p8-rhel71-rpm"
                          ,"p8-rhel71-rpm-gal"
                          ,"p8-rhel7-bintar"
                          ,"p8-rhel7-bintar-debug"
                          ,"p8-rhel7-rpm"
                          ,"p8-rhel7-rpm-gal"
                          ,"p8-suse12-rpm"
                          ,"p8-suse12-rpm-gal"
#                          ,"p8-trusty-bintar"
#                          ,"p8-trusty-bintar-debug"
#                          ,"p8-trusty-deb"
#                          ,"p8-trusty-deb-gal"
#                          ,"p8-xenial-bintar"
#                          ,"p8-xenial-bintar-debug"
#                          ,"p8-xenial-deb"
#                          ,"p8-xenial-deb-gal"
#                         ,"ibmz-rhel6-bintar"
#                         ,"ibmz-rhel6-rpm"
#                         ,"ibmz-sles11-bintar"
#                          ,"ibmz-sles11-rpm"
#                          ,"power01"
#                          ,"raspberrypi"
                          ,"sol10-64"
#                          ,"sol10-sparc"
                          ,"test-customer-data"
                          ,"test-handlersocket"
                          ,"win32-debug"
                          ,"winx64-debug"
                          ,"win32-packages"
                          ,"winx64-packages"
                          ,"win-connector_c"
                          ,"win-connector_c_3"
                          ,"win_connector_odbc"
                          ,"win_connector_odbc_new"
                          ,"win-jdbc"
                          ,"work-amd64-valgrind"
                          ,"xenial-amd64-valgrind"
                          ,"qa-win-debug"
                          ,"qa-win-rel"
                          ,"qa-kvm-linux"
                          ]))


# Prioritize the builders that trigger other builds.
# This avoids getting into a situation where we have free slave resources
# waiting for a triggering build to finish.
# We don't do much else, as we want to avoid starving some builders;
# it is usually more important to prioritize by branch than by builder.
# Note that this relies on Python sort being a stable sort, so default
# order from Buildbot is kept. This is guaranteed from Python 2.2.

from twisted.python import log

def oldprioritizeBuilders(buildmaster, builders):
#    log.msg("Starting prioritizeBuilders")
    def builder_prio_sort_key(b):
        n= b.name
        if n == "kvm-tarbake-jaunty-x86":
            return 0
        else:
            return 1
    builders.sort(key=builder_prio_sort_key)
#    log.msg(builders)
    return builders

from twisted.internet import defer
@defer.inlineCallbacks
def prioritizeBuilders(buildmaster, builders):
#    log.msg("Starting prioritizeBuilders")

    # For tarbake priority is 0, which will be the highest.
    # For the rest priority is the oldest request time,
    # the earlier time, the higher priority.
    # Builders which don't have requests will return None
    # which will go last
    def builder_prio_sort_key(b):
        if b.name == "kvm-tarbake-jaunty-x86":
            return 0
        else:
            return b.getOldestRequestTime()

    def xform(bldr):
        d = defer.maybeDeferred(lambda: builder_prio_sort_key(bldr))
	d.addCallback(lambda prio: (prio, bldr))
        return d

    xformed = yield defer.gatherResults(
       [xform(bldr) for bldr in builders])

    # The value is 0 if it is a tarbake, we put it first.
    # None goes last, as it does in the default sorter.
    # Real values are compared
    def tweakedcmp(a, b):
        if a[0] == 0 or b[0] is None:
            return -1
        if b[0] == 0 or a[0] is None:
            return 1
        return cmp(a, b)
    xformed.sort(cmp=tweakedcmp)

    rv = [xf[1] for xf in xformed]
    log.msg("Prioritized builders", rv)
    defer.returnValue(rv)


c['prioritizeBuilders'] = prioritizeBuilders

####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['bots']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

import re
from buildbot.process import factory
from buildbot.steps.source import Bzr
from buildbot.steps.source import Git
#from buildbot.steps.shell import ShellCommand, Compile, Test, SetProperty
from buildbot.steps.shell import ShellCommand, Compile, Test, SetPropertyFromCommand
from buildbot.process.mtrlogobserver import MTR, MtrLogObserver, EqConnectionPool
from buildbot.steps.transfer import FileUpload, FileDownload, DirectoryUpload
from buildbot.process.properties import WithProperties, Property
from buildbot.steps.trigger import Trigger

gccWarningPattern= "^(.*?):([0-9]+):(?:[0-9]+:)? [Ww]arning: (.*)$"
vsWarningPattern= "^(?:\s*>[0-9]+)?\s*([^)]*?)\\(([0-9]+)\\)\s*:\s*warning\s*[-_a-zA-Z0-9]+\s*:\s*(.*)$"

def getCompileStep(cmd, subdir="", **kwargs):
    return Compile(command=cmd,
                   warningPattern=gccWarningPattern,
                   warningExtractor=Compile.warnExtractFromRegexpGroups,
                   suppressionFile=WithProperties(subdir + "support-files/compiler_warnings.supp"),
                   **kwargs
                   )

# The private config file instantiates an instance of EqConnectionPool("MySQLdb", ...)
# with the correct database account password etc.
connection_pool = configDict["cfg"]["connectionPool"]

def getMTR(**kwargs):
    return MTR(
        dbpool=connection_pool,
        warningPattern="MTR's internal check of the test case '.*' failed|Failing test\(s\):.*|\*\*\*Warnings generated in error logs.*|Pre-MTR warning:.*",
#        warningPattern="MTR's internal check of the test case '.*' failed",
        **kwargs)

def on_github(step):
  return re.match('(https://|git@)github.com', step.getProperty('repository'))

def not_on_github(step):
  return not on_github(step)

maybe_git_checkout = Git(repourl=Property('repository'),
                         mode="copy",
                         retry=(10,3),
                         doStepIf=on_github,
                         )

# Have a nice fat checkout timeout.
# Bzr branching can be _really_ slow, especially on modest 'net connections.
maybe_bzr_checkout = Bzr(repourl=WithProperties('lp:%(repository)s'),
                         mode="clobber",
                         forceSharedRepo=True,
                         timeout = 6*3600,
                         doStepIf=not_on_github,
                         )

valgf = factory.BuildFactory()
valgf.addStep(maybe_bzr_checkout)
valgf.addStep(maybe_git_checkout)
valgf.addStep(ShellCommand(
        description=["cleanup"],
        descriptionDone=["cleanup"],
        command=["sh", "-c", WithProperties("""
rm -rf /dev/shm/var_auto_*
#rm -rf valgrind-3.12.0
#wget http://valgrind.org/downloads/valgrind-3.12.0.tar.bz2
#bunzip2 valgrind-3.12.0.tar.bz2
#tar xvf valgrind-3.12.0.tar
#rm valgrind-3.12.0.tar
#cd valgrind-3.12.0
#make clean
#./configure --prefix=/mnt/data/buildot/valgrind-3.12
#make -j5
#make install
#cd ..
#rm -rf valgrind-3.12.0
PATH=/mnt/data/buildot/valgrind-3.12/bin:$PATH
valgrind --version
""")]))

# Removed -DWITH_SSL=bundled from the line below to allow 10.2 to build
valgf.addStep(getCompileStep(["sh", "-c", "cmake . -DCMAKE_BUILD_TYPE=Debug -DWITH_VALGRIND=1 &&  make -j5"],
                          env={"EXTRA_FLAGS": "-O3 -fno-omit-frame-pointer -Wno-uninitialized -fno-strict-aliasing",
                               "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}))

# To keep execution time reasonable, only run all default suites for the main trees.
# For development trees, let's run only main now (can add something else later)

valgf.addStep(getMTR(
        doStepIf=isMainTree,
        test_type="nm",
        test_info="Valgrind run, no --ps-protocol, default suites",
        timeout=9600,  # Longer than mtr timeout, which defaults to 9000 for Valgrind.
        env={"MTR_FEEDBACK_PLUGIN": "1"},
#        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl --skip-test=binlog_encryption\. --verbose-restart --mem --parallel=4 --valgrind --valgrind-option=--show-reachable=yes --valgrind-option=--gen-suppressions=all --force --retry=3  --max-test-fail=100 --max-save-core=0 --max-save-datadir=1"],
        command=["sh", "-c", WithProperties("""
export PATH=/mnt/data/buildot/valgrind-3.12/bin:$PATH
cd mysql-test
# --skip-test=binlog_encryption\.
perl mysql-test-run.pl --verbose-restart --mem --parallel=4 --valgrind --valgrind-option=--show-reachable=yes --valgrind-option=--gen-suppressions=all --force --max-test-fail=100 --max-save-core=0 --max-save-datadir=1
""")],
        parallel=4))


#bld_valgrind = {'name': "hardy-amd64-valgrind",
#                'slavename': "valgrind",
#                'builddir': "valgrind",
#                'factory': valgf,
#                "nextBuild": myNextBuild,
#                "category": "main",
#                }

bld_work_valgrind = {'name': "work-amd64-valgrind",
                'slavename': "work-opensuse-amd64",
                'builddir': "work-opensuse-amd64",
                'factory': valgf,
                "nextBuild": myNextBuild,
                "category": "main",
                }

#compile_dbg_64 = getCompileStep(["BUILD/compile-pentium64-debug-max"])
#test_2 = getMTR(
#    test_type="nm",
#    test_info="Normal run, no --ps-protocol",
#    command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --parallel=2 --force --retry=3  --max-save-core=0 --max-save-datadir=1"])

# Try if a longer timeout avoids problem in innodb_xtradb_bug317074 test.
#test_longtimeout = getMTR(
#    test_type="nm",
#    test_info="Normal run, no --ps-protocol",
#    command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3  --testcase-timeout=45 --mysqld=--skip-safemalloc --max-save-core=0 --max-save-datadir=1"],
#    timeout=2700)

# f_dbg_2_64 = factory.BuildFactory()
# f_dbg_2_64.addStep(bzr_checkout)
# f_dbg_2_64.addStep(compile_dbg_64)
# f_dbg_2_64.addStep(test_longtimeout)

# f_dbg_2_64_mkshr = factory.BuildFactory()
# f_dbg_2_64_mkshr.addStep(bzr_checkout)
# f_dbg_2_64_mkshr.addStep(compile_dbg_64)
# f_dbg_2_64_mkshr.addStep(test_2)

# f_rel_1_32 = factory.BuildFactory()
# f_rel_1_32.addStep(bzr_checkout)
# f_rel_1_32.addStep(getCompileStep(["BUILD/compile-pentium-max"],
#                                   env={"AM_MAKEFLAGS": "-j1", "EXTRA_FLAGS": "-DFORCE_INIT_OF_VARS"}))
# # --testcase-timeout as this host is really slow at some tests.
# f_rel_1_32.addStep(getMTR(
#         test_type="nm",
#         test_info="Normal run, no --ps-protocol",
#         command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3  --testcase-timeout=45 --suite-timeout=600 --mysqld=--skip-safemalloc"],
#         timeout=2700))


# mac mini 2GB, 10.5

test_mac = getMTR(
    test_type="nm",
    test_info="Normal run, no --ps-protocol",
    env={"MTR_FEEDBACK_PLUGIN": "1"},
    command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3  --max-save-core=0 --max-save-datadir=1"],
    doStepIf=branch_is_5_5_or_later)

# f_dbg_macintosh = factory.BuildFactory()
# f_dbg_macintosh.addStep(bzr_checkout)
# f_dbg_macintosh.addStep(getCompileStep(["sh", "-c", "cmake . && make"],
#                                        env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
#                                             "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}))
# f_dbg_macintosh.addStep(test_mac)

# bld_macintosh = {"name": "macintosh",
#                  "slavename": "macintosh",
#                  "builddir": "macintosh",
#                  "factory": f_dbg_macintosh,
#                  "nextBuild": myNextBuild,
#                  "category": "main",
#                  }


# raspberrypi

test_raspberrypi = getMTR(
    test_type="nm",
    test_info="Normal run, no --ps-protocol",
    env={"MTR_FEEDBACK_PLUGIN": "1"},
    command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3  --max-save-core=0 --max-save-datadir=1"])

f_dbg_raspberrypi = factory.BuildFactory()
f_dbg_raspberrypi.addStep(maybe_bzr_checkout)
f_dbg_raspberrypi.addStep(maybe_git_checkout)
f_dbg_raspberrypi.addStep(
     getCompileStep(["sh", "-c", "cmake . -DBUILD_CONFIG=mysql_release -DWITH_SSL=system && make"],
     env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
          "CXX": "g++",
          "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"},
     doStepIf=branch_is_5_5_or_later)
)
f_dbg_raspberrypi.addStep(test_raspberrypi)

bld_raspberrypi = {"name": "raspberrypi",
                 "slavename": "raspberrypi",
                 "builddir": "raspberrypi",
                 "factory": f_dbg_raspberrypi,
                 "nextBuild": myNextBuild,
                 "category": "experimental",
                 }

## power01 (IBM Power7 Red Hat 6 Buildslave)
#
#test_power01 = getMTR(
#    test_type="nm",
#    test_info="Normal run, no --ps-protocol",
#    env={"MTR_FEEDBACK_PLUGIN": "1"},
#    command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3  --max-save-core=0 --max-save-datadir=1"],
#    doStepIf=branch_is_5_5_or_later)
#
#f_dbg_power01 = factory.BuildFactory()
#f_dbg_power01.addStep(maybe_bzr_checkout)
#f_dbg_power01.addStep(maybe_git_checkout)
#f_dbg_power01.addStep(
#     getCompileStep(["sh", "-c", "export PATH=/opt/at7.0/bin:$PATH && cmake . -DBUILD_CONFIG=mysql_release -DWITH_SSL=system && make"],
#     env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
##          "CXX": "g++ -mminimal-toc",
#          "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"},
#     doStepIf=branch_is_5_5_or_later)
#)
#f_dbg_power01.addStep(test_power01)
#
#bld_power01 = {"name": "power01",
#                 "slavename": "power01",
#                 "builddir": "power01",
#                 "factory": f_dbg_power01,
#                 "nextBuild": myNextBuild,
#                 "category": "experimental",
#                 }


##
##

#test_1 = getMTR(
#    test_type="nm",
#    test_info="Normal run, no --ps-protocol",
#    env={"MTR_FEEDBACK_PLUGIN": "1"},
#    command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3  --max-save-core=0 --max-save-datadir=1"])

#f_dbg_sol_64 = factory.BuildFactory()
#f_dbg_sol_64.addStep(bzr_checkout)
#f_dbg_sol_64.addStep(getCompileStep(["BUILD/compile-solaris-amd64-debug"],
#                                    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
#                                         "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}))
#f_dbg_sol_64.addStep(test_1)

# bld_toby_amd64 = {'name': "sol10-amd64-dbg",
#                      'slavename': "toby-sol10",
#                      'builddir': "toby-sol10",
#                      'factory': f_dbg_sol_64,
#                      "nextBuild": myNextBuild,
#                      "category": "experimental",
#                      }

# f_dbg_sol_sparc32 = factory.BuildFactory()
# f_dbg_sol_sparc32.addStep(bzr_checkout)
# f_dbg_sol_sparc32.addStep(getCompileStep(["BUILD/compile-solaris-sparc-forte-32"]))
# f_dbg_sol_sparc32.addStep(test_1)

# bld_toby_sparc32 = {'name': "sol10-sparc32-forte",
#                     'slavename': "toby-sol10-sparc",
#                     'builddir': "toby-sol10-sparc32",
#                     "nextBuild": myNextBuild,
#                     'factory': f_dbg_sol_sparc32,
#                     "category": "experimental",
#                     }

# f_dbg_sol_sparc64 = factory.BuildFactory()
# f_dbg_sol_sparc64.addStep(bzr_checkout)
# f_dbg_sol_sparc64.addStep(getCompileStep(["BUILD/compile-solaris-sparc-forte"]))
# f_dbg_sol_sparc64.addStep(test_1)

# bld_toby_sparc64 = {'name': "sol10-sparc64-forte",
#                     'slavename': "toby-sol10-sparc",
#                     'builddir': "toby-sol10-sparc64",
#                     "nextBuild": myNextBuild,
#                     'factory': f_dbg_sol_sparc64,
#                     "category": "experimental",
#                     }

# f_sol_sparc_32 = factory.BuildFactory()
# f_sol_sparc_32.addStep(bzr_checkout)
# f_sol_sparc_32.addStep(getCompileStep(["BUILD/compile-solaris-sparc"],
#                                       env={"EXTRA_FLAGS": "-DFORCE_INIT_OF_VARS",
#                                            "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}))
# f_sol_sparc_32.addStep(test_1)

# bld_sol_sparc_32 = {"name": "sol-sparc-32",
#                     "slavename": "adutko-ultrasparc3",
#                     "builddir": "adutko-ultrasparc3",
#                     "factory": f_sol_sparc_32,
#                     "nextBuild": myNextBuild,
#                     "category": "main",
#                     }

#f_dbg_alpha = factory.BuildFactory()
#f_dbg_alpha.addStep(bzr_checkout)
#f_dbg_alpha.addStep(getCompileStep(["BUILD/compile-alpha"]))
#f_dbg_alpha.addStep(test_1)
#bld_adutko_alpha = {'name': "adutko-alpha",
#                     'slavename': "adutko-alpha",
#                     'builddir': "adutko-alpha",
#                     'factory': f_dbg_alpha,
#                    "nextBuild": myNextBuild,
#                    "category": "experimental",
#                     }

#def test_nm(extra=""):
#    return getMTR(
#        test_type="nm",
#        test_info="Normal run, mixed-mode replication, no --ps-protocol",
#        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3  --max-save-core=0 --max-save-datadir=1 --mysqld=--binlog-format=mixed %s" % extra])

#def test_pr(extra=""):
#    return getMTR(
#        test_type="pr",
#        test_info="prepared statement protocol, row-based replication",
#        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3  --max-save-core=0 --max-save-datadir=1 --mysqld=--binlog-format=row --ps-protocol %s" % extra])

#def test_pbxt(extra=""):
#    return getMTR(
#        test_type="pbxt",
#        test_info="PBXT suite tests",
#        timeout=1800,
#        doStepIf=branch_is_5_123,
#        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3  --max-save-core=0 --max-save-datadir=1 --mysqld=--default-storage-engine=pbxt --suite=pbxt %s" % extra])

# f_rel_amd64 = factory.BuildFactory()
# f_rel_amd64.addStep(bzr_checkout)
# f_rel_amd64.addStep(getCompileStep(["BUILD/compile-pentium64-max"],
#                                    env={"EXTRA_FLAGS": "-DFORCE_INIT_OF_VARS"}))
# f_rel_amd64.addStep(test_nm())
# f_rel_amd64.addStep(test_pr())
# f_rel_amd64.addStep(test_pbxt())

# bld_rel_amd64 = {'name': "jaunty-amd64-rel",
#                  'slavename': "psergey-pylon-amd64",
#                  'builddir': "psergey-pylon-amd64",
#                  'factory': f_rel_amd64,
#                  "nextBuild": myNextBuild,
#                  "category": "experimental",
#                  }

# Full safemalloc is really hard on slow hosts, so use
# --mysqld=--skip-safemalloc here.
#f_dbg_x86 = factory.BuildFactory()
#f_dbg_x86.addStep(bzr_checkout)
#f_dbg_x86.addStep(getCompileStep(["BUILD/compile-pentium-debug-max"],
#                                 env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
#                                      "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}))
#f_dbg_x86.addStep(test_nm("--mysqld=--skip-safemalloc"))
#f_dbg_x86.addStep(test_pr("--mysqld=--skip-safemalloc"))
#f_dbg_x86.addStep(test_pbxt("--mysqld=--skip-safemalloc"))

#bld_dbg_x86 = {'name': "gentoo-x86-dbg",
#               'slavename': "psergey-foxhole-x86",
#               'builddir': "psergey-foxhole-x86",
#               'factory': f_dbg_x86,
#               "nextBuild": myNextBuild,
#               "category": "experimental",
#                 }

# bld_dbg2_x86 = {'name': "ubuntu-x86-dbg",
#                'slavename': "psergey-pslp2-x86",
#                'builddir': "psergey-pslp2-x86",
#                'factory': f_dbg_x86,
#                "nextBuild": myNextBuild,
#                "category": "experimental",
#                  }


# f_sanja_gentoo_amd64= factory.BuildFactory()
# f_sanja_gentoo_amd64.addStep(bzr_checkout)
# f_sanja_gentoo_amd64.addStep(getCompileStep(["BUILD/compile-amd64-valgrind-max"]))
# f_sanja_gentoo_amd64.addStep(getMTR(
#         test_type="pm",
#         test_info="Valgrind, with --ps-protocol",
#         command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --parallel=4 --force --retry=3 --valgrind --ps-protocol --max-test-fail=100"],
#         timeout = 3600))
# f_sanja_gentoo_amd64.addStep(getMTR(
#         test_type="nm",
#         test_info="Valgrind in pbxt suite",
#         command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --parallel=4 --force --retry=3 --valgrind --suite=pbxt --mysqld=--default-storage-engine=pbxt --max-test-fail=100"],
#         timeout = 3600))


# bld_sanja_gentoo_amd64 = {'name': "gentoo-amd64-sanja",
#                'slavename': "sanja-gentoo-x86_64",
#                'builddir': "sanja-gentoo-x86_64",
#                'factory': f_sanja_gentoo_amd64,
#                "nextBuild": myNextBuild,
#                 "category": "experimental",
#               }

# The trees for which we save binary packages.
savedPackageBranches= ["5.1", "5.2", "5.3", "5.5", "10.0", "10.1", "10.2", "10.3",
                       "connector_c_2.3", "connector_c_3.0",
                       "connector_c_2.2", "odbc-2.0", "odbc-3.0", "2.1", "master",
                       "10.0-galera", "5.5-galera", "ok-*", "jessie", "jessie-*",
                       "10.1e", "10.0e", "5.5e", "10.0e-galera", "5.5e-galera",
                       "hf-*", "bb-10.1-serg", "bb-10.2-compatibility",
                       "bb-MDEV-10863", "bb-10.0-MDEV-10863",
                       "bb-10.0-MDEV-10644", "bb-10.0-monty", "bb-10.2-mariarocks",
                       "bb-10.1-xtrabackup", "10.3-sequence", "bb-10.3-sequence",
                       "10.2-spider", "bb-10.0-MDEV-11958", "10.0.30-MDEV-11958",
                       "bb-10.1.20-claudio",
                       # Nirbhay : Galera branches
                       "mariadb-3.x", "mariadb-3.x-*",]

def in_savedPackageBranches(step):
    return fnmatch_any(step.getProperty("branch"), savedPackageBranches)

def do_step_always(step):
    return True

def in_systemdBuilders(step):
    return branch_is_10_1_or_later(step) and not fnmatch_any(step.getProperty("buildername"), myNonSystemdBuilders)

# Add build steps that will archive binary packages (or source tarball).
# Relies on external cron job to periodically remove old files.
# The packages are saved under the build number of the tarbake step, so it is
# easy to locate all packages for a given release.
#
# The `sources' argument can contain multiple file names separated by spaces
# (it is interpolated directly into a shell `mv' command); and WithProperties
# expansion is performed.
def addPackageArchiveStep(f, sources, tarbuildnum, do_step_if=do_step_always):
    f.addStep(ShellCommand(
        name="archive",
        description=["archiving"],
        descriptionDone=["archive"],
        doStepIf=(lambda(step): in_savedPackageBranches(step) and do_step_if(step)),
        command=["sh", "-c", WithProperties("""
set -ex
rm -Rf "./%(buildername)s"
mkdir -p "%(buildername)s"
""" + 'cp -rp ' + sources + ' "%(buildername)s/"\n' + """
cd "%(buildername)s"
find . -type f \! -name md5sums.txt|xargs md5sum > md5sums.txt
""")]))
    f.addStep(DirectoryUpload(
        doStepIf=(lambda(step): in_savedPackageBranches(step) and do_step_if(step)),
        slavesrc=WithProperties("%(buildername)s"),
#       masterdest=WithProperties("/media/backup/archive/pack/%(branch)s/build-" +
        masterdest=WithProperties("/ds413/archive/pack/%(branch)s/build-" +
          tarbuildnum + "/%(buildername)s"),
        blocksize=524288,
        compress="gz"))

# A similar funtion to addPackageArchiveStep, but for use with uploading builds
# from builders that are not building from tarbake tarballs
# Places builds under /ds413/archive/builds/
def addPackageUploadStep(f, sources, do_step_if=do_step_always):
    f.addStep(ShellCommand(
        description=["archiving"],
        descriptionDone=["archive"],
        doStepIf=(lambda(step): in_savedPackageBranches(step) and do_step_if(step)),
        command=["sh", "-c", WithProperties("""
set -ex
rm -Rf "./%(revision)s"
mkdir -vp "%(revision)s"
chmod -v 755 "%(revision)s"
""" + 'cp -rvp ' + sources + ' "%(revision)s/"\n' + """
cd "%(revision)s"
if [ -e "`which md5sum`" ];then find . -type f \! -name md5sums.txt|xargs md5sum > md5sums.txt;fi
find . -type f|xargs chmod 644
""")]))
    f.addStep(DirectoryUpload(
        doStepIf=(lambda(step): in_savedPackageBranches(step) and do_step_if(step)),
        slavesrc=WithProperties("%(revision)s"),
        masterdest=WithProperties("/ds413/archive/builds/%(branch)s/%(revision)s/%(buildername)s"),
        blocksize=524288,
        compress="gz"))

def addPackageUploadStepWin(f, sources, do_step_if=do_step_always):
    f.addStep(DirectoryUpload(
        doStepIf=(lambda(step): in_savedPackageBranches(step) and do_step_if(step)),
        slavesrc=WithProperties("%(revision)s"),
        masterdest=WithProperties("/ds413/archive/builds/%(branch)s/%(revision)s/%(buildername)s"),
        blocksize=524288,
        compress="gz"))

# scp options to work-around ssh warnings as we ssh into many different
# VMs with different host keys.
kvm_scpopt = "-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

f_kvm_tarbake_jaunty_x86= factory.BuildFactory()

f_kvm_tarbake_jaunty_x86.addStep(Compile(
        description=["making", "dist"],
        descriptionDone=["make", "dist"],
        timeout = 3600,
        logfiles={"kernel": "kernel_2223.log"},
        env={"TERM": "vt102"},
        command=["runvm", "--port=2223", "--user=buildbot", "-cpu=qemu64", "--smp=4", "--logfile=kernel_2223.log", "/kvm/vms/vm-lucid-amd64-tarbake.qcow2",
        WithProperties("""
set -ex
rm -fv distdirname.txt bakery.txt mariadb-*.tar.gz bakery-*.tar.gz
git init git
case "%(branch)s" in
*5\\.[123]*)
  cd bzr
  rm -Rf build
  bzr co "%(bakebranch:-lp:~maria-captains/ourdelta/ourdelta-montyprogram-fixes)s" build
  cd build
  bakery/preheat.sh
  echo bakery-[0-9]* > bakery.txt
  tar zcf $(cat bakery.txt).tar.gz $(cat bakery.txt)/
  cd $(cat bakery.txt)/
  bzr branch --no-tree "lp:~maria-captains/maria/%(branch)s" local-branch
  bakery/tarbake51.sh %(revision)s local-branch
  cd ..
  mv -v bakery.txt bakery-*.tar.gz ~/
  ;;
*)
  URL="%(repository)s"
  case "$URL" in
  https://github.com/* | git@github.com* )
    cd ~/git
    REMOTE=`git remote -v|grep "$URL.*fetch"|head -n 1|cut -f1`
    if [ -z "$REMOTE" ]; then
      REPO=${URL#*github.com[:/]}
      REMOTE=${REPO/\//-}
      git remote add $REMOTE $URL
    fi
    git fetch --prune $REMOTE
    git checkout --force "%(revision)s"
    echo "Another attempt to solve the problem with the polluted submodule"
    ls -la libmariadb/ || true
    git submodule deinit -f . || true
    ls -la libmariadb/ || true
    echo "... and since git on our tarbake machine is so old, it might not have deinit, so removing contents manually"
    rm -rf libmariadb
    mkdir libmariadb
    git clean -d -f -f -q -x
    git reset --hard
    ls -la libmariadb/ || true
    ;;
  *)
    time bzr co "-r%(revision)s" "lp:$URL" build
    cd build
    ;;
  esac
  mkdir mkdist
  cd mkdist
  cmake ..
  make dist
  touch ~/bakery.txt ~/bakery-dummy.tar.gz
  ;;
esac
basename mariadb-*.tar.gz .tar.gz > ~/distdirname.txt
mv -v "$(cat ~/distdirname.txt).tar.gz" ~/
"""),
        "= scp -v -P 2223 buildbot@localhost:distdirname.txt .",
        "= scp -v -P 2223 buildbot@localhost:bakery.txt .",
        "= scp -v -P 2223 'buildbot@localhost:mariadb-*.tar.gz' .",
        "= scp -v -P 2223 'buildbot@localhost:bakery-*.tar.gz' .",
        ],
        ))
f_kvm_tarbake_jaunty_x86.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["cat", "distdirname.txt"],
        ))
f_kvm_tarbake_jaunty_x86.addStep(SetPropertyFromCommand(
        property="bakery",
        command=["cat", "bakery.txt"],
        ))
addPackageArchiveStep(f_kvm_tarbake_jaunty_x86, '"%(distdirname)s.tar.gz"', "%(buildnumber)s")
f_kvm_tarbake_jaunty_x86.addStep(FileUpload(slavesrc=WithProperties("%(distdirname)s.tar.gz"),
                              masterdest=WithProperties("/var/lib/buildbot/OQ-tarballs/%(buildnumber)s:%(distdirname)s.tar.gz"),
                              blocksize=524288,
                              ))
f_kvm_tarbake_jaunty_x86.addStep(FileUpload(slavesrc=WithProperties("%(bakery)s.tar.gz"),
                              masterdest=WithProperties("/var/lib/buildbot/OQ-bakeries/%(buildnumber)s:%(bakery)s.tar.gz"),
                              blocksize=524288,
                              doStepIf=branch_is_5_123))
myTriggerProperties= {
    "tarballpath": WithProperties("/var/lib/buildbot/OQ-tarballs/%(buildnumber)s:%(distdirname)s.tar.gz"),
    "bakerypath": WithProperties("/var/lib/buildbot/OQ-bakeries/%(buildnumber)s:%(bakery)s.tar.gz"),
    "distname": WithProperties("%(distdirname)s.tar.gz"),
    "tarbuildnum": WithProperties("%(buildnumber)s"),
    }

f_kvm_tarbake_jaunty_x86.addStep(Trigger(
        schedulerNames=["kvm-sched-mainonly"],
        doStepIf=isMainTree,
        waitForFinish=False,
        updateSourceStamp=True,
        set_properties=myTriggerProperties,
        copy_properties=[ "distdirname", "bakery" ]))
f_kvm_tarbake_jaunty_x86.addStep(Trigger(
        schedulerNames=["kvm-sched-enterprise-only"],
        doStepIf=(lambda(step): branch_is_enterprise(step)),
        waitForFinish=False,
        updateSourceStamp=True,
        set_properties=myTriggerProperties,
        copy_properties=[ "distdirname", "bakery" ]))
# Precise is now EOL - removing this scheduler - 2017-05-31 - dbart
#f_kvm_tarbake_jaunty_x86.addStep(Trigger(
#        schedulerNames=["kvm-sched-mainonly-5.5-10.1"],
## Changed on 2017-01-22 by Elena
## If we don't build main 10.2+ on precise,
## there is no point trying it on development trees
## (and x86_64 doesn't build anyway, and it goes EOL in April 2017)
## Note: isMainTree technically is not necessarily "5.5 or later", but we don't need to worry about 5.1-5.3
##        doStepIf=(lambda(step): branch_is_5_5_or_later(step) and not isMainTree10_2Plus(step)),
#	doStepIf=(lambda(step): isMainTree(step) and not branch_is_10_2_or_later(step)),
#        waitForFinish=False,
#        updateSourceStamp=True,
#        set_properties=myTriggerProperties,
#        copy_properties=[ "distdirname", "bakery" ]))
f_kvm_tarbake_jaunty_x86.addStep(Trigger(
        schedulerNames=["kvm-sched-mainonly-10.1+"],
        doStepIf=isMainTree10_1Plus,
        waitForFinish=False,
        updateSourceStamp=True,
        set_properties=myTriggerProperties,
        copy_properties=[ "distdirname", "bakery" ]))
f_kvm_tarbake_jaunty_x86.addStep(Trigger(
        schedulerNames=["kvm-sched-mainonly-10.0+"],
        doStepIf=isMainTree10_0Plus,
        waitForFinish=False,
        updateSourceStamp=True,
        set_properties=myTriggerProperties,
        copy_properties=[ "distdirname", "bakery" ]))
# Added by Elena on 2017-01-22, see comments in scheduler definition
f_kvm_tarbake_jaunty_x86.addStep(Trigger(
        schedulerNames=["kvm-sched-devtrees-10.0+"],
        doStepIf=(lambda(step): branch_is_10_x(step) and not isMainTree(step)),
        waitForFinish=False,
        updateSourceStamp=True,
        set_properties=myTriggerProperties,
        copy_properties=[ "distdirname", "bakery" ]))
# Precise is now EOL - removing this scheduler - 2017-05-31 - dbart
## Added by Elena on 2017-01-22, see comments in scheduler definition
#f_kvm_tarbake_jaunty_x86.addStep(Trigger(
#        schedulerNames=["kvm-sched-devtrees-5.5"],
#        doStepIf=(lambda(step): branch_is_5_5_or_later(step) and not branch_is_10_x(step) and not isMainTree(step)),
#        waitForFinish=False,
#        updateSourceStamp=True,
#        set_properties=myTriggerProperties,
#        copy_properties=[ "distdirname", "bakery" ]))
f_kvm_tarbake_jaunty_x86.addStep(Trigger(
        schedulerNames=["kvm-sched-fulltest2"],
        doStepIf=(lambda(step): branch_is_5_5_or_later(step) and not debpkg_branch(step) and not rpm_test_branch(step)),
        waitForFinish=False,
        updateSourceStamp=True,
        set_properties=myTriggerProperties,
        copy_properties=[ "distdirname", "bakery" ]))
f_kvm_tarbake_jaunty_x86.addStep(Trigger(
        schedulerNames=["kvm-sched-alltrees"],
        doStepIf=(lambda(step): not debpkg_branch(step) and not rpm_test_branch(step)),
        waitForFinish=False,
        updateSourceStamp=True,
        set_properties=myTriggerProperties,
        copy_properties=[ "distdirname", "bakery" ]))
f_kvm_tarbake_jaunty_x86.addStep(Trigger(
        schedulerNames=["kvm-sched-debpkg-trees"],
        doStepIf=debpkg_branch,
        waitForFinish=False,
        updateSourceStamp=True,
        set_properties=myTriggerProperties,
        copy_properties=[ "distdirname", "bakery" ]))

f_kvm_tarbake_jaunty_x86.addStep(Trigger(
        schedulerNames=["kvm-sched-rpm-test-trees"],
        doStepIf=rpm_test_branch,
        waitForFinish=False,
        updateSourceStamp=True,
        set_properties=myTriggerProperties,
        copy_properties=[ "distdirname", "bakery" ]))

# kvm-sched-qa-trees and isTargetQA are defined in qa_schedulers.py
f_kvm_tarbake_jaunty_x86.addStep(Trigger(
        schedulerNames=["kvm-sched-qa-trees"],
        doStepIf=isTargetQA,
        waitForFinish=False,
        updateSourceStamp=True,
        set_properties=myTriggerProperties,
        copy_properties=[ "distdirname", "bakery" ]))


bld_kvm_tarbake_jaunty_x86 = {"name": "kvm-tarbake-jaunty-x86",
                              # replace explicit list with kvm_build_image
                              # after updating tarbake image on bb05:
                              # mv vm-lucid-amd64-tarbake.qcow2 vm-lucid-amd64-tarbake.qcow2.old 
                              # cp vm-trusty-amd64-build.qcow2 vm-lucid-amd64-tarbake.qcow2
                              "slavenames": ["bb01", "bb02", "bb03", "aidi"],
                              "builddir": "kvm-tarbake-jaunty-x86",
                              "factory": f_kvm_tarbake_jaunty_x86,
                              "nextBuild": myNextBuild,
                              "category": "main",
                             }

def DownloadSourceTarball():
    return ShellCommand(
             name="rsync_src",
             description=["rsyncing source tarball"],
             descriptionDone=["rsynced source tarball"],
             haltOnFailure=True,
             command=["sh", "-xc", WithProperties("""
  d=/tmp/buildcache
  f="%(tarbuildnum)s:%(distname)s"
  mkdir -p $d
  find $d -type f -mtime +2 | xargs -r rm -v
  flock "$d/$f" rsync -v -c --stats "hasky.askmonty.org::OQ-tarballs/$f" "$d/$f"
""")])

def ScpSourceIntoVM(port):
  return WithProperties("= scp -P " + port + " " + kvm_scpopt +
                        " /tmp/buildcache/%(tarbuildnum)s:%(distname)s buildbot@localhost:buildbot/%(distname)s")

# kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch come from the caller as is
# action: install | upgrade | update
# upgrade_from: text description of the "old" installation.
#               For MariaDB, Galera, Percona, and (Oracle) MySQL it should take the form "MySQL X.Y".
#               For packages provided by the distro it can be anything, as long as it understandable
#               ( it will show in the test description)
# old_packages: space-separated list of packages from the "old" version to be explicitly installed
# new_packages: space-separated list of packages under test to be installed or upgraded


# The builder requires DownloadSourceTarball, so we have to put it here
# rather than with another valgrind bulder
# Attention! xenial valgrind builder uses port=2331
execfile("/etc/buildbot/builders/bld_xenial_valgrind.py");


from buildbot.status.builder import SKIPPED

def getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
                    action, upgrade_from, old_packages, new_packages,
                    extra_opts="", force_upgrade=0, manual_restart=0, **kwargs):

    test_name = action

    if action == "install":
        test_name = test_name + " over " + upgrade_from
    else:
        test_name = test_name + " from " + upgrade_from

    if extra_opts != "":
        test_name = test_name + " with " + extra_opts

    # On sles11sp1 createrepo is not available, cannot run the test
    # on sles12, some problem with disk while installing createrepo, cannot run the test
    if distro == "sles11sp1" or distro == "sles12":
        return Test(
            description=["testing", test_name],
            descriptionDone=["test", test_name],
            logfiles={"kernel": "kernel_"+port+".log"},
            env={"TERM": "vt102"},
            command=["echo", "\"Test won't be run\""],
            doStepIf=False,
            hideStepIf=True
        )

    pm_extra_options_old = " -y"
    pm_extra_options_new = extra_opts
    pm = "yum"
    pm_clean = "clean all"
    pm_nogpg = "--nogpgcheck"
    pm_repo_location = "yum.repos.d"
    # repo is the contents of the repo file we'll create to install the "old" version
    # (unless it's installed from a default distribution repo)
    repo = ""
    # old_mysql_ver_num is an numeric representation of the version, e.g. 57 etc.,
    # to make sure the comparison to higher versions works OK.
    # It will be used in the shell part for MySQL and Percona password tricks
    old_mysql_ver_num = "0"
    # If we use some workarounds during the test, we'll print warnings about it
    print_warnings = ""

    if action == "install" or action == "upgrade" or action == "update":
        pm_extra_options_new = pm_extra_options_new + " -y"

    if dist_name == "fedora":
        mysql_repo_subdir = "fc"
        if int(dist_num) >= 22:
            pm = "dnf"
    elif dist_name == "rhel" or dist_name == "centos":
        mysql_repo_subdir = "el"
    elif dist_name == "sles" or dist_name == "opensuse":
        mysql_repo_subdir = "sles"
        pm = "zypper --non-interactive"
        pm_clean = "clean --all"
        pm_nogpg = "--no-gpg-checks"
        pm_repo_location = "zypp/repos.d"
        # Workaround for MDEV-9796 (MariaDB not being installable on SUSE)
        # When it's fixed, this setting should happen under condition
        # if new_packages == "":
        if new_packages == "" or action == "install":
            pm_extra_options_new = pm_extra_options_new + " --from local"
            print_warnings = print_warnings + "\necho \"warning: --from <repo> workaround for MDEV-9796 was used while installing new packages\n\""
    else:
        # Nothing good will come out of it
        mysql_repo_subdir = ""

    m = re.search("(MySQL|Percona|MariaDB) ([0-9]+)\.([0-9]+)",upgrade_from)
    if m:
        old_name = m.group(1)
        old_ver_major = m.group(2)
        old_ver_minor = m.group(3)
        old_ver = old_ver_major + "." + old_ver_minor

        if old_name == "MariaDB" or old_name == "Galera":
            repo = "[mariadb]\n" \
                "name=MariaDB\n" \
                "baseurl=http://yum.mariadb.org/" + old_ver + "/" + dist_arch + "\n"\
                "gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB\n" \
                "enabled=1\n" \
                "gpgcheck=0"
            if dist_name == "sles" or dist_name == "opensuse":
                # Workaround for MDEV-9796 (MariaDB not being installable on SUSE)
                pm_extra_options_old = pm_extra_options_old + " --from mariadb"
                print_warnings = print_warnings + "\necho \"warning: --from <repo> workaround for MDEV-9796 was used while installing old packages\n\""

        elif old_name == "MySQL":
            repo = "[mysql-community]\n" \
                "name=MySQL Community Server\n" \
                "baseurl=http://repo.mysql.com/yum/mysql-" + old_ver + "-community/" + mysql_repo_subdir + "/" + dist_num + "/\$basearch/\n" \
                "enabled=1\n" \
                "gpgcheck=0"
            old_mysql_ver_num = old_ver_major + old_ver_minor
            if dist_name == "sles" and int(dist_num) == 11:
                # Workaround: some problem with wildcards on SLES11, maybe this will help
                # it's not a workaround for MariaDB bugs, so we don't print warnings here
                pm_extra_options_old = pm_extra_options_old + " --from mysql-community"

        elif old_name == "Percona":
            repo = "[percona-release]\n" \
                "name=Percona repository\n" \
                "baseurl=http://repo.percona.com/release/" + dist_num + "/RPMS/\$basearch/\n" \
                "enabled=1\n" \
                "gpgcheck=0"
            old_mysql_ver_num = old_ver_major + old_ver_minor

        else:
            repo = ""

    if extra_opts:
        print_warnings = print_warnings + "\necho \"warning: extra options were used: " + extra_opts + "\n\""

    if force_upgrade:
        force_upgrade = " env FORCE_UPGRADE=" + str(force_upgrade) + " "
        print_warnings = print_warnings + "\necho \"warning: FORCE_UPGRADE was used\n\""
    else:
        force_upgrade = ""

    # Workaround for MDEV-9797 (server does not get restarted after upgrade from Galera) and other similar issues,
    # whenever the caller asks for explicit restart
    restart_command = "\necho \"No server restart was requested, it is supposed to be restarted automatically\"\n"
    if manual_restart:
        print_warnings = print_warnings + "\necho \"warning: manual restart was requested, it is a workaround for some bug\"\n"
        restart_command =  "\nsudo /etc/init.d/mysql restart\n"

    return Test(
        description=["testing", test_name],
        descriptionDone=["test", test_name],
        logfiles={"kernel": "kernel_"+port+".log"},
        hideStepIf=(lambda results, s: results==SKIPPED),
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2"] + args + ["vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" "+kvm_scpopt+" rpms buildbot@localhost:buildbot/",
        WithProperties("""
set -ex
cd buildbot

echo "See if any MySQL, MariaDB, Galera or Percona has already been installed"
rpm -qa | { grep -iE 'maria|mysql|galera|percona' || true; }

echo "Remove all unwanted repos in case there are any on the VM image"
ls /etc/yum.repos.d/* | grep -iE '(maria|galera|mysql|percona)' | xargs -r sudo rm -f

echo "Create repo from which the old version will be installed (or empty repo for upgrades from distro)"
sudo sh -c "echo '""" + repo + """' > /etc/""" + pm_repo_location + """/from.repo"
sudo cat /etc/""" + pm_repo_location + """/from.repo
sudo """ + pm + """ """ + pm_clean + """

echo "Install the old version"
sudo """ + pm + """ install """ + pm_extra_options_old + """ """ + old_packages + """
sudo rm -f /etc/""" + pm_repo_location + """/from.repo

echo "Check that we got some packages after installation of the old version"
rpm -qa | grep -iE 'maria|mysql|galera|percona'

echo "See which init scripts or systemd services were installed with the old version"
ls -l /etc/systemd/system/* /run/systemd/system/* /usr/lib/systemd/system/* /etc/init.d/* | grep -iE 'maria|mysql|galera|percona' || true

echo "Try to use systemd; if no service available, try to use init script"
start_cmd=`ls /usr/lib/systemd/system/ | grep "service$" | grep -iE 'maria|mysql|galera|percona'` || true
if [ -n "$start_cmd" ]; then
    # In case there were more than one
    start_cmd=`echo $start_cmd | awk '{ print $1 }'`
    start_cmd="systemctl start $start_cmd"
else
    start_cmd=`ls /etc/init.d/ | grep -iE 'maria|mysql|galera|percona'` || true
    if [ -n "$start_cmd" ]; then
        start_cmd=`echo $start_cmd | awk '{print $1}'`
        start_cmd="/etc/init.d/$start_cmd start"
    else
        echo "ERROR: could not find a start script for the previous version, exiting"
        exit 1
    fi
fi

sudo $start_cmd

echo "For MySQL|Percona 5.7 and higher, we need to do some extra steps to deal with passwords"

if [ """ + old_mysql_ver_num + """ -ge 57 ]; then
    pass=`sudo grep 'temporary password' /var/log/mysqld.log | sed -e "s/.* \\([^ ]*\\)$/\\1/"`
    if [ -n "$pass" ]; then
        pass_options_old="--connect-expired-password -p$pass"
    fi
    mysql -uroot $pass_options_old -e "alter user root@localhost identified by 'My-test1'"
    pass_options_old="--connect-expired-password -pMy-test1"
    pass_options_new="-pMy-test1"
fi

mysql -uroot $pass_options_old -e "select @@version, @@version_comment"

echo "Install createrepo to make a proper local repository out of our RPMs"
# Hack: patterns-openSUSE-minimal_base-conflicts does not allow createrepo to be installed on openSUSE 13
packages_to_remove=`rpm -qa | grep "patterns-openSUSE-minimal_base-conflicts" | xargs`
if [ -n "$packages_to_remove" ]
then
    sudo """ + pm + """ remove -y $packages_to_remove
fi
sudo """ + pm + """ install -y createrepo
sudo rm -f /etc/""" + pm_repo_location + """/createrepo.repo

echo "Create the local repository"
sudo createrepo .

echo "Add local repo"

sudo sh -c "echo '[local]
name=MariaDB New Release
baseurl=file:///home/buildbot/buildbot
enabled=1
gpgcheck=0' > /etc/""" + pm_repo_location + """/local.repo"
sudo cat /etc/""" + pm_repo_location + """/local.repo

# Find out which version we are installing by parsing an RPM name. It should be more reliable
# than using a branch name from the branch property

full_ver=`ls rpms/MariaDB-*-common.rpm | sed -e "s/rpms\/MariaDB-\\([0-9]*\.[0-9]*\.[0-9]*\\)-.*/\\1/"`
major_ver=`echo $full_ver | sed -e "s/\.[0-9]*$//"`
major_ver_num=`echo $major_ver | sed -e "s/\.//"`
echo "New version is: Full version = $full_ver, major version = $major_ver, numeric representation = $major_ver_num"

if [ $major_ver_num -ge 101 ]; then
    echo "For 10.1 and higher we need the galera library, add the galera repo"
    sudo sh -c "echo '[galera]
name=galera
baseurl=http://yum.mariadb.org/galera/repo/rpm/""" + dist_arch + """
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1' > /etc/""" + pm_repo_location + """/galera.repo"
    sudo cat /etc/""" + pm_repo_location + """/galera.repo
fi

echo "Install the new version $full_ver"
sudo """ + force_upgrade + pm + """ """ + pm_nogpg + """ """ + action + """ """ + pm_extra_options_new + """ """ + new_packages + """

# We don't want next commands to fail because we want to see the full picture.
# We'll make it fail later if it does not on its own.

echo "See which packages we have after upgrade"
rpm -qa | grep -iE 'maria|mysql|galera|percona' || true

echo "See which init scripts or systemd services were installed with the new version"
ls -l /etc/systemd/system/* /run/systemd/system/* /usr/lib/systemd/system/* /etc/init.d/* | grep -iE 'maria|mysql|galera|percona' || true

echo "See whether mysqld is running"
ps -ef | grep mysqld | grep -v grep || true

echo "See which version of mysqld is running"
mysql -uroot $pass_options_new -e "select @@version, @@version_comment" || true

# There are some workarounds which have to restart the server in order to proceed
""" + restart_command + """

# Now if we reached this point, actual checks

echo "Check that at least some of packages are new"
rpm -qa | grep MariaDB | grep $full_ver

echo "Check that mysqld is running now"
ps -ef | grep mysqld | grep -v grep

echo "Check that it can be connected to and see the version"
mysql -uroot $pass_options_new -e "select @@version, @@version_comment"

echo "Check that the current version is running now"
echo "(which means that not only has the server been upgraded, but it has also been restarted)"
mysql -uroot $pass_options_new --skip-column-names -e "select @@version" | grep $full_ver

echo "RPMs do not run mysql_upgrade automatically, so run it manually"
sudo mysql_upgrade -uroot $pass_options_new | tee /tmp/upgrade.output
# If it didn't go well, it should have failed above, but just in case, check for OK:
grep "^OK" /tmp/upgrade.output

# Print warnings that we collected during test preparation
""" + print_warnings + """

""")],
        **kwargs)


def getRpmBuilder(name, kvm_image, port, cpu, arch, slaves=kvm_slaves, ramdisk=True, catg="main"):
    distro = name.split('-')[2]
    m = re.search("^([A-Za-z]+)([0-9]*)",distro)
    if m:
        dist_name = m.group(1)
        dist_num = m.group(2)

    if distro in ['fedora21', 'fedora22', 'fedora23', 'fedora24', 'fedora25']:
        jemalloc_option=' -DWITH_JEMALLOC=system'
    else:
        jemalloc_option=''
    args = ["--port="+port, "--user=buildbot", "--smp=4", "--cpu="+cpu, "--startup-timeout=600", "--logfile=kernel_"+port+".log"]
    if ramdisk:
        args = args + ["--work-image=/dev/shm/vm-tmp-"+port+".qcow2"]
    rpm_fact = factory.BuildFactory()
    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    rpm_fact.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))
    rpm_fact.addStep(ShellCommand(
        description=["rsyncing", "VMs"],
        descriptionDone=["rsync", "VMs"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-build.qcow2",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-install.qcow2",
                 "/kvm/vms/"]))
    rpm_fact.addStep(DownloadSourceTarball())
    rpm_fact.addStep(FileDownload(
        mastersrc=WithProperties("%(bakerypath)s"),
        slavedest=WithProperties("%(bakery)s.tar.gz"),
        blocksize=524288,
        doStepIf=branch_is_5_123))
    rpm_fact.addStep(FileDownload(
        mastersrc=WithProperties("/ds413/rpm/mariadb-shared-5.3-"+arch+".rpm"),
        slavedest=WithProperties("MariaDB-shared-5.3."+name+".rpm"),
        blocksize=524288,
        doStepIf=branch_is_5_5_or_later))
    rpm_fact.addStep(FileDownload(
        mastersrc=WithProperties("/ds413/rpm/mariadb-shared-10.1-"+name+".rpm"),
        slavedest=WithProperties("MariaDB-shared-10.1."+name+".rpm"),
        blocksize=524288,
        doStepIf=branch_is_10_2_or_later))
    rpm_fact.addStep(ShellCommand(
        description=["getting", ".supp"],
        descriptionDone=["get", ".supp"],
        command=["sh", "-c", WithProperties("""
rm -f compiler_warnings.supp
#tar zxf "%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
tar zxf "/tmp/buildcache/%(tarbuildnum)s:%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
exit 0  # best-effort, not fatal if no suppression file
""")]))
    rpm_fact.addStep(Compile(
        description=["making", "rpms"],
        descriptionDone=["make", "rpms"],
        timeout=7200,
        logfiles={"kernel": "kernel_"+port+".log"},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-build.qcow2"] + args + ["vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        ScpSourceIntoVM(port),
        WithProperties("= case '%(branch)s' in *5\\.[123]*) from=%(bakery)s.tar.gz ;; *) from=MariaDB-shared-*."+name+".rpm ;; esac;  scp -P "+port+" "+kvm_scpopt+" $from buildbot@localhost:buildbot/ "),
        WithProperties("""
set -ex
cd buildbot
mkdir build
cd build
# - - - - - - - - - -
# MDEV-11258
case "%(branch)s" in
"10.1e"|"10.2e")
  if [ -d $HOME/local/bin ] ; then
    export PATH="$HOME/local/bin:$PATH"
  fi
  ;;
esac
# - - - - - - - - - -
mkdir rpms srpms
case "%(branch)s" in
*5\\.[123]*)
  tar zxf ../%(bakery)s.tar.gz
  cd %(bakery)s
  sudo RPM_SKIP_SIGN=1 bakery/autobake51-centos.sh ../../%(distname)s
  sudo mv /usr/src/redhat/RPMS/*/*.rpm ../rpms/
  sudo mv /usr/src/redhat/SRPMS/*.rpm ../srpms/
  ;;
*)
  mv ../MariaDB-shared-*.rpm .
  tar zxf "../%(distname)s"
  cd "%(distdirname)s"
  cmake .  -DBUILD_CONFIG=mysql_release -DRPM=""" + distro + jemalloc_option + """
  umask 022
  make package VERBOSE=1
  mv *.rpm ../rpms/
  ;;
esac
"""),
        "= rm -Rf rpms srpms && mkdir rpms srpms",
        "= scp -r -P "+port+" "+kvm_scpopt+" buildbot@localhost:buildbot/build/*rpms .",
    ]))
    addPackageArchiveStep(rpm_fact, "rpms srpms", "%(tarbuildnum)s")
    dist_arch= name.split('-')[2] + "-" + name.split('-')[3]

    rpm_fact.addStep(SetPropertyFromCommand(property="systemdCapability", command="echo no"))
    rpm_fact.addStep(SetPropertyFromCommand(
        doStepIf=(lambda(step): in_systemdBuilders(step)),
        property="systemdCapability",
        command="echo yes"))

    rpm_fact.addStep(Test(
        name="install",
        description=["testing", "install"],
        descriptionDone=["test", "install"],
        logfiles={"kernel": "kernel_"+port+".log"},
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2"] + args + ["vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" "+kvm_scpopt+" rpms buildbot@localhost:buildbot/",
        "sudo rm -rf /tmp/VERSION",
        WithProperties("sh -c \"echo '%(branch)s' | sed -e \\\"s/.*\\\\(5\\\\.[1-356]\\\\|10\\\\.[01]\\\\).*/\\\\1/\\\"\" > /tmp/VERSION"),
        WithProperties("""
set -ex
cd buildbot
case "%(branch)s" in
*mdev10416*)
  sudo cat /etc/sysconfig/selinux | grep SELINUX || true
  sudo sh -c \"PATH=$PATH:/usr/sbin getenforce || true\"
  sudo sh -c \"PATH=$PATH:/usr/sbin setenforce Enforcing || true\"
  sudo sh -c \"PATH=$PATH:/usr/sbin getenforce || true\"
  ;;
esac
rpm -qa | { grep -iE 'maria|mysql|galera' || true; }
sudo yum makecache
sudo yum search mysql | { grep "^mysql" || true; }
sudo yum search maria | { grep "^maria" || true; }
sudo yum search percona | { grep percona || true; }
case "%(branch)s" in
*10.[1-9]*)
  sudo sh -c "echo '[galera]
name=galera
baseurl=http://yum.mariadb.org/galera/repo/rpm/""" + dist_arch + """
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1' > /etc/yum.repos.d/galera.repo"
  sudo cat /etc/yum.repos.d/galera.repo

  sudo yum -y --nogpgcheck install rpms/*.rpm
  case "%(systemdCapability)s" in
yes)
  # Service is installed
  ls -l /usr/lib/systemd/system/mariadb.service
  # RPMs do not start it automatically on clean install
  sudo systemctl start mariadb

  echo "---- Check permissions - all of the following should fail ----"
  ! systemctl --no-ask-password stop mariadb
  ! systemctl --no-ask-password condrestart mariadb
  ! systemctl --no-ask-password start mariadb
  ! systemctl --no-ask-password enable mariadb
  ! systemctl --no-ask-password set-environment MYSQLD_OPTS="--unknown-option"
  ! systemctl --no-ask-password unset-environment MYSQLD_OPTS
  ! systemctl --no-ask-password restart mariadb

  echo "---- Now use proper permissions ---"
  # mariadb.service and its synonyms
  systemctl status mariadb.service --no-pager
  systemctl status mariadb.service --no-pager | grep Loaded | grep mariadb.service
  systemctl status mariadb --no-pager
  systemctl status mariadb --no-pager | grep Loaded | grep mariadb.service
  systemctl status mysql --no-pager
  systemctl status mysql --no-pager | grep Loaded | grep mariadb.service
  systemctl status mysqld --no-pager
  systemctl status mysqld --no-pager | grep Loaded | grep mariadb.service

  sudo systemctl stop mariadb
  !  ps -ef | grep mysqld | grep -v grep
  sleep 5
  ## condrestart part 1: does nothing when server is not running
  #sudo systemctl condrestart mariadb
  #!  ps -ef | grep mysqld | grep -v grep
  sudo systemctl start mariadb
  ps -ef | grep mysqld | grep -v grep
  # is-enabled, disable, enable
  systemctl is-enabled mariadb
  # MDEV-8956
  #sudo systemctl disable mariadb
  #! systemctl is-enabled mariadb
  #sudo systemctl enable mariadb
  #systemctl is-enabled mariadb
  # set-environment: add an unknown option
  sudo systemctl set-environment MYSQLD_OPTS="--unknown-option"
  # condrestart part 2: attempts to restart when server is running
  ! sudo systemctl condrestart mariadb
  # unset-environment
  sudo systemctl unset-environment MYSQLD_OPTS
  # Restart
  sudo systemctl restart mariadb
  sudo systemctl set-environment MYSQLD_OPTS="--unknown-option"
  ! sudo systemctl restart mariadb
  sudo systemctl unset-environment MYSQLD_OPTS
  # Status shows proper text
  systemctl status mariadb --no-pager | grep 'MariaDB server is down'
  sudo systemctl start mariadb
  systemctl status mariadb --no-pager | grep 'Taking your SQL requests now'
  # See the journal
  sudo systemctl -l status mariadb.service --no-pager
  ! journalctl -lxn 100 | grep mysqld
  sudo journalctl -lxn 100 --no-pager | grep mysqld
  # Init.d script
  ls -l /etc/init.d/mysql
  ls -l /etc/systemd/system/mariadb.service.d/migrated-from-my.cnf-settings.conf
  # It does not do the same as systemctl now
  # /etc/init.d/mysql status
    ;;
no)
    echo "Steps related to systemd will be skipped"
    sudo /etc/init.d/mysql restart
    ;;
*)
    echo "It should never happen, check your configuration (systemdCapability property is not set or is set to a wrong value)"
    ;;
  esac

case "%(branch)s" in
*10.[12]e*)
  sudo mysql -uroot -e 'drop database if exists test; create database test; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t;'
  ;;
*)
  mysql -uroot -e 'drop database if exists test; create database test; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t;'
  ;;
esac

  sudo yum -y install galera
  galera_path=`echo /usr/lib*/galera/libgalera_smm.so`

case "%(branch)s" in
*10.[12]e*)
  sudo mysql -uroot -e 'set global wsrep_provider="'$galera_path'"; set global wsrep_cluster_address="gcomm://";show status like "wsrep%%"'
  ;;
*)
  mysql -uroot -e 'set global wsrep_provider="'$galera_path'"; set global wsrep_cluster_address="gcomm://";show status like "wsrep%%"'
  ;;
esac

  ;;
*galera*)
  sudo sh -c "echo '[galera]
name=galera
baseurl=http://yum.mariadb.org/galera/repo/rpm/""" + dist_arch + """
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1' > /etc/yum.repos.d/galera.repo"
  sudo cat /etc/yum.repos.d/galera.repo

  sudo sh -c "echo '[mariadb]
name=MariaDB
baseurl=http://yum.mariadb.org/$(cat /tmp/VERSION)/""" + dist_arch + """
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1' > /etc/yum.repos.d/MariaDB.repo"
  sudo cat /etc/yum.repos.d/MariaDB.repo

  sudo yum -y --nogpgcheck install rpms/*.rpm
  sudo /etc/init.d/mysql restart
  galera_path=`echo /usr/lib*/galera/libgalera_smm.so`
  mysql -uroot -e 'use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t;set global wsrep_provider="'$galera_path'"; set global wsrep_cluster_address="gcomm://";show status like "wsrep%%"'
  ;;
*)
  sudo yum -C -y --nogpgcheck install rpms/*.rpm
  sudo /etc/init.d/mysql restart
  mysql -e "use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t"
  ;;
esac
#case "%(systemdCapability)s" in
#yes)
#  echo "Server shutdown is not necessary with systemd"
#  ;;
#no)
#  echo "Stopping the server because otherwise the VM might hang"
#  sudo /etc/init.d/mysql stop
#  ;;
#esac
echo "All done"
""")]))
#############################
##### New step: minor upgrade

    rpm_fact.addStep(Test(
        name="upgrade",
        doStepIf=(lambda(step): branch_has_previous_minor_versions(step) and dist_name != "fedora" and branch_is_not_galera(step)),
        description=["testing", "minor upgrade"],
        descriptionDone=["test", "minor upgrade"],
        warningPattern=".*Upgrade warning:.*",
        logfiles={"kernel": "kernel_"+port+".log"},
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2"] + args + ["vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" "+kvm_scpopt+" rpms buildbot@localhost:buildbot/",
        WithProperties("""
set -ex
cd buildbot

dist_arch=""" + dist_arch + """

# MariaDB version
mariadb_version=`echo "%(branch)s" | sed -e "s/.*\(5\.[1-356]\|10\.[0-9]\).*/\\1/"`

# Check that there is a previous version to install
if ! wget http://yum.mariadb.org/$mariadb_version/$dist_arch
then
  echo "Upgrade warning"": could not find a previous version in MariaDB repo, skipping the test"
  exit
fi

case "%(branch)s" in
*mdev10416*)
  sudo cat /etc/sysconfig/selinux | grep SELINUX || true
  sudo sh -c \"PATH=$PATH:/usr/sbin getenforce || true\"
  sudo sh -c \"PATH=$PATH:/usr/sbin setenforce Enforcing || true\"
  sudo sh -c \"PATH=$PATH:/usr/sbin getenforce || true\"
  ;;
esac
rpm -qa | { grep -iE 'maria|mysql|galera' || true; }
  ls /etc/yum.repos.d/* | grep -iE '(maria|galera)' | xargs -r sudo rm -f
case "%(branch)s" in
*mdev10416*)
  sudo sh -c "echo '[mariadb]
name=MariaDB
baseurl=http://yum.mariadb.org/10.1.14/""" + dist_arch + """
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1' > /etc/yum.repos.d/MariaDB.repo"
;;
*)
  sudo sh -c "echo '[mariadb]
name=MariaDB
baseurl=http://yum.mariadb.org/$mariadb_version/$dist_arch
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1' > /etc/yum.repos.d/MariaDB.repo"
;;
esac
  sudo cat /etc/yum.repos.d/MariaDB.repo
  sudo yum clean all
  sudo yum -y --nogpgcheck install MariaDB-server MariaDB-client MariaDB-shared
  sudo /etc/init.d/mysql start
  mysql -uroot -e "select @@version, @@version_comment; drop database if exists test; create database test; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t;"
  mysql -uroot --skip-column-names -e "select @@version" | awk -F'-' '{ print $1 }' > /tmp/version.old
  mysql -uroot -e "CREATE DATABASE autoinc; CREATE TABLE autoinc.t_autoinc(a SERIAL) ENGINE=InnoDB SELECT 42 a"
  mysql -uroot -e "CREATE TABLE autoinc.t_autoinc2(a SERIAL) ENGINE=InnoDB; BEGIN; INSERT INTO autoinc.t_autoinc2 VALUES (NULL),(NULL); ROLLBACK; SHOW CREATE TABLE autoinc.t_autoinc2 \G"
  sudo yum -y --nogpgcheck upgrade rpms/*.rpm
  mysql -uroot -e "select @@version, @@version_comment"
  mysql -uroot --skip-column-names -e "select @@version" | awk -F'-' '{ print $1 }' > /tmp/version.new
  mysql -uroot --skip-column-names -e "INSERT INTO autoinc.t_autoinc SET a=NULL;  SELECT COUNT(*) Expect_2 FROM autoinc.t_autoinc WHERE a>=42"
  echo "Prior to MDEV-6076, the next SELECT would return 1. After MDEV-6076, it should be 3"
  mysql -uroot --skip-column-names -e "INSERT INTO autoinc.t_autoinc2 VALUES (NULL); SELECT * FROM autoinc.t_autoinc2"
  # Version has changed after upgrade
  ! diff -u  /tmp/version.old  /tmp/version.new
  # RPMs do not run mysql_upgrade automatically
  # cat /var/lib/mysql/mysql_upgrade_info | awk -F'-' '{ print $1 }' > /tmp/version.upgrade
  # diff -u /tmp/version.new /tmp/version.upgrade
case "%(systemdCapability)s" in
yes)
  ls -l /usr/lib/systemd/system/mariadb.service
  ls -l /etc/systemd/system/mariadb.service.d/migrated-from-my.cnf-settings.conf
  ls -l /etc/init.d/mysql
  systemctl status mariadb.service --no-pager
  systemctl status mariadb --no-pager
  systemctl status mysql --no-pager
  systemctl status mysqld --no-pager
  systemctl is-enabled mariadb
  sudo systemctl restart mariadb
  systemctl status mariadb --no-pager
  sudo journalctl -lxn 100 --no-pager | grep mysqld
  # It does not do the same as systemctl now
  # /etc/init.d/mysql status
  ;;
no)
  echo "Steps related to systemd will be skipped"
  ;;
*)
  echo "It should never happen, check your configuration (systemdCapability property is not set or is set to a wrong value)"
  ;;
esac
  mysql -e "select @@version, @@version_comment; use test; insert into t values (2); select * from t; drop table t"

#case "%(systemdCapability)s" in
#yes)
#  echo "Server shutdown is not necessary with systemd"
#  ;;
#no)
#  echo "Stopping the server because otherwise the VM might hang"
#  sudo /etc/init.d/mysql stop
#  ;;
#esac
echo "All done"
""")]))

##### End of minor upgrade step
#############################

# Upgrade From 10.1

    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="upgrade",
            upgrade_from="MariaDB 10.1 (server, client)",
            old_packages="MariaDB-server MariaDB-client",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=rpm_test_branch
        )
    )
    # Not Fedora because Fedora wants additional options, see below
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="MariaDB 10.1 (server, client)",
            old_packages="MariaDB-server MariaDB-client",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=(lambda(step): dist_name != "fedora" and rpm_test_branch(step))
        )
    )
    # Fedora wants additional options, otherwise refuses to install
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="MariaDB 10.1 (server, client)",
            old_packages="MariaDB-server MariaDB-client",
            new_packages="MariaDB-server MariaDB-client",
            extra_opts="--best --allowerasing",
            doStepIf=(lambda(step): dist_name == "fedora" and rpm_test_branch(step))
        )
    )
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="upgrade",
            upgrade_from="MariaDB 10.1 (all packages)",
            old_packages="MariaDB-*",
            new_packages="MariaDB-*",
            doStepIf=rpm_test_branch
        )
    )
    # Not Fedora because Fedora wants additional options, see below
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="MariaDB 10.1 (all packages)",
            old_packages="MariaDB-*",
            new_packages="MariaDB-*",
            doStepIf=(lambda(step): dist_name != "fedora" and rpm_test_branch(step))
        )
    )
    # Fedora wants additional options, otherwise refuses to install
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="MariaDB 10.1 (all packages)",
            old_packages="MariaDB-*",
            new_packages="MariaDB-*",
            extra_opts="--best --allowerasing",
            doStepIf=(lambda(step): dist_name == "fedora" and rpm_test_branch(step))
        )
    )

# Upgrade From 10.0

    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="upgrade",
            upgrade_from="MariaDB 10.0 (server, client)",
            old_packages="MariaDB-server MariaDB-client",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=rpm_test_branch
        )
    )
    # Not Fedora because Fedora wants additional options, see below
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="MariaDB 10.0 (server, client)",
            old_packages="MariaDB-server MariaDB-client",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=(lambda(step): dist_name != "fedora" and rpm_test_branch(step))
        )
    )
    # Fedora wants additional options, otherwise refuses to install
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="MariaDB 10.0 (server, client)",
            old_packages="MariaDB-server MariaDB-client",
            new_packages="MariaDB-server MariaDB-client",
            extra_opts="--best --allowerasing",
            doStepIf=(lambda(step): dist_name == "fedora" and rpm_test_branch(step))
        )
    )
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="upgrade",
            upgrade_from="MariaDB 10.0 (all packages)",
            old_packages="MariaDB-* -x MariaDB-Galera*",
            new_packages="MariaDB-*",
            doStepIf=rpm_test_branch
        )
    )
    # Not Fedora because Fedora wants additional options, see below
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="MariaDB 10.0 (all packages)",
            old_packages="MariaDB-* -x MariaDB-Galera*",
            new_packages="MariaDB-*",
            doStepIf=(lambda(step): dist_name != "fedora" and rpm_test_branch(step))
        )
    )
    # Fedora wants additional options, otherwise refuses to install
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="MariaDB 10.0 (all packages)",
            old_packages="MariaDB-* -x MariaDB-Galera*",
            new_packages="MariaDB-*",
            extra_opts="--best --allowerasing",
            doStepIf=(lambda(step): dist_name == "fedora" and rpm_test_branch(step))
        )
    )

# Upgrade From 10.0 Galera
    # manual_restart is added everywhere due to MDEV-9797

    # On CentOS 7 manual restart does not help, see MDEV-9797 (comments)
    # On Fedora, upgrade does not work, see MDEV-9807
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="upgrade",
            upgrade_from="MariaDB 10.0 Galera",
            old_packages="MariaDB-Galera-server MariaDB-client",
            new_packages="MariaDB-server MariaDB-client",
            manual_restart=1,
            doStepIf=rpm_test_branch
        )
    )
    # Not Fedora because Fedora wants additional options, see below
    # On CentOS 7 manual restart does not help, MDEV-9797 (comments)
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="MariaDB 10.0 Galera",
            old_packages="MariaDB-Galera-server MariaDB-client",
            new_packages="MariaDB-server MariaDB-client",
            manual_restart=1,
            doStepIf=(lambda(step): dist_name != "fedora" and rpm_test_branch(step))
        )
    )
    # Fedora wants additional options, otherwise refuses to install
    # Manual restart does not work, MDEV-9797 (comments)
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="MariaDB 10.0 Galera",
            old_packages="MariaDB-Galera-server MariaDB-client",
            new_packages="MariaDB-server MariaDB-client",
            extra_opts="--best --allowerasing",
            manual_restart=1,
            doStepIf=(lambda(step): dist_name == "fedora" and rpm_test_branch(step))
        )
    )

# Upgrade From 5.5
    # Not Fedora because we don't build 5.5 for Fedora

    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="upgrade",
            upgrade_from="MariaDB 5.5 (server, client)",
            old_packages="MariaDB-server MariaDB-client",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=(lambda(step): dist_name != "fedora" and rpm_test_branch(step))
        )
    )
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="MariaDB 5.5 (server, client)",
            old_packages="MariaDB-server MariaDB-client",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=(lambda(step): dist_name != "fedora" and rpm_test_branch(step))
        )
    )
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="upgrade",
            upgrade_from="MariaDB 5.5 (all packages)",
            old_packages="MariaDB-* -x MariaDB-Galera*",
            new_packages="MariaDB-*",
            doStepIf=(lambda(step): dist_name != "fedora" and rpm_test_branch(step))
        )
    )
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="MariaDB 5.5 (all packages)",
            old_packages="MariaDB-* -x MariaDB-Galera*",
            new_packages="MariaDB-*",
            doStepIf=(lambda(step): dist_name != "fedora" and rpm_test_branch(step))
        )
    )

# Upgrade From 5.5 Galera
    # Not Fedora because we don't build 5.5 for Fedora
    # Manual restart is added everywhere due to MDEV-9797

    # On CentOS 7 manual restart does not help, MDEV-9797 (comments)
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="upgrade",
            upgrade_from="MariaDB 5.5 Galera",
            old_packages="MariaDB-Galera-server MariaDB-client",
            new_packages="MariaDB-server MariaDB-client",
            manual_restart=1,
            doStepIf=(lambda(step): dist_name != "fedora" and rpm_test_branch(step))
        )
    )
    # On CentOS 7 manual restart does not help, MDEV-9797 (comments)
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="MariaDB 5.5 Galera",
            old_packages="MariaDB-Galera-server MariaDB-client",
            new_packages="MariaDB-server MariaDB-client",
            manual_restart=1,
            doStepIf=(lambda(step): dist_name != "fedora" and rpm_test_branch(step))
        )
    )

# Upgrade from MySQL 5.7
    # It's not installable on CentOS 6 (ERROR with rpm_check_debug vs depsolve).
    # Possibly it's the same for RHEL 6, we don't have it in buildbot.
    # So, we'll disable the tests for CentOS/RHEL 6.

    # This step does not upgrade anything, since the packages don't match
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="upgrade",
            upgrade_from="MySQL 5.7",
            old_packages="mysql-community-server mysql-community-client",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=False
#            doStepIf=(lambda(step): (not (dist_name == "centos" and int(dist_num) == 6)) and rpm_test_branch(step))
        )
    )
    # The step fails due to MDEV-9798
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="MySQL 5.7 (server, client)",
            old_packages="mysql-community-server mysql-community-client",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=(lambda(step): (not (dist_name == "centos" and int(dist_num) == 6)) and rpm_test_branch(step))
        )
    )
    # The step fails due to MDEV-9798 and MDEV-9799
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="MySQL 5.7 (all packages)",
            old_packages="mysql-community-*",
            new_packages="MariaDB-*",
            doStepIf=(lambda(step): (not (dist_name == "centos" and int(dist_num) == 6)) and rpm_test_branch(step))
        )
    )

# Upgrade from MySQL 5.6
    # It's not installable on CentOS 6 (ERROR with rpm_check_debug vs depsolve).
    # Possibly it's the same for RHEL 6, we don't have it in buildbot.
    # So, we'll disable the tests for CentOS 6.

    # This step does not upgrade anything, since the packages don't match
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="upgrade",
            upgrade_from="MySQL 5.6",
            old_packages="mysql-community-server mysql-community-client",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=False
#            doStepIf=(lambda(step): (not (dist_name == "centos" and int(dist_num) == 6)) and rpm_test_branch(step))
       )
    )
    # The step fails due to MDEV-9798
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="MySQL 5.6 (server, client)",
            old_packages="mysql-community-server mysql-community-client",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=(lambda(step): (not (dist_name == "centos" and int(dist_num) == 6)) and rpm_test_branch(step))
        )
    )
    # The step fails due to MDEV-9798 and MDEV-9799
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="MySQL 5.6 (all packages)",
            old_packages="mysql-community-*",
            new_packages="MariaDB-*",
            doStepIf=(lambda(step): (not (dist_name == "centos" and int(dist_num) == 6)) and rpm_test_branch(step))
        )
    )

# Upgrade from MySQL 5.5
    # MySQL 5.5 has packages for el 6,7 only (?)
    # But it's not installable on CentOS 6 (ERROR with rpm_check_debug vs depsolve).
    # Possibly it's the same for RHEL 6, we don't have it in buildbot.
    # So, we'll disable the tests for CentOS/RHEL 6.

    # This step does not upgrade anything, since the packages don't match
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="upgrade",
            upgrade_from="MySQL 5.5",
            old_packages="mysql-community-server mysql-community-client",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=False
#            doStepIf=(lambda(step): (dist_name == "centos" or dist_name == "rhel") and int(dist_num) >= 7 and rpm_test_branch(step))
        )
    )
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="MySQL 5.5 (server, client)",
            old_packages="mysql-community-server mysql-community-client",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=(lambda(step): (dist_name == "centos" or dist_name == "rhel") and int(dist_num) >= 7 and rpm_test_branch(step))
        )
    )
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="MySQL 5.5 (all packages)",
            old_packages="mysql-community-*",
            new_packages="MariaDB-*",
            doStepIf=(lambda(step): (dist_name == "centos" or dist_name == "rhel") and int(dist_num) >= 7 and rpm_test_branch(step))
        )
    )

# Upgrade from Percona 5.7
    # Percona 5.7 only has packages for el 6, 7

    # This step does not upgrade anything, since the packages don't match
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="upgrade",
            upgrade_from="Percona 5.7",
            old_packages="Percona-Server-server-57 Percona-Server-client-57",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=False
#            doStepIf=(lambda(step): (dist_name == "centos" or dist_name == "rhel") and int(dist_num) >= 6 and rpm_test_branch(step))
        )
    )
    # The step fails due to MDEV-9800
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="Percona 5.7 (server, client)",
            old_packages="Percona-Server-server-57 Percona-Server-client-57",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=(lambda(step): (dist_name == "centos" or dist_name == "rhel") and int(dist_num) >= 6 and rpm_test_branch(step))
        )
    )
    # The step fails due to MDEV-9800
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="Percona 5.7 (all packages)",
            old_packages="Percona-Server-*-57",
            new_packages="MariaDB-*",
            doStepIf=(lambda(step): (dist_name == "centos" or dist_name == "rhel") and int(dist_num) >= 6 and rpm_test_branch(step))
        )
    )

# Upgrade from Percona 5.6
    # Percona 5.6 only has packages for el 5, 6, 7

    # This step does not upgrade anything, since the packages don't match
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="upgrade",
            upgrade_from="Percona 5.6",
            old_packages="Percona-Server-server-56 Percona-Server-client-56",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=False
#            doStepIf=(lambda(step): (dist_name == "centos" or dist_name == "rhel") and rpm_test_branch(step))
        )
    )
    # The step fails due to MDEV-9800
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="Percona 5.6 (server, client)",
            old_packages="Percona-Server-server-56 Percona-Server-client-56",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=(lambda(step): (dist_name == "centos" or dist_name == "rhel") and rpm_test_branch(step))
        )
    )
    # The step fails due to MDEV-9800
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="Percona 5.6 (all packages)",
            old_packages="Percona-Server-*-56",
            new_packages="MariaDB-*",
            doStepIf=(lambda(step): (dist_name == "centos" or dist_name == "rhel") and rpm_test_branch(step))
        )
    )

# Upgrade from Percona 5.5
    # Percona 5.5 only has packages for el 5, 6, 7

    # This step does not upgrade anything, since the packages don't match
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="upgrade",
            upgrade_from="Percona 5.5",
            old_packages="Percona-Server-server-55 Percona-Server-client-55",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=False
#            doStepIf=(lambda(step): (dist_name == "centos" or dist_name == "rhel") and rpm_test_branch(step))
        )
    )
    # The step fails due to MDEV-9800
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="Percona 5.5 (server, client)",
            old_packages="Percona-Server-server-55 Percona-Server-client-55",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=(lambda(step): (dist_name == "centos" or dist_name == "rhel") and rpm_test_branch(step))
        )
    )
    # The step fails due to MDEV-9800
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="Percona 5.5 (all packages)",
            old_packages="Percona-Server-*-55",
            new_packages="MariaDB-*",
            doStepIf=(lambda(step): (dist_name == "centos" or dist_name == "rhel") and rpm_test_branch(step))
        )
    )

# Upgrades from packages provided by distributions

    # mysql-server and mysql: provided by RHEL 5 (probably 6 too), CentOS 5, CentOS 6
    # Install and upgrade suggest to use FORCE_UPGRADE

    # The step fails on CentOS 5 due to MDEV-9803
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="upgrade",
            upgrade_from="mysql-server",
            old_packages="mysql-server mysql",
            new_packages="MariaDB-server MariaDB-client",
            force_upgrade=1,
            manual_restart=1,
            doStepIf=(lambda(step): (dist_name == "centos" or dist_name == "rhel") and int(dist_num) <= 6 and rpm_test_branch(step))
        )
    )
    # The step fails on CentOS 5 due to MDEV-9803
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="mysql-server (server, client)",
            old_packages="mysql-server mysql",
            new_packages="MariaDB-server MariaDB-client",
            force_upgrade=1,
            manual_restart=1,
            doStepIf=(lambda(step): (dist_name == "centos" or dist_name == "rhel") and int(dist_num) <= 6 and rpm_test_branch(step))
        )
    )
    # Step fails because of MDEV-9812
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="mysql-server (all packages)",
            old_packages="mysql-server mysql mysql-bench mysql-devel mysql-test",
            new_packages="MariaDB-*",
            doStepIf=(lambda(step): (dist_name == "centos" or dist_name == "rhel") and int(dist_num) <= 6 and rpm_test_branch(step))
        )
    )

    # mysql51-mysql-server and mysql51-mysql: provided by RHEL 5, CentOS 5

    # This test does not upgrade anything, since the packages don't match
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="upgrade",
            upgrade_from="mysql51-mysql-server",
            old_packages="mysql51-mysql-server mysql51-mysql",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=False
#            doStepIf=(lambda(step): (dist_name == "centos" or dist_name == "rhel") and int(dist_num) == 5 and rpm_test_branch(step))
        )
    )
    # Step fails due to MDEV-9815
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="mysql51-mysql-server (server, client)",
            old_packages="mysql51-mysql-server mysql51-mysql",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=(lambda(step): (dist_name == "centos" or dist_name == "rhel") and int(dist_num) == 5 and rpm_test_branch(step))
        )
    )
    # Step fails due to MDEV-9815
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="mysql51 (all packages)",
            old_packages="mysql51*",
            new_packages="MariaDB-*",
            doStepIf=(lambda(step): (dist_name == "centos" or dist_name == "rhel") and int(dist_num) == 5 and rpm_test_branch(step))
        )
    )

    # mysql55-mysql-server and mysql55-mysql: provided by RHEL 5, CentOS 5

    # This test does not upgrade anything, since the packages don't match
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="upgrade",
            upgrade_from="mysql55-mysql-server",
            old_packages="mysql55-mysql-server mysql55-mysql",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=False
#            doStepIf=(lambda(step): (dist_name == "centos" or dist_name == "rhel") and int(dist_num) == 5 and rpm_test_branch(step))
        )
    )
    # Step fails due to MDEV-9815
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="mysql55-mysql-server (server, client)",
            old_packages="mysql55-mysql-server mysql55-mysql",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=(lambda(step): (dist_name == "centos" or dist_name == "rhel") and int(dist_num) == 5 and rpm_test_branch(step))
        )
    )
    # Step fails due to MDEV-9815
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="mysql55 (all packages)",
            old_packages="mysql55*",
            new_packages="MariaDB-*",
            doStepIf=(lambda(step): (dist_name == "centos" or dist_name == "rhel") and int(dist_num) == 5 and rpm_test_branch(step))
        )
    )

    # mariadb-server and mariadb: provided by CentOS 7, Fedora 22, Fedora 23

    # Manual restart is added due to MDEV-9805
    # The step fails due to MDEV-9805 (CentOS), MDEV-9808 (Fedora)
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="upgrade",
            upgrade_from="mariadb-server",
            old_packages="mariadb-server mariadb",
            new_packages="MariaDB-server MariaDB-client",
            manual_restart=1,
            # On some reason >=7 did not work
            doStepIf=(lambda(step): ((dist_name == "centos" and int(dist_num) != 5 and int(dist_num) != 6) or dist_name == "fedora") and rpm_test_branch(step))
        )
    )
    # Manual restart is added due to MDEV-9805
    # The step fails due to MDEV-9805 (CentOS), MDEV-9809 (Fedora)
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="mariadb-server (server, client)",
            old_packages="mariadb-server mariadb",
            new_packages="MariaDB-server MariaDB-client",
            manual_restart=1,
            doStepIf=(lambda(step): ((dist_name == "centos" and int(dist_num) != 5 and int(dist_num) != 6) or dist_name == "fedora") and rpm_test_branch(step))
        )
    )
    # The step fails due to MDEV-9806 (CentOS)
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="mariadb-server (all packages)",
            old_packages="mariadb* -x mariadb-galera*",
            new_packages="MariaDB-*",
            doStepIf=(lambda(step): dist_name == "centos" and int(dist_num) != 5 and int(dist_num) != 6 and rpm_test_branch(step))
        )
    )
    # The step fails due to MDEV-9809 (Fedora), allowerasing does not help
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="mariadb-server (all packages)",
            old_packages="mariadb* -x mariadb-galera*",
            new_packages="MariaDB-*",
            extra_opts="--allowerasing",
            doStepIf=(lambda(step): dist_name == "fedora" and rpm_test_branch(step))
        )
    )

    # mariadb-galera-server and mariadb: provided by Fedora 22, Fedora 23

    # This test does not upgrade anything, since the packages don't match
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="upgrade",
            upgrade_from="mariadb-galera-server",
            old_packages="mariadb-galera-server mariadb",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=False
#            doStepIf=(lambda(step): dist_name == "fedora" and rpm_test_branch(step))
        )
    )
    # Extra options are added because Fedora requests them
    rpm_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="mariadb-galera-server",
            old_packages="mariadb-galera-server mariadb",
            new_packages="MariaDB-server MariaDB-client",
            extra_opts="--allowerasing",
            # Step fails due to MDEV-9809, allowerasing does not help
            doStepIf=(lambda(step): dist_name == "fedora" and rpm_test_branch(step))
        )
    )

    return {'name': name, 'slavenames': slaves, 'builddir': name, 'factory': rpm_fact,
            "nextBuild": myNextBuild,
            "category": catg}

#bld_kvm_rpm_centos5_x86 = getRpmBuilder("kvm-rpm-centos5-x86", "vm-centos5-i386",
#                                        "2225", "qemu64", "i386", slaves= kvm_slaves, ramdisk=False)
#bld_kvm_rpm_centos5_amd64 = getRpmBuilder("kvm-rpm-centos5-amd64", "vm-centos5-amd64",
#                                        "2237", "qemu64", "x86_64", slaves= kvm_slaves, ramdisk=False)

bld_kvm_rpm_centos6_x86 = getRpmBuilder("kvm-rpm-centos6-x86", "vm-centos6-i386",
                                        "2261", "qemu64", "i386", ramdisk=False)
bld_kvm_rpm_centos6_amd64 = getRpmBuilder("kvm-rpm-centos6-amd64", "vm-centos6-amd64",
                                        "2262", "qemu64", "x86_64", ramdisk=False)

#bld_kvm_rpm_centos7_0_x86 = getRpmBuilder("kvm-rpm-centos7_0-x86", "vm-centos7_0-x86",
#                                        "2301", "qemu64", "i386")
#bld_kvm_rpm_centos7_0_x86_64 = getRpmBuilder("kvm-rpm-centos7_0-x86_64", "vm-centos7_0-x86_64",
#                                        "2302", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False, catg="experimental")

bld_kvm_rpm_centos7_amd64 = getRpmBuilder("kvm-rpm-centos7-amd64", "vm-centos7-amd64",
                                        "2302", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False, catg="main")

bld_kvm_rpm_centos73_amd64 = getRpmBuilder("kvm-rpm-centos73-amd64", "vm-centos73-amd64",
                                        "2347", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False, catg="main")

bld_kvm_rpm_centos73_ppc64 = getRpmBuilder("kvm-rpm-centos73-ppc64", "vm-centos73-ppc64",
                                        "2348", "POWER8", "ppc64", slaves=["p801"], ramdisk=False, catg="experimental")

bld_kvm_rpm_centos73_ppc64le = getRpmBuilder("kvm-rpm-centos73-ppc64le", "vm-centos73-ppc64le",
                                        "2349", "POWER8", "ppc64le", slaves=["p801"], ramdisk=False, catg="experimental")

#bld_kvm_rpm_fedora16_x86 = getRpmBuilder("kvm-rpm-fedora16-x86", "vm-fedora16-i386",
#                                        "2263", "qemu64", "i386")
#bld_kvm_rpm_fedora16_amd64 = getRpmBuilder("kvm-rpm-fedora16-amd64", "vm-fedora16-amd64",
#                                        "2264", "qemu64", "x86_64")

#bld_kvm_rpm_fedora17_x86 = getRpmBuilder("kvm-rpm-fedora17-x86", "vm-fedora17-i386",
#                                        "2265", "qemu64", "i386")
#bld_kvm_rpm_fedora17_amd64 = getRpmBuilder("kvm-rpm-fedora17-amd64", "vm-fedora17-amd64",
#                                        "2266", "qemu64", "x86_64")

#bld_kvm_rpm_fedora18_x86 = getRpmBuilder("kvm-rpm-fedora18-x86", "vm-fedora18-i386",
#                                        "2277", "qemu64", "i386")
#bld_kvm_rpm_fedora18_amd64 = getRpmBuilder("kvm-rpm-fedora18-amd64", "vm-fedora18-amd64",
#                                        "2278", "qemu64", "x86_64")

#bld_kvm_rpm_fedora19_x86 = getRpmBuilder("kvm-rpm-fedora19-x86", "vm-fedora19-i386",
#                                        "2289", "qemu64", "i386", ramdisk=False)
#bld_kvm_rpm_fedora19_amd64 = getRpmBuilder("kvm-rpm-fedora19-amd64", "vm-fedora19-amd64",
#                                        "2290", "qemu64", "x86_64", ramdisk=False)

#bld_kvm_rpm_fedora20_x86 = getRpmBuilder("kvm-rpm-fedora20-x86", "vm-fedora20-i386",
#                                        "2291", "qemu64", "i386", ramdisk=False)
#bld_kvm_rpm_fedora20_amd64 = getRpmBuilder("kvm-rpm-fedora20-amd64", "vm-fedora20-amd64",
#                                        "2292", "qemu64", "x86_64", ramdisk=False)

#bld_kvm_rpm_fedora21_x86 = getRpmBuilder("kvm-rpm-fedora21-x86", "vm-fedora21-i386",
#                                        "2310", "qemu64", "i386", ramdisk=False)
#bld_kvm_rpm_fedora21_amd64 = getRpmBuilder("kvm-rpm-fedora21-amd64", "vm-fedora21-amd64",
#                                        "2311", "qemu64", "x86_64", ramdisk=False)

#bld_kvm_rpm_fedora22_x86 = getRpmBuilder("kvm-rpm-fedora22-x86", "vm-fedora22-i386",
#                                        "2317", "qemu64", "i386", ramdisk=False)
#bld_kvm_rpm_fedora22_amd64 = getRpmBuilder("kvm-rpm-fedora22-amd64", "vm-fedora22-amd64",
#                                        "2318", "qemu64", "x86_64", ramdisk=False)

#bld_kvm_rpm_fedora23_x86 = getRpmBuilder("kvm-rpm-fedora23-x86", "vm-fedora23-i386",
#                                        "2321", "qemu64", "i386", ramdisk=False)
#bld_kvm_rpm_fedora23_amd64 = getRpmBuilder("kvm-rpm-fedora23-amd64", "vm-fedora23-amd64",
#                                        "2322", "qemu64", "x86_64", ramdisk=False)

bld_kvm_rpm_fedora24_x86 = getRpmBuilder("kvm-rpm-fedora24-x86", "vm-fedora24-i386",
                                        "2325", "qemu64", "i386", ramdisk=False)
bld_kvm_rpm_fedora24_amd64 = getRpmBuilder("kvm-rpm-fedora24-amd64", "vm-fedora24-amd64",
                                        "2326", "qemu64", "x86_64", ramdisk=False)

bld_kvm_rpm_fedora25_x86 = getRpmBuilder("kvm-rpm-fedora25-x86", "vm-fedora25-i386",
                                        "2337", "qemu64", "i386", ramdisk=False)
bld_kvm_rpm_fedora25_amd64 = getRpmBuilder("kvm-rpm-fedora25-amd64", "vm-fedora25-amd64",
                                        "2338", "qemu64", "x86_64", ramdisk=False)

#bld_kvm_rpm_opensuse12_x86 = getRpmBuilder("kvm-rpm-opensuse12-x86", "vm-opensuse12-i386",
#                                        "2274", "qemu64", "i386")
#bld_kvm_rpm_opensuse12_amd64 = getRpmBuilder("kvm-rpm-opensuse12-amd64", "vm-opensuse12-amd64",
#                                        "2273", "qemu64", "x86_64")

# Some kvm images are missing for rhel8-x86
#bld_kvm_rpm_rhel6_x86 = getRpmBuilder("kvm-rpm-rhel6-x86", "vm-rhel6-x86",
#                                      "2251", "qemu64", "i386")
#bld_kvm_rpm_rhel6_amd64 = getRpmBuilder("kvm-rpm-rhel6-amd64", "vm-rhel6-amd64",
#                                        "2252", "qemu64", "x86_64")
# KVM segfaults on rhel5 kernel sometimes on OpenSUSE 11.4 which is on terrier2,
# so do not use that host.
#bld_kvm_rpm_rhel5_x86 = getRpmBuilder("kvm-rpm-rhel5-x86", "vm-rhel5-x86",
#                                        "2253", "qemu64", "i386", slaves=kvm_slaves, ramdisk=False)
#bld_kvm_rpm_rhel5_amd64 = getRpmBuilder("kvm-rpm-rhel5-amd64", "vm-rhel5-amd64",
#                                        "2254", "qemu64", "x86_64", slaves=kvm_slaves, ramdisk=False)

def getGalRpmBuilder(name, kvm_image, port, cpu, arch, slaves=kvm_slaves, ramdisk=True):

    kvm_build_image = getGaleraBuildImage(kvm_image)

    distro = name.split('-')[2]
    args = ["--port="+port, "--user=buildbot", "--smp=4", "--cpu="+cpu, "--startup-timeout=600", "--logfile=kernel_"+port+".log"]
    if ramdisk:
        args = args + ["--work-image=/dev/shm/vm-tmp-"+port+".qcow2"]
    rpm_fact = factory.BuildFactory()
    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    rpm_fact.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))
    rpm_fact.addStep(ShellCommand(
        description=["rsyncing", "VMs"],
        descriptionDone=["rsync", "VMs"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+kvm_build_image+".qcow2",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-install.qcow2",
                 "/kvm/vms/"]))
    rpm_fact.addStep(Compile(
        description=["making", "rpms"],
        descriptionDone=["make", "rpms"],
        timeout=7200,
        logfiles={"kernel": "kernel_"+port+".log"},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_build_image+".qcow2"] + args + ["vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("""
set -ex
# Nirbhay: Use system boost
case `hostname` in centos6*) sudo rm -rf /usr/local/src/boost_1_49_0/ ;; esac
cd buildbot
mkdir rpms srpms
git clone -b %(branch)s "https://github.com/MariaDB/galera.git" build
cd build
./scripts/build.sh -p
cp `find *.rpm -maxdepth 1 -type f` ../rpms
"""),
        "= rm -Rf rpms srpms && mkdir rpms srpms",
        "= scp -r -P "+port+" "+kvm_scpopt+" buildbot@localhost:buildbot/*rpms .",
    ]))
    addPackageUploadStep(rpm_fact, 'rpms')
    rpm_fact.addStep(Test(
        description=["testing", "install"],
        descriptionDone=["test", "install"],
        logfiles={"kernel": "kernel_"+port+".log"},
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2"] + args + ["vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" "+kvm_scpopt+" rpms buildbot@localhost:buildbot/",
        WithProperties("""
set -ex
cd buildbot
sudo yum -y --nogpgcheck install rpms/*.rpm
garbd --version
""")]))

    return {'name': name, 'slavenames': slaves, 'builddir': name, 'factory': rpm_fact,
            "nextBuild": myNextBuild,
            "category": "galera"}

#gal_bld_kvm_rpm_centos5_x86 = getGalRpmBuilder("kvm-rpm-centos5-x86-gal", "vm-centos5-i386",
#                                        "3000", "qemu64", "i386", slaves= kvm_slaves, ramdisk=False)
#gal_bld_kvm_rpm_centos5_amd64 = getGalRpmBuilder("kvm-rpm-centos5-amd64-gal", "vm-centos5-amd64",
#                                        "3001", "qemu64", "x86_64", slaves= kvm_slaves, ramdisk=False)

gal_bld_kvm_rpm_centos6_x86 = getGalRpmBuilder("kvm-rpm-centos6-x86-gal", "vm-centos6-i386",
                                        "3002", "qemu64", "i386", ramdisk=False)
gal_bld_kvm_rpm_centos6_amd64 = getGalRpmBuilder("kvm-rpm-centos6-amd64-gal", "vm-centos6-amd64",
                                        "3003", "qemu64", "x86_64", ramdisk=False)

gal_bld_kvm_rpm_centos7_amd64 = getGalRpmBuilder("kvm-rpm-centos7-amd64-gal", "vm-centos7-amd64",
                                        "3004", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)

gal_bld_kvm_rpm_centos73_amd64 = getGalRpmBuilder("kvm-rpm-centos73-amd64-gal", "vm-centos73-amd64",
                                        "3056", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)

gal_bld_kvm_rpm_centos73_ppc64 = getGalRpmBuilder("kvm-rpm-centos73-ppc64-gal", "vm-centos73-ppc64",
                                        "3057", "POWER8", "ppc64", slaves=["p801"], ramdisk=False)

gal_bld_kvm_rpm_centos73_ppc64le = getGalRpmBuilder("kvm-rpm-centos73-ppc64le-gal", "vm-centos73-ppc64le",
                                        "3058", "POWER8", "ppc64le", slaves=["p801"], ramdisk=False)

#gal_bld_kvm_rpm_fedora19_x86 = getGalRpmBuilder("kvm-rpm-fedora19-x86-gal", "vm-fedora19-i386",
#                                        "3005", "qemu64", "i386", ramdisk=False)
#gal_bld_kvm_rpm_fedora19_amd64 = getGalRpmBuilder("kvm-rpm-fedora19-amd64-gal", "vm-fedora19-amd64",
#                                        "3006", "qemu64", "x86_64", ramdisk=False)

#gal_bld_kvm_rpm_fedora20_x86 = getGalRpmBuilder("kvm-rpm-fedora20-x86-gal", "vm-fedora20-i386",
#                                        "3007", "qemu64", "i386", ramdisk=False)
#gal_bld_kvm_rpm_fedora20_amd64 = getGalRpmBuilder("kvm-rpm-fedora20-amd64-gal", "vm-fedora20-amd64",
#                                        "3008", "qemu64", "x86_64", ramdisk=False)

#gal_bld_kvm_rpm_fedora21_x86 = getGalRpmBuilder("kvm-rpm-fedora21-x86-gal", "vm-fedora21-i386",
#                                        "3011", "qemu64", "i386", ramdisk=False)
#gal_bld_kvm_rpm_fedora21_amd64 = getGalRpmBuilder("kvm-rpm-fedora21-amd64-gal", "vm-fedora21-amd64",
#                                        "3012", "qemu64", "x86_64", ramdisk=False)

#gal_bld_kvm_rpm_fedora22_x86 = getGalRpmBuilder("kvm-rpm-fedora22-x86-gal", "vm-fedora22-i386",
#                                        "3017", "qemu64", "i386", ramdisk=False)
#gal_bld_kvm_rpm_fedora22_amd64 = getGalRpmBuilder("kvm-rpm-fedora22-amd64-gal", "vm-fedora22-amd64",
#                                        "3018", "qemu64", "x86_64", ramdisk=False)

#gal_bld_kvm_rpm_fedora23_x86 = getGalRpmBuilder("kvm-rpm-fedora23-x86-gal", "vm-fedora23-i386",
#                                        "3019", "qemu64", "i386", ramdisk=False)
#gal_bld_kvm_rpm_fedora23_amd64 = getGalRpmBuilder("kvm-rpm-fedora23-amd64-gal", "vm-fedora23-amd64",
#                                        "3020", "qemu64", "x86_64", ramdisk=False)

gal_bld_kvm_rpm_fedora24_x86 = getGalRpmBuilder("kvm-rpm-fedora24-x86-gal", "vm-fedora24-i386",
                                        "3043", "qemu64", "i386", ramdisk=False)
gal_bld_kvm_rpm_fedora24_amd64 = getGalRpmBuilder("kvm-rpm-fedora24-amd64-gal", "vm-fedora24-amd64",
                                        "3044", "qemu64", "x86_64", ramdisk=False)

gal_bld_kvm_rpm_fedora25_x86 = getGalRpmBuilder("kvm-rpm-fedora25-x86-gal", "vm-fedora25-i386",
                                        "3051", "qemu64", "i386", ramdisk=False)
gal_bld_kvm_rpm_fedora25_amd64 = getGalRpmBuilder("kvm-rpm-fedora25-amd64-gal", "vm-fedora25-amd64",
                                        "3052", "qemu64", "x86_64", ramdisk=False)

#gal_bld_kvm_rpm_rhel5_x86 = getGalRpmBuilder("kvm-rpm-rhel5-x86-gal", "vm-rhel5-x86",
#                                        "3009", "qemu64", "i386", slaves=kvm_slaves, ramdisk=False)
#gal_bld_kvm_rpm_rhel5_amd64 = getGalRpmBuilder("kvm-rpm-rhel5-amd64-gal", "vm-rhel5-amd64",
#                                        "3010", "qemu64", "x86_64", slaves=kvm_slaves, ramdisk=False)


#-------------------------------------------------------------------------------
# SUSE and openSUSE package factory
#-------------------------------------------------------------------------------
def getZypBuilder(name, kvm_image, port, cpu, arch, slaves=kvm_slaves, ramdisk=True, catg="main"):
    distro = name.split('-')[2]
    m = re.search("^([A-Za-z]+)([0-9]*)",distro)
    if m:
        dist_name = m.group(1)
        dist_num = m.group(2)

    # dbart: reverted Nirbhay's change below, -build-copy.qcow2 naming messes
    #        up other parts, moved *-build-copy.qcow2 images to *-build.qcow2
    # Nirbhay: Only kvm_image + "-build-copy.qcow2" images have the required toolchain.
    kvm_build_image = kvm_image + "-build.qcow2"
    #if "opensuse" in name :
    #    kvm_build_image = kvm_image + "-build.qcow2"
    #else:
    #    kvm_build_image = kvm_image + "-build-copy.qcow2"

    kvm_install_image = kvm_image + "-install.qcow2"

    args = ["--port="+port, "--user=buildbot", "--smp=4", "--cpu="+cpu, "--startup-timeout=600", "--logfile=kernel_"+port+".log"]
    if ramdisk:
        args = args + ["--work-image=/dev/shm/vm-tmp-"+port+".qcow2"]
    zyp_fact = factory.BuildFactory()
    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    zyp_fact.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))
    zyp_fact.addStep(ShellCommand(
        description=["rsyncing", "VMs"],
        descriptionDone=["rsync", "VMs"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+kvm_build_image,
                 "bb01.mariadb.net::kvm/vms/"+kvm_install_image,
                 "/kvm/vms/"]))
    zyp_fact.addStep(DownloadSourceTarball())
    zyp_fact.addStep(FileDownload(
        mastersrc=WithProperties("%(bakerypath)s"),
        slavedest=WithProperties("%(bakery)s.tar.gz"),
        blocksize=524288,
        doStepIf=branch_is_5_123))
    zyp_fact.addStep(ShellCommand(
        description=["getting", ".supp"],
        descriptionDone=["get", ".supp"],
        command=["sh", "-c", WithProperties("""
rm -f compiler_warnings.supp
#tar zxf "%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
tar zxf "/tmp/buildcache/%(tarbuildnum)s:%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
exit 0  # best-effort, not fatal if no suppression file
""")]))
    zyp_fact.addStep(Compile(
        description=["making", "rpms"],
        descriptionDone=["make", "rpms"],
        timeout=7200,
        logfiles={"kernel": "kernel_"+port+".log"},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_build_image] + args + ["vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        ScpSourceIntoVM(port),
        #WithProperties("= case '%(branch)s' in *5\\.[123]*) scp -P "+port+" "+kvm_scpopt+" %(bakery)s.tar.gz buildbot@localhost:buildbot/ ;; esac"),
        WithProperties("""
set -ex
cd buildbot
mkdir build
cd build
mkdir rpms srpms
case "%(branch)s" in
*5\\.[123]*)
  tar zxf ../%(bakery)s.tar.gz
  cd %(bakery)s
  sudo RPM_SKIP_SIGN=1 bakery/autobake51-centos.sh ../../%(distname)s
  sudo mv /usr/src/redhat/RPMS/*/*.rpm ../rpms/
  sudo mv /usr/src/redhat/SRPMS/*.rpm ../srpms/
  ;;
*)
  tar zxf "../%(distname)s"
  cd "%(distdirname)s"
  cmake .  -DBUILD_CONFIG=mysql_release -DRPM=""" + distro + """
  umask 022
  make package VERBOSE=1
  mv *.rpm ../rpms/
  ;;
esac
"""),
        "= rm -Rf rpms srpms && mkdir rpms srpms",
        "= scp -r -P "+port+" "+kvm_scpopt+" buildbot@localhost:buildbot/build/*rpms .",
    ]))
    addPackageArchiveStep(zyp_fact, "rpms srpms", "%(tarbuildnum)s")
    dist_arch= name.split('-')[2] + "-" + name.split('-')[3]

    zyp_fact.addStep(SetPropertyFromCommand(property="systemdCapability", command="echo no"))
    zyp_fact.addStep(SetPropertyFromCommand(
        doStepIf=(lambda(step): in_systemdBuilders(step)),
        property="systemdCapability",
        command="echo yes"))

    zyp_fact.addStep(Test(
        name="install",
        description=["testing", "install"],
        descriptionDone=["test", "install"],
        warningPattern=".*Install warning:.*",
        logfiles={"kernel": "kernel_"+port+".log"},
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_install_image] + args + ["vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" "+kvm_scpopt+" rpms buildbot@localhost:buildbot/",
        "sudo rm -rf /tmp/VERSION",
        WithProperties("sh -c \"echo '%(branch)s' | sed -e \\\"s/.*\\\\(5\\\\.[1-356]\\\\|10\\\\.[01]\\\\).*/\\\\1/\\\"\" > /tmp/VERSION"),
        WithProperties("""
set -ex
cd buildbot
case "%(branch)s" in
*mdev10416*)
  sudo cat /etc/sysconfig/selinux | grep SELINUX || true
  sudo sh -c \"PATH=$PATH:/usr/sbin getenforce || true\"
  sudo sh -c \"PATH=$PATH:/usr/sbin setenforce Enforcing || true\"
  sudo sh -c \"PATH=$PATH:/usr/sbin getenforce || true\"
  ;;
esac
rpm -qa | { grep -iE 'maria|mysql|galera' || true; }
case "%(branch)s" in
*10.[1-9]*)
  sudo sh -c "echo '[galera]
name=galera
baseurl=http://yum.mariadb.org/galera/repo/rpm/""" + dist_arch + """
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1' > /etc/zypp/repos.d/galera.repo"
  sudo cat /etc/zypp/repos.d/galera.repo

  sudo zypper --no-refresh --no-gpg-checks install -y rpms/*.rpm
  sudo /etc/init.d/mysql restart
  galera_path=`echo /usr/lib*/galera/libgalera_smm.so`

case "%(branch)s" in
*10.[12]e*)
  sudo mysql -uroot -e 'create database test; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t;set global wsrep_provider="'$galera_path'"; set global wsrep_cluster_address="gcomm://";show status like "wsrep%%"'
  ;;
*)
  mysql -uroot -e 'use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t;set global wsrep_provider="'$galera_path'"; set global wsrep_cluster_address="gcomm://";show status like "wsrep%%"'
  ;;
esac

  ;;
*galera*)
  sudo sh -c "echo '[galera]
name=galera
baseurl=http://yum.mariadb.org/galera/repo/rpm/""" + dist_arch + """
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1' > /etc/zypp/repos.d/galera.repo"
  sudo cat /etc/zypp/repos.d/galera.repo

  sudo sh -c "echo '[mariadb]
name=MariaDB
baseurl=http://yum.mariadb.org/$(cat /tmp/VERSION)/""" + dist_arch + """
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1' > /etc/zypp/repos.d/MariaDB.repo"
  sudo cat /etc/zypp/repos.d/MariaDB.repo

  sudo zypper --no-refresh --no-gpg-checks install -y rpms/*.rpm
  sudo /etc/init.d/mysql restart
  galera_path=`echo /usr/lib*/galera/libgalera_smm.so`
  mysql -uroot -e 'use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t;set global wsrep_provider="'$galera_path'"; set global wsrep_cluster_address="gcomm://";show status like "wsrep%%"'
  ;;
*)
  sudo zypper --no-refresh --no-gpg-checks install -y rpms/*.rpm
  case "%(systemdCapability)s" in
yes)
  # Service is installed
  ls -l /usr/lib/systemd/system/mariadb.service
  # RPMs do not start server automatically on clean install
  sudo systemctl start mariadb

  echo "---- Check permissions - all of the following should fail ----"
  ! systemctl --no-ask-password stop mariadb
  ! systemctl --no-ask-password condrestart mariadb
  ! systemctl --no-ask-password start mariadb
  ! systemctl --no-ask-password enable mariadb
  ! systemctl --no-ask-password set-environment MYSQLD_OPTS="--unknown-option"
  ! systemctl --no-ask-password unset-environment MYSQLD_OPTS
  ! systemctl --no-ask-password restart mariadb

  echo "---- Now use proper permissions ---"
  # mariadb.service and its synonyms
  systemctl status mariadb.service --no-pager
  systemctl status mariadb.service --no-pager | grep Loaded | grep mariadb.service
  systemctl status mariadb --no-pager
  systemctl status mariadb --no-pager | grep Loaded | grep mariadb.service
  systemctl status mysql --no-pager
  systemctl status mysql --no-pager | grep Loaded | grep mariadb.service
  systemctl status mysqld --no-pager
  systemctl status mysqld --no-pager | grep Loaded | grep mariadb.service

  sudo systemctl stop mariadb
  !  ps -ef | grep mysqld | grep -v grep
  sleep 5
  # condrestart part 1: does nothing when server is not running
  ##sudo systemctl condrestart mariadb
  #!  ps -ef | grep mysqld | grep -v grep
  # start works under root
  sudo systemctl start mariadb
  ps -ef | grep mysqld | grep -v grep
  # is-enabled, disable, enable
  systemctl is-enabled mariadb
  # MDEV-8956
  #sudo systemctl disable mariadb
  #! systemctl is-enabled mariadb
  #sudo systemctl enable mariadb
  #systemctl is-enabled mariadb
  # set-environment: add an unknown option
  sudo systemctl set-environment MYSQLD_OPTS="--unknown-option"
  # condrestart part 2: attempts to restart when server is running
  ! sudo systemctl condrestart mariadb
  # unset-environment
  sudo systemctl unset-environment MYSQLD_OPTS
  # Restart
  sudo systemctl restart mariadb
  sudo systemctl set-environment MYSQLD_OPTS="--unknown-option"
  ! sudo systemctl restart mariadb
  sudo systemctl unset-environment MYSQLD_OPTS
  # Status shows proper text
  systemctl status mariadb --no-pager | grep 'MariaDB server is down'
  sudo systemctl start mariadb
  systemctl status mariadb --no-pager | grep 'Taking your SQL requests now'
  # See the journal
  sudo systemctl -l status mariadb.service --no-pager
  ! journalctl -lxn 100 | grep mysqld
  sudo journalctl -lxn 100 --no-pager | grep mysqld
  # Init.d script
  ls -l /etc/init.d/mysql
  ls -l /etc/systemd/system/mariadb.service.d/migrated-from-my.cnf-settings.conf
  # It does not do the same as systemctl now
  # /etc/init.d/mysql status
    ;;
no)
    echo "Steps related to systemd will be skipped"
    sudo service mysql restart
    ;;
*)
    echo "It should never happen, check your configuration (systemdCapability property is not set or is set to a wrong value)"
    ;;
  esac
  mysql -e "select @@version, @@version_comment"
  mysql -e "use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t"
  ;;
esac
""")]))

#############################
##### New step: minor upgrade

    zyp_fact.addStep(Test(
        doStepIf=(lambda(step): branch_is_not_galera(step)),
        name="upgrade",
        description=["testing", "minor upgrade"],
        descriptionDone=["test", "minor upgrade"],
        warningPattern=".*Upgrade warning:.*",
        logfiles={"kernel": "kernel_"+port+".log"},
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_install_image] + args + ["vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" "+kvm_scpopt+" rpms buildbot@localhost:buildbot/",
        WithProperties("""
set -ex
cd buildbot

dist_arch=""" + dist_arch + """

# MariaDB version
mariadb_version=`echo "%(branch)s" | sed -e "s/.*\(5\.[1-356]\|10\.[0-9]\).*/\\1/"`

# Check that there is a previous version to install
if ! wget http://yum.mariadb.org/$mariadb_version/$dist_arch
then
  echo "Upgrade warning"": could not find a previous version in MariaDB repo, skipping the test"
  exit
fi

case "%(branch)s" in
*mdev10416*)
  sudo cat /etc/sysconfig/selinux | grep SELINUX || true
  sudo sh -c \"PATH=$PATH:/usr/sbin getenforce || true\"
  sudo sh -c \"PATH=$PATH:/usr/sbin setenforce Enforcing || true\"
  sudo sh -c \"PATH=$PATH:/usr/sbin getenforce || true\"
  ;;
esac
rpm -qa | { grep -iE 'maria|mysql|galera' || true; }
ls /etc/zypp/repos.d/* | grep -iE '(maria|galera)' | xargs -r sudo rm -f
 sudo sh -c "echo '[mariadb]
name=MariaDB
baseurl=http://yum.mariadb.org/$mariadb_version/$dist_arch
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1' > /etc/zypp/repos.d/MariaDB.repo"
  sudo cat /etc/zypp/repos.d/MariaDB.repo
  sudo zypper clean --all
  #sudo zypper -q --no-gpg-checks install -y  MariaDB-server MariaDB-client MariaDB-shared
  sudo zypper --no-gpg-checks install --from mariadb -y  MariaDB-server MariaDB-client
  sudo service mysql start
  mysql -uroot -e "select @@version, @@version_comment; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t;"
  mysql -uroot --skip-column-names -e "select @@version" | awk -F'-' '{ print $1 }' > /tmp/version.old
  sudo zypper --no-refresh --no-gpg-checks install -y rpms/*.rpm
  mysql -uroot -e "select @@version, @@version_comment"
  mysql -uroot --skip-column-names -e "select @@version" | awk -F'-' '{ print $1 }' > /tmp/version.new
  # Version has changed after upgrade
  ! diff -u  /tmp/version.old  /tmp/version.new
  # RPMs do not run mysql_upgrade automatically
  # cat /var/lib/mysql/mysql_upgrade_info | awk -F'-' '{ print $1 }' > /tmp/version.upgrade
  # mysql_upgrade is run automatically in deb packages
  # diff -u /tmp/version.new /tmp/version.upgrade
case "%(systemdCapability)s" in
yes)
  ls -l /usr/lib/systemd/system/mariadb.service
  ls -l /etc/systemd/system/mariadb.service.d/migrated-from-my.cnf-settings.conf
  ls -l /etc/init.d/mysql
  systemctl status mariadb.service --no-pager
  systemctl status mariadb --no-pager
  systemctl status mysql --no-pager
  systemctl status mysqld --no-pager
  systemctl is-enabled mariadb
  sudo systemctl restart mariadb
  systemctl status mariadb --no-pager
  sudo journalctl -lxn 100 --no-pager | grep mysqld
  # It does not do the same as systemctl now
  # /etc/init.d/mysql status
  ;;
no)
  echo "Steps related to systemd will be skipped"
  ;;
*)
  echo "It should never happen, check your configuration (systemdCapability property is not set or is set to a wrong value)"
  ;;
esac
  mysql -e "select @@version, @@version_comment; use test; insert into t values (2); select * from t; drop table t"
""")]))
##### End of minor upgrade step
#############################

# Upgrade from MariaDB 10.1

    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="update",
            upgrade_from="MariaDB 10.1 (server, client)",
            old_packages="MariaDB-server MariaDB-client",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=rpm_test_branch
        )
    )
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="MariaDB 10.1 (server, client)",
            old_packages="MariaDB-server MariaDB-client",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=rpm_test_branch
        )
    )
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="update",
            upgrade_from="MariaDB 10.1 (all packages)",
            old_packages="MariaDB-*",
            new_packages="MariaDB-*",
            doStepIf=rpm_test_branch
        )
    )
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="MariaDB 10.1 (all packages)",
            old_packages="MariaDB-*",
            new_packages="MariaDB-*",
            doStepIf=rpm_test_branch
        )
    )
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="dist-upgrade",
            upgrade_from="MariaDB 10.1",
            old_packages="MariaDB-*",
            new_packages="",
            doStepIf=rpm_test_branch
        )
    )

# Upgrade from MariaDB 10.0

    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="update",
            upgrade_from="MariaDB 10.0 (server, client)",
            old_packages="MariaDB-server MariaDB-client",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=rpm_test_branch
        )
    )
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="MariaDB 10.0 (server, client)",
            old_packages="MariaDB-server MariaDB-client",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=rpm_test_branch
        )
    )
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="update",
            upgrade_from="MariaDB 10.0 (all packages)",
            old_packages="MariaDB-client MariaDB-common MariaDB-devel MariaDB-server MariaDB-shared MariaDB-test MariaDB-*-engine",
            new_packages="MariaDB-*",
            doStepIf=rpm_test_branch
        )
    )
    # This step fails on opensuse 13 x86_64 and SLES11 x86)64 due to MDEV-9850
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="MariaDB 10.0 (all packages)",
            old_packages="MariaDB-client MariaDB-common MariaDB-devel MariaDB-server MariaDB-shared MariaDB-test MariaDB-*-engine",
            new_packages="MariaDB-*",
            doStepIf=rpm_test_branch
        )
    )
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="dist-upgrade",
            upgrade_from="MariaDB 10.0",
            old_packages="MariaDB-client MariaDB-common MariaDB-devel MariaDB-server MariaDB-shared MariaDB-test MariaDB-*-engine",
            new_packages="",
            doStepIf=rpm_test_branch
        )
    )

# Upgrade from Galera 10.0

    # This step doesn't work due to MDEV-9807
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="update",
            upgrade_from="MariaDB 10.0 Galera",
            old_packages="MariaDB-Galera-server MariaDB-client",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=rpm_test_branch
        )
    )
    # Restart is needed because of MDEV-9797
    # On openSUSE 13 manual restart does not work
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="MariaDB 10.0 Galera",
            old_packages="MariaDB-Galera-server MariaDB-client",
            new_packages="MariaDB-server MariaDB-client",
            manual_restart=1,
            doStepIf=rpm_test_branch
        )
    )
    # Restart is needed because of MDEV-9797
    # On openSUSE 13 manual restart does not work
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="dist-upgrade",
            upgrade_from="MariaDB 10.0 Galera",
            old_packages="MariaDB-Galera-server MariaDB-client",
            new_packages="",
            manual_restart=1,
            doStepIf=rpm_test_branch
        )
    )

# Upgrade from MariaDB 5.5

    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="update",
            upgrade_from="MariaDB 5.5 (server, client)",
            old_packages="MariaDB-server MariaDB-client",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=rpm_test_branch
        )
    )
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="MariaDB 5.5 (server, client)",
            old_packages="MariaDB-server MariaDB-client",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=rpm_test_branch
        )
    )
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="update",
            upgrade_from="MariaDB 5.5 (all packages)",
            old_packages="MariaDB-client MariaDB-common MariaDB-devel MariaDB-server MariaDB-shared MariaDB-test",
            new_packages="MariaDB-*",
            doStepIf=rpm_test_branch
        )
    )
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="MariaDB 5.5 (all packages)",
            old_packages="MariaDB-client MariaDB-common MariaDB-devel MariaDB-server MariaDB-shared MariaDB-test",
            new_packages="MariaDB-*",
            doStepIf=rpm_test_branch
        )
    )
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="dist-upgrade",
            upgrade_from="MariaDB 5.5",
            old_packages="MariaDB-client MariaDB-common MariaDB-devel MariaDB-server MariaDB-shared MariaDB-test",
            new_packages="",
            doStepIf=rpm_test_branch
        )
    )

# Upgrade from Galera 5.5

    # This step does not work because of MDEV-9807
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="update",
            upgrade_from="MariaDB 5.5 Galera",
            old_packages="MariaDB-Galera-server MariaDB-client",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=rpm_test_branch
        )
    )
    # Restart is needed because of MDEV-9797
    # On openSUSE 13 manual restart does not work
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="MariaDB 5.5 Galera",
            old_packages="MariaDB-Galera-server MariaDB-client",
            new_packages="MariaDB-server MariaDB-client",
            manual_restart=1,
            doStepIf=rpm_test_branch
        )
    )
    # Restart is needed because of MDEV-9797
    # On openSUSE 13 manual restart does not work
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="dist-upgrade",
            upgrade_from="MariaDB 5.5 Galera",
            old_packages="MariaDB-Galera-server MariaDB-client",
            new_packages="",
            manual_restart=1,
            doStepIf=rpm_test_branch
        )
    )

# Upgrade from MySQL 5.7
    # MySQL 5.7 has packages for sles 12 x86_64

    # This test does not upgrade anything, since the packages don't match
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="update",
            upgrade_from="MySQL 5.7",
            old_packages="mysql-community-server mysql-community-client",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=False
#            doStepIf=(lambda(step): int(dist_num) == 12 and arch == "x86_64" and rpm_test_branch(step))
        )
    )
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="MySQL 5.7 (server, client)",
            old_packages="mysql-community-server mysql-community-client",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=(lambda(step): int(dist_num) == 12 and arch == "x86_64" and rpm_test_branch(step))
        )
    )
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="MySQL 5.7 (all packages)",
            old_packages="mysql-community-*",
            new_packages="MariaDB-*",
            doStepIf=(lambda(step): int(dist_num) == 12 and arch == "x86_64" and rpm_test_branch(step))
        )
    )

# Upgrade from MySQL 5.6
    # MySQL 5.6 has packages for sles 11, 12 x86)64

    # This test does not upgrade anything, since the packages don't match
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="update",
            upgrade_from="MySQL 5.6",
            old_packages="mysql-community-server mysql-community-client",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=False
#            doStepIf=(lambda(step): int(dist_num) < 13 and arch == "x86_64" and rpm_test_branch(step))
        )
    )
    # The step fails due to MDEV-9798
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="MySQL 5.6 (server, client)",
            old_packages="mysql-community-server mysql-community-client",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=(lambda(step): int(dist_num) < 13 and arch == "x86_64" and rpm_test_branch(step))
        )
    )

    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="MySQL 5.6 (all packages)",
            old_packages="mysql-community-bench mysql-community-client mysql-community-common mysql-community-devel mysql-community-embedded mysql-community-embedded-devel mysql-community-libs mysql-community-server mysql-community-test",
            new_packages="MariaDB-*",
            doStepIf=(lambda(step): int(dist_num) < 13 and arch == "x86_64" and rpm_test_branch(step))
        )
    )

# Upgrade from MySQL 5.5
    # MySQL 5.5 has packages for sles 11 x86_64

    # This step does not upgrade anything, since the packages don't match
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="update",
            upgrade_from="MySQL 5.5",
            old_packages="mysql-community-server mysql-community-client",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=False
#            doStepIf=(lambda(step): int(dist_num) == 11 and arch == "x86_64" and rpm_test_branch(step))
        )
    )
    # The step fails due to MDEV-9798
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="MySQL 5.5 (server, client)",
            old_packages="mysql-community-server mysql-community-client",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=(lambda(step): int(dist_num) == 11 and arch == "x86_64" and rpm_test_branch(step))
        )
    )
    # The step fails due to MDEV-9798
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="MySQL 5.5 (all packages)",
            old_packages="mysql-community-bench mysql-community-client mysql-community-common mysql-community-devel mysql-community-embedded mysql-community-embedded-devel mysql-community-libs mysql-community-server mysql-community-test",
            new_packages="MariaDB-*",
            doStepIf=(lambda(step): int(dist_num) == 11 and arch == "x86_64" and rpm_test_branch(step))
        )
    )

# Upgrades from packages provided by distributions

    # mysql and mysql-client: provided by SLES 11

    # This test does not upgrade anything, since the packages don't match
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="update",
            upgrade_from="mysql",
            old_packages="mysql mysql-client",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=False
#            doStepIf=(lambda(step): int(dist_num) == 11 and rpm_test_branch(step))
        )
    )
    # Manual restart is added due to MDEV-9819
    # but it does not help
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="mysql (server, client)",
            old_packages="mysql mysql-client",
            new_packages="MariaDB-server MariaDB-client",
            manual_restart=1,
            doStepIf=(lambda(step): int(dist_num) == 11 and rpm_test_branch(step))
        )
    )
    # Manual restart is added due to MDEV-9819
    # but it does not help
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="mysql (all packages)",
            old_packages="mysql*",
            new_packages="MariaDB-*",
            manual_restart=1,
            doStepIf=(lambda(step): int(dist_num) == 11 and rpm_test_branch(step))
        )
    )

    # mariadb and mariadb-client: provided by SLES 12, 13

    # This test does not upgrade anything, since the packages don't match
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="update",
            upgrade_from="mariadb",
            old_packages="mariadb mariadb-client",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=False
            # doStepIf=(lambda(step): int(dist_num) > 11 and rpm_test_branch(step))
        )
    )
    # This step fails due to MDEV-9796 (workaround does not help)
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="mariadb (server, client)",
            old_packages="mariadb mariadb-client",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=(lambda(step): int(dist_num) > 11 and rpm_test_branch(step))
        )
    )
    # It's fine for SLES 12, but on openSUSE 13 there are server and server-debug versions,
    # which can't be installed together; so, we have to split the test, see below
    # This step fails due to MDEV-9796 (workaround does not help)
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="mariadb (all packages)",
            old_packages="mariadb*",
            new_packages="MariaDB-*",
            doStepIf=(lambda(step): int(dist_num) == 12 and rpm_test_branch(step))
        )
    )
    # Variation for newer openSUSE where mariadb-debug-version also exists
    # This step fails due to MDEV-9796, workaround does not help
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="mariadb (all packages)",
            old_packages="mariadb mariadb-bench mariadb-client mariadb-errormessages mariadb-test mariadb-tools",
            new_packages="MariaDB-*",
            doStepIf=(lambda(step): int(dist_num) > 12 and rpm_test_branch(step))
        )
    )
    # And the same for debug version
    # other packages require mariadb, so we are skipping them to see how it goes with the server only
    # This step fails due to MDEV-9796, workaround does not help
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="mariadb-debug-version",
            old_packages="mariadb-debug-version",
            new_packages="MariaDB-*",
            doStepIf=(lambda(step): int(dist_num) > 12 and rpm_test_branch(step))
        )
    )

    # mysql-community-server and mysql-community-client: provided by openSUSE 13

    # This test does not upgrade anything, since the packages don't match
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="update",
            upgrade_from="mysql-community-server",
            old_packages="mysql-community-server mysql-community-server-client",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=False
#            doStepIf=(lambda(step): int(dist_num) > 12 and rpm_test_branch(step))
        )
    )
    # This step does not work due to MDEV-9796 (workaround does not help)
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="mysql-community-server (server, client)",
            old_packages="mysql-community-server mysql-community-server-client",
            new_packages="MariaDB-server MariaDB-client",
            doStepIf=(lambda(step): int(dist_num) > 12 and rpm_test_branch(step))
        )
    )
    # We need to exclude mysql-community-server-debug-version, and it seems there is no way to do it in zypper,
    # so we have to list all packages explicitly
    # This step does not work due to MDEV-9796 (workaround does not help)
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="mysql-community-server (all packages)",
            old_packages="mysql-community-server mysql-community-server-bench mysql-community-server-client mysql-community-server-errormessages mysql-community-server-test mysql-community-server-tools",
            new_packages="MariaDB-*",
            doStepIf=(lambda(step): int(dist_num) > 12 and rpm_test_branch(step))
        )
    )
    # And now while we are at it, do the debug-version as well
    # other packages require mysql-community-server, so we'll skip it to see how it goes with the server only
    # This step does not work due to MDEV-9796 (workaround does not help)
    zyp_fact.addStep(
         getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            action="install",
            upgrade_from="mysql-community-server-debug-version",
            old_packages="mysql-community-server-debug-version",
            new_packages="MariaDB-*",
            doStepIf=(lambda(step): int(dist_num) > 12 and rpm_test_branch(step))
        )
    )

    return {'name': name, 'slavenames': slaves, 'builddir': name, 'factory': zyp_fact,
            "nextBuild": myNextBuild,
            "category": catg}


#-------------------------------------------------------------------------------
# SUSE and openSUSE builders
#-------------------------------------------------------------------------------
#bld_kvm_zyp_opensuse13_1_x86 = getZypBuilder("kvm-zyp-opensuse13_1-x86", "vm-opensuse13_1-x86",
#                                        "2303", "qemu64", "i386", slaves=kvm11_slaves, ramdisk=False)
#bld_kvm_zyp_opensuse13_x86 = getZypBuilder("kvm-zyp-opensuse13-x86", "vm-opensuse13-x86",
#                                        "2303", "qemu64", "i386", slaves=kvm11_slaves, ramdisk=False)

#bld_kvm_zyp_opensuse13_1_x86_64 = getZypBuilder("kvm-zyp-opensuse13_1-x86_64", "vm-opensuse13_1-x86_64",
#                                        "2304", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)
#bld_kvm_zyp_opensuse13_amd64 = getZypBuilder("kvm-zyp-opensuse13-amd64", "vm-opensuse13-amd64",
#                                        "2304", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)

bld_kvm_zyp_opensuse42_amd64 = getZypBuilder("kvm-zyp-opensuse42-amd64", "vm-opensuse42-amd64",
                                        "2340", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)

bld_kvm_zyp_sles11_x86 = getZypBuilder("kvm-zyp-sles11-x86", "vm-sles11-x86",
                                        "2307", "qemu64", "i386", slaves=kvm11_slaves, ramdisk=False)

#bld_kvm_zyp_sles11_x86_64 = getZypBuilder("kvm-zyp-sles11-x86_64", "vm-sles11-x86_64",
#                                        "2308", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)
bld_kvm_zyp_sles11_amd64 = getZypBuilder("kvm-zyp-sles11-amd64", "vm-sles11-amd64",
                                        "2308", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)

bld_kvm_zyp_sles11sp1_amd64 = getZypBuilder("kvm-zyp-sles11sp1-amd64", "vm-sles11sp1-amd64",
                                        "2312", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)

# placeholder for sles114 (SLES 11sp4) builder - dbart 2017-06-22
#bld_kvm_zyp_sles114_amd64 = getZypBuilder("kvm-zyp-sles114-amd64", "vm-sles114-amd64",
#                                        "2352", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)

#bld_kvm_zyp_sles12_x86_64 = getZypBuilder("kvm-zyp-sles12-x86_64", "vm-sles12-x86_64",
#                                        "2309", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)
bld_kvm_zyp_sles12_amd64 = getZypBuilder("kvm-zyp-sles12-amd64", "vm-sles12-amd64",
                                        "2309", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# SUSE and openSUSE package factory for Galera
#-------------------------------------------------------------------------------
def getGalZypBuilder(name, kvm_image, port, cpu, arch, slaves=kvm_slaves, ramdisk=True, catg="galera"):
    distro = name.split('-')[2]

    kvm_build_image = getGaleraBuildImage(kvm_image) + ".qcow2"
    kvm_install_image = kvm_image + "-install.qcow2"

    args = ["--port="+port, "--user=buildbot", "--smp=4", "--cpu="+cpu, "--startup-timeout=600", "--logfile=kernel_"+port+".log"]
    if ramdisk:
        args = args + ["--work-image=/dev/shm/vm-tmp-"+port+".qcow2"]
    zyp_fact = factory.BuildFactory()
    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    zyp_fact.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))
    zyp_fact.addStep(ShellCommand(
        description=["rsyncing", "VMs"],
        descriptionDone=["rsync", "VMs"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+kvm_build_image,
                 "bb01.mariadb.net::kvm/vms/"+kvm_install_image,
                 "/kvm/vms/"]))
    zyp_fact.addStep(Compile(
        description=["making", "rpms"],
        descriptionDone=["make", "rpms"],
        timeout=7200,
        logfiles={"kernel": "kernel_"+port+".log"},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_build_image] + args + ["vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("""
set -ex
cd buildbot
mkdir rpms srpms
git clone -b %(branch)s "https://github.com/MariaDB/galera.git" build
cd build
./scripts/build.sh -p
cp `find *.rpm -maxdepth 1 -type f` ../rpms
"""),
        "= rm -Rf rpms srpms && mkdir rpms srpms",
        "= scp -r -P "+port+" "+kvm_scpopt+" buildbot@localhost:buildbot/*rpms .",
    ]))
    addPackageUploadStep(zyp_fact, 'rpms')
    zyp_fact.addStep(Test(
        description=["testing", "install"],
        descriptionDone=["test", "install"],
        logfiles={"kernel": "kernel_"+port+".log"},
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_install_image] + args + ["vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" "+kvm_scpopt+" rpms buildbot@localhost:buildbot/",
        WithProperties("""
set -ex
cd buildbot
sudo zypper --no-refresh --no-gpg-checks install -y rpms/*.rpm
garbd --version
""")]))
    return {'name': name, 'slavenames': slaves, 'builddir': name, 'factory': zyp_fact,
            "nextBuild": myNextBuild,
            "category": catg}

#-------------------------------------------------------------------------------
# SUSE and openSUSE builders for Galera
#-------------------------------------------------------------------------------
#gal_bld_kvm_zyp_opensuse13_x86   = getGalZypBuilder("kvm-zyp-opensuse13-x86-gal", "vm-opensuse13-x86",
#                                     "3011", "qemu64", "i386", slaves=kvm11_slaves, ramdisk=False)
#gal_bld_kvm_zyp_opensuse13_amd64 = getGalZypBuilder("kvm-zyp-opensuse13-amd64-gal", "vm-opensuse13-amd64",
#                                     "3012", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)
gal_bld_kvm_zyp_opensuse42_amd64 = getGalZypBuilder("kvm-zyp-opensuse42-amd64-gal", "vm-opensuse42-amd64",
                                     "3054", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)
gal_bld_kvm_zyp_sles11_x86       = getGalZypBuilder("kvm-zyp-sles11-x86-gal", "vm-sles11-x86",
                                     "3013", "qemu64", "i386", slaves=kvm11_slaves, ramdisk=False)
gal_bld_kvm_zyp_sles11_amd64     = getGalZypBuilder("kvm-zyp-sles11-amd64-gal", "vm-sles11-amd64",
                                     "3014", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)
gal_bld_kvm_zyp_sles12_amd64     = getGalZypBuilder("kvm-zyp-sles12-amd64-gal", "vm-sles12-amd64",
                                     "3015", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)
gal_bld_kvm_zyp_sles11sp1_amd64  = getGalZypBuilder("kvm-zyp-sles11sp1-amd64-gal", "vm-sles11sp1-amd64",
                                     "3016", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)

#-------------------------------------------------------------------------------

# The class Test seems to not have a direct way to completely disable
# warning parsing in logs. So use this impossible-to-match regexp
# instead.

impossibleRe = r"\Z.\A"

def getDebBuilder(name, kvm_image, port, cpu, dist_name, version_name, kvmargs=[], slavenames=kvm_slaves, ramdisk=True, catg="main"):
    args= ["--port="+port, "--user=buildbot", "--smp=4", "--cpu="+cpu, "--startup-timeout=600"] + kvmargs
    if ramdisk:
        args= args + ["--work-image=/dev/shm/vm-tmp-"+port+".qcow2"]
    # AIO detection in InnoDB/XraDB does not work on the old
    # debian5 kernel. Let's disable aio here, in buildbot.
    if "debian5" in name:
        disable_aio_in_mtr="--mysqld=--loose-disable-innodb-use-native-aio"
    else:
        disable_aio_in_mtr=""
    dist_arch= name.split('-')[2] + "-" + name.split('-')[3]
    deb_fact= factory.BuildFactory()
    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    deb_fact.addStep(ShellCommand(
        name="cleanup",
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))
    deb_fact.addStep(ShellCommand(
        name="rsync_vms",
        description=["rsyncing", "VMs"],
        descriptionDone=["rsync", "VMs"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-build.qcow2",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-install.qcow2",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-upgrade.qcow2",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-upgrade2.qcow2",
                 "/kvm/vms/"]))
    deb_fact.addStep(DownloadSourceTarball())
    deb_fact.addStep(FileDownload(
        mastersrc=WithProperties("%(bakerypath)s"),
        slavedest=WithProperties("%(bakery)s.tar.gz"),
        blocksize=524288,
        doStepIf=branch_is_5_123))
    # Extract the compiler warning suppressions file from the source tarball.
    deb_fact.addStep(ShellCommand(
        name="get_supp",
        description=["getting", ".supp"],
        descriptionDone=["get", ".supp"],
        command=["sh", "-c", WithProperties("""
rm -f compiler_warnings.supp
tar zxf "/tmp/buildcache/%(tarbuildnum)s:%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
#wget ftp.askmonty.org:/public/compiler_warnings.supp
ls -l compiler_warnings.supp
exit 0  # best-effort, not fatal if no suppression file
""")]))

    deb_fact.addStep(SetPropertyFromCommand(
        name="nosystemd",
        doStepIf=(lambda(step): not in_systemdBuilders(step)),
        hideStepIf=(lambda results, s: results==SKIPPED),
        property="systemdCapability",
        command="echo no"))
    deb_fact.addStep(SetPropertyFromCommand(
        name="systemd",
        doStepIf=(lambda(step): in_systemdBuilders(step)),
        hideStepIf=(lambda results, s: results==SKIPPED),
        property="systemdCapability",
        command="echo yes"))

    deb_fact.addStep(Compile(
        description=["making", "debs"],
        descriptionDone=["make", "debs"],
        logfiles={"kernel": "kernel_"+port+".log"},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        timeout=3600,
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-build.qcow2"] + args +["--logfile=kernel_"+port+".log", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        ScpSourceIntoVM(port),
        WithProperties("= case '%(branch)s' in *5\\.[123]*) scp -P "+port+" "+ kvm_scpopt +" %(bakery)s.tar.gz buildbot@localhost:buildbot/ ;; esac"),
        WithProperties("""
set -ex
cd buildbot
mkdir -p debs/binary debs/source
rm -Rf build
mkdir build
cd build
case "%(branch)s" in
*5\\.[123]*)
  tar zxf ../%(bakery)s.tar.gz
  cd %(bakery)s
  bakery/autobake51-deb.sh ../../%(distname)s
  cp `find build-temp-[0-9]*/ -maxdepth 1 -type f` ../../debs/binary/
  ;;
*)
  tar zxf "../%(distname)s"
  cd "%(distdirname)s"
  echo $PATH
  export JAVA_HOME=`ls -d /usr/lib/jvm/java-1.*`
  export AM_EXTRA_MAKEFLAGS=VERBOSE=1
  export DH_BUILD_DDEBS=1
  echo | debian/autobake-deb.sh
  cp `find .. -maxdepth 1 -type f` ../../debs/binary/
  ;;
esac
cd ../../debs
dpkg-scanpackages binary /dev/null | gzip -9c > binary/Packages.gz
dpkg-scansources source /dev/null | gzip -9c > source/Sources.gz
"""),
        "= rm -Rf debs",
        "= scp -r -P "+port+" "+kvm_scpopt+" buildbot@localhost:buildbot/debs .",
        ]))
    addPackageArchiveStep(deb_fact, "debs", "%(tarbuildnum)s")

    # On Sid, only run the test for 10.1+
    deb_fact.addStep(Test(
        name="install",
        doStepIf=(lambda(step): version_name != "sid" or branch_is_10_1_or_later(step)),
        description=["testing", "install"],
        descriptionDone=["test", "install"],
        logfiles={"kernel": "kernel_"+port+".log", "syslog": "daemon.log"},
        warningPattern=impossibleRe,
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2"] + args + ["--logfile=kernel_"+port+".log", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" "+kvm_scpopt+" debs buildbot@localhost:buildbot/",
        WithProperties("sh -c \"echo '%(branch)s' | sed -e \\\"s/.*\\\\(5\\\\.[1-356]\\\\|10\\\\.[0123]\\\\).*/\\\\1/\\\"\" > /tmp/VERSION"),
        WithProperties("case '%(branch)s' in *galera* | *5.5-hf* | *10.[123]*) sudo sh -c \"echo 'deb http://yum.mariadb.org/galera/repo/deb "+version_name+" main' > /etc/apt/sources.list.d/galera-test-repo.list\" ;; esac"),
        WithProperties("case '%(branch)s' in *galera*) sudo sh -c \"echo 'deb http://mirror2.hs-esslingen.de/mariadb/repo/$(cat /tmp/VERSION)/"+dist_name+" "+version_name+" main' > /etc/apt/sources.list.d/mariadb-test-repo.list\" ;; esac"),
        WithProperties("""
set -ex
cd buildbot
chmod -cR go+r debs
sudo apt-get update
sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated -y mariadb-`case '%(branch)s' in *galera* | *5.5-hf*) echo galera- ;; esac`server"
case "%(branch)s" in
*10.[12]e*)
  sudo mysql -uroot -e "create database test; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t; drop database test"
  ;;
*)
  mysql -uroot -prootpass -e "create database test; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t; drop database test"
  ;;
esac
case "%(systemdCapability)s" in
yes)
  # Service is installed
  echo "---- Check that service is present ----"
  ls -l /lib/systemd/system/mariadb.service
  # mariadb.service and its synonyms
  systemctl --no-pager status mariadb.service
  systemctl --no-pager status mariadb.service | grep Loaded | grep mariadb.service
  systemctl --no-pager status mariadb
  systemctl --no-pager status mariadb | grep Loaded | grep mariadb.service
  systemctl --no-pager status mysql
  systemctl --no-pager status mysql | grep Loaded | grep mariadb.service
  systemctl --no-pager status mysqld
  systemctl --no-pager status mysqld | grep Loaded | grep mariadb.service
  echo "---- Check permissions - all of the following should fail ----"
  ! systemctl --no-pager --no-ask-password stop mariadb
  ! systemctl --no-pager --no-ask-password condrestart mariadb
  ! systemctl --no-pager --no-ask-password start mariadb
  ! systemctl --no-pager --no-ask-password enable mariadb
  ! systemctl --no-pager --no-ask-password set-environment MYSQLD_OPTS="--unknown-option"
  ! systemctl --no-pager --no-ask-password unset-environment MYSQLD_OPTS
  ! systemctl --no-pager --no-ask-password restart mariadb

  echo "---- Now use proper permissions ---"
  sudo systemctl --no-pager stop mariadb
  ! ps -ef | grep mysqld | grep -v grep
  ## condrestart part 1: does nothing when server is not running
  #sudo systemctl condrestart mariadb
  #!  ps -ef | grep mysqld | grep -v grep
  sudo systemctl --no-pager start mariadb
  systemctl --no-pager is-enabled mariadb
  # MDEV-8956
  #sudo systemctl disable mariadb
  #! systemctl is-enabled mariadb
  #sudo systemctl enable mariadb
  #systemctl is-enabled mariadb

  # set-environment: add an unknown option
  sudo systemctl --no-pager set-environment MYSQLD_OPTS="--unknown-option"
  # condrestart part 2: attempts to restart when server is running (and fails due to unknown option)
  sudo systemctl --no-pager -l status mariadb
  ! sudo systemctl --no-pager condrestart mariadb
  ! sudo systemctl --no-pager -l status mariadb
  # unset-environment
  sudo systemctl --no-pager unset-environment MYSQLD_OPTS
  # Restart (it looks strange because we are investigating a problem)
  sudo systemctl --no-pager restart mariadb || ps -ef | grep mysqld | grep -v grep || sudo systemctl -ln 500 status mariadb

  sudo systemctl --no-pager set-environment MYSQLD_OPTS="--unknown-option"
  ! sudo systemctl --no-pager restart mariadb
  sudo systemctl --no-pager unset-environment MYSQLD_OPTS
  # Status shows proper text
  systemctl --no-pager status mariadb | grep 'MariaDB server is down'
  sudo systemctl --no-pager start mariadb
  systemctl --no-pager status mariadb | grep 'Taking your SQL requests now'
  # See the journal
  sudo systemctl --no-pager -l status mariadb.service
  # Cannot see it without root
  ! journalctl -lxn 100 | grep mysqld
  sudo journalctl -lxn 100 --no-pager | grep mysqld
  # Init.d script
  ls -l /etc/init.d/mysql
  # It does not do the same as systemctl now
  # /etc/init.d/mysql status
  # Sysvinit
  # not on Debian
  # service mariadb status
  # service mysql status
  # service mysqld status
  # chkconfig mariadb
  ls -l /etc/systemd/system/mariadb.service.d/migrated-from-my.cnf-settings.conf
  ;;
no)
  echo "Steps related to systemd will be skipped"
  ;;
*)
  echo "It should never happen, check your configuration (systemdCapability property is not set or is set to a wrong value)"
  ;;
esac
case "%(branch)s" in
*10.[12]e*)
  sudo mysql -uroot -e "select @@version"
  ;;
*)
  mysql -uroot -prootpass -e "select @@version"
  ;;
esac
"""),
        "! rm -f daemon.log; (sudo cat /var/log/daemon.log || sudo cat /var/log/syslog) >daemon.log",
        "!= rm -f daemon.log; scp -P "+port+" "+kvm_scpopt+" buildbot@localhost:daemon.log ."]))

# On Sid, only run the test for 10.1+.
# Ignore Stretch for now, because it has a broken mix of MySQL and MariaDB instead of clean MySQL.
# On Xenial and Yakkety (where MySQL 5.7 is pre-installed) only run upgrade to 10.2,
#    because 10.0/10.1 don't support crossgrade from 5.7, and the Debian's workaround
#    (backing up the datadir and starting from scratch) is not enabled in our packages
# Further changes are possible since MDEV-6284 is still open.
    deb_fact.addStep(Test(
        name="upgrade1",
        doStepIf=(lambda(step): version_name != "stretch" and (version_name != "sid" or branch_is_10_1_or_later(step)) and ((version_name != "xenial" and version_name != "yakkety" and version_name != "zesty") or branch_is_10_2_or_later(step))),
        description=["testing", "upgrade", "from", "MySQL"],
        descriptionDone=["upgrade", "from", "MySQL"],
        logfiles={"kernel": "kernel_"+port+".log", "syslog": "daemon.log"},
        warningPattern=".*Upgrade warning:.*",
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-upgrade.qcow2"] + args + ["--logfile=kernel_"+port+".log", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" "+kvm_scpopt+" debs buildbot@localhost:buildbot/",
        WithProperties("sh -c \"echo '%(branch)s' | sed -e \\\"s/.*\\\\(5\\\\.[1-356]\\\\|10\\\\.[0123]\\\\).*/\\\\1/\\\"\" > /tmp/VERSION"),
        "dpkg -l | grep -iE 'maria|mysql|galera'",
        WithProperties("case '%(branch)s' in *galera* | *5.5-hf* | *10.[123]*) sudo sh -c \"echo 'deb http://yum.mariadb.org/galera/repo/deb "+version_name+" main' > /etc/apt/sources.list.d/galera-test-repo.list\" ;; esac"),
        WithProperties("case '%(branch)s' in *galera*) sudo sh -c \"echo 'deb http://mirror2.hs-esslingen.de/mariadb/repo/$(cat /tmp/VERSION)/"+dist_name+" "+version_name+" main' > /etc/apt/sources.list.d/mariadb-test-repo.list\" ;; esac"),
        WithProperties("""
set -ex
cd buildbot

# MariaDB version
mariadb_version=`echo "%(branch)s" | sed -e "s/.*\(5\.[1-356]\|10\.[0-9]\).*/\\1/"`

# Codename: jessie, trusty etc.
version_name=`lsb_release -c | awk '{print $2}'`

# Distributor ID: debian or ubuntu
dist_name=`lsb_release -i | awk '{print tolower($3)}'`

chmod -cR go+r debs
sudo apt-get update

mysql -uroot -prootpass -e "use mytest; select * from t"
mysql -uroot -prootpass -e "use mytest; drop table if exists upgrade_test; create table upgrade_test (pk int primary key auto_increment, c char(64), v varchar(2048), d date, t time, dt datetime, ts timestamp) engine=InnoDB; begin; insert into upgrade_test values (null, 'test', 'test', date(now()), time(now()), now(), now());  insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; commit"
mysql -uroot -prootpass --skip-column-names -e "select @@version" | awk -F'-' '{ print $1 }' > /tmp/version.old
mysql -uroot -prootpass -e "CREATE DATABASE autoinc; CREATE TABLE autoinc.t_autoinc(a SERIAL) ENGINE=InnoDB SELECT 42 a"
mysql -uroot -prootpass -e "CREATE TABLE autoinc.t_autoinc2(a SERIAL) ENGINE=InnoDB; BEGIN; INSERT INTO autoinc.t_autoinc2 VALUES (NULL),(NULL); ROLLBACK; SHOW CREATE TABLE autoinc.t_autoinc2 \G"

sudo sh -c 'DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated -y mariadb-`case '%(branch)s' in *galera* | *5.5-hf*) echo galera- ;; esac`server'

old_ver=`dpkg -l | grep -i mysql-server | head -1 | awk '{print $2}' | sed -e "s/.*mysql-server-\(5\.[567]\).*/\\1/"`

case "$old_ver-$mariadb_version" in

5.7-10.[01]|5.7-5.5)
  # On Xenial and Yakkety the pre-installed MySQL is 5.7.
  # Probably it will happen on further versions of Ubuntu/Debian as well.
  # Due to MDEV-10077, upgrade from 5.7 to pre-10.2 is not supported.
  # The packaging prevents a failure
  # by backing up the old datadir and creating a new empty one (without the password).
  # The test should take this into account and not attempt to find any old data in the datadir --
  # set the password back, and not to expect to find any tables.
  mysql -uroot -e "set password = password('rootpass')"
  # If the previous command did not fail, it means root was passwordless, so it's indeed the new datadir
  echo "Upgrade warning"": workaround for upgrade from 5.7 was detected, upgrade created a new datadir"
  ;;
*)
  mysql -uroot -prootpass --skip-column-names -e "INSERT INTO autoinc.t_autoinc SET a=NULL;  SELECT COUNT(*) Expect_2 FROM autoinc.t_autoinc WHERE a>=42"
  echo "Prior to MDEV-6076, the next SELECT would return 1. After MDEV-6076, it should be 3"
  mysql -uroot -prootpass --skip-column-names -e "INSERT INTO autoinc.t_autoinc2 VALUES (NULL); SELECT * FROM autoinc.t_autoinc2"
  mysql -uroot -prootpass -e "use mytest; select * from t; select count(*) from upgrade_test"
  ;;
esac

mysql -uroot -prootpass -e "select @@version, @@version_comment"
mysql -uroot -prootpass --skip-column-names -e "select @@version" | awk -F'-' '{ print $1 }' > /tmp/version.new
# Version has changed after upgrade
! diff -u  /tmp/version.old  /tmp/version.new
sudo cat /var/lib/mysql/mysql_upgrade_info | awk -F'-' '{ print $1 }' > /tmp/version.upgrade
# mysql_upgrade is run automatically in deb packages
# TODO: something weird goes on with mysql_upgrade, to be checked later
#diff -u /tmp/version.new /tmp/version.upgrade
cat /tmp/version.new
cat /tmp/version.upgrade
case "%(systemdCapability)s" in
yes)
  ls -l /lib/systemd/system/mariadb.service
  ls -l /etc/systemd/system/mariadb.service.d/migrated-from-my.cnf-settings.conf
  ls -l /etc/init.d/mysql
  systemctl --no-pager status mariadb.service
  systemctl --no-pager status mariadb
  systemctl --no-pager status mysql
  systemctl --no-pager status mysqld
  systemctl --no-pager is-enabled mariadb
  sudo systemctl --no-pager restart mariadb
  systemctl --no-pager status mariadb
  sudo journalctl -lxn 100 --no-pager | grep mysqld
  # It does not do the same as systemctl now
  # /etc/init.d/mysql status
  ;;
no)
  echo "Steps related to systemd will be skipped"
  ;;
*)
  echo "It should never happen, check your configuration (systemdCapability property is not set or is set to a wrong value)"
  ;;
esac
"""),
        "! rm -f daemon.log; (sudo cat /var/log/daemon.log || sudo cat /var/log/syslog) >daemon.log",
        "!= rm -f daemon.log; scp -P "+port+" "+kvm_scpopt+" buildbot@localhost:daemon.log ."]))

    deb_fact.addStep(Test(
        name="upgrade2",
        doStepIf=(lambda(step): version_name != "sid" or branch_is_10_1_or_later(step)),
        description=["testing", "upgrade", "from", "MariaDB"],
        descriptionDone=["upgrade", "from", "MariaDB"],
        logfiles={"kernel": "kernel_"+port+".log", "syslog": "daemon.log"},
        warningPattern=impossibleRe,
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-upgrade2.qcow2"] + args + ["--logfile=kernel_"+port+".log", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" "+kvm_scpopt+" debs buildbot@localhost:buildbot/",
        WithProperties("sh -c \"echo '%(branch)s' | sed -e \\\"s/.*\\\\(5\\\\.[1-356]\\\\|10\\\\.[0123]\\\\).*/\\\\1/\\\"\" > /tmp/VERSION"),
	"dpkg -l | grep -iE 'maria|mysql|galera'",
        WithProperties("case '%(branch)s' in *galera* | *5.5-hf* | *10.[123]*) sudo sh -c \"echo 'deb http://yum.mariadb.org/galera/repo/deb "+version_name+" main' > /etc/apt/sources.list.d/galera-test-repo.list\" ;; esac"),
        WithProperties("case '%(branch)s' in *galera*) sudo sh -c \"echo 'deb http://mirror2.hs-esslingen.de/mariadb/repo/$(cat /tmp/VERSION)/"+dist_name+" "+version_name+" main' > /etc/apt/sources.list.d/mariadb-test-repo.list\" ;; esac"),
        WithProperties("""
set -ex
cd buildbot
chmod -cR go+r debs
sudo apt-get update
mysql -uroot -prootpass -e "use mytest; select * from t"
mysql -uroot -prootpass -e "use mytest; set global innodb_file_per_table=0; drop table if exists upgrade_test; create table upgrade_test (pk int primary key auto_increment, c char(64), v varchar(2048), d date, t time, dt datetime, ts timestamp) engine=InnoDB; begin; insert into upgrade_test values (null, 'test', 'test', date(now()), time(now()), now(), now());  insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; commit" --force
GALERA=`case '%(branch)s' in *galera* | *5.5-hf*) echo galera- ;; esac`
mysql -uroot -prootpass --skip-column-names -e "select @@version" | awk -F'-' '{ print $1 }' > /tmp/version.old
mysql -uroot -prootpass -e "CREATE DATABASE autoinc; CREATE TABLE autoinc.t_autoinc(a SERIAL) ENGINE=InnoDB SELECT 42 a"
mysql -uroot -prootpass -e "CREATE TABLE autoinc.t_autoinc2(a SERIAL) ENGINE=InnoDB; BEGIN; INSERT INTO autoinc.t_autoinc2 VALUES (NULL),(NULL); ROLLBACK; SHOW CREATE TABLE autoinc.t_autoinc2 \G"
sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated -y mariadb-${GALERA}server mariadb-${GALERA}test"
mysql -uroot -prootpass -e "select @@version, @@version_comment"
mysql -uroot -prootpass --skip-column-names -e "select @@version" | awk -F'-' '{ print $1 }' > /tmp/version.new
mysql -uroot -prootpass --skip-column-names -e "INSERT INTO autoinc.t_autoinc SET a=NULL;  SELECT COUNT(*) Expect_2 FROM autoinc.t_autoinc WHERE a>=42"
echo "Prior to MDEV-6076, the next SELECT would return 1. After MDEV-6076, it should be 3"
mysql -uroot -prootpass --skip-column-names -e "INSERT INTO autoinc.t_autoinc2 VALUES (NULL); SELECT * FROM autoinc.t_autoinc2"
# Version has changed after upgrade
! diff -u  /tmp/version.old  /tmp/version.new
sudo cat /var/lib/mysql/mysql_upgrade_info | awk -F'-' '{ print $1 }' > /tmp/version.upgrade
# mysql_upgrade is run automatically in deb packages
#diff -u /tmp/version.new /tmp/version.upgrade
cat /tmp/version.new
cat /tmp/version.upgrade

case "%(systemdCapability)s" in
yes)
  ls -l /lib/systemd/system/mariadb.service
  ls -l /etc/systemd/system/mariadb.service.d/migrated-from-my.cnf-settings.conf
  ls -l /etc/init.d/mysql
  systemctl --no-pager status mariadb.service
  systemctl --no-pager status mariadb
  systemctl --no-pager status mysql
  systemctl --no-pager status mysqld
  systemctl --no-pager is-enabled mariadb
  sudo systemctl --no-pager restart mariadb
  systemctl --no-pager status mariadb
  sudo journalctl -lxn 100 --no-pager | grep mysqld
  # It does not do the same as systemctl now
  # /etc/init.d/mysql status
  ;;
no)
  echo "Steps related to systemd will be skipped"
  ;;
*)
  echo "It should never happen, check your configuration (systemdCapability property is not set or is set to a wrong value)"
  ;;
esac
mysql -uroot -prootpass -e "use mytest; select * from t; select count(*) from upgrade_test"
"""),
        "! rm -f daemon.log; (sudo cat /var/log/daemon.log || sudo cat /var/log/syslog) >daemon.log",
        "!= rm -f daemon.log; scp -P "+port+" "+kvm_scpopt+" buildbot@localhost:daemon.log ."]))

    deb_fact.addStep(Test(
# MDEV-11355 workaround
#        descriptionDone=["test", "minor", "dist-upgrade"],
# Only run minor upgrade on main trees, because development trees may have old versions
        name="upgrade3",
        doStepIf=(lambda(step): isMainTree(step) and branch_has_previous_minor_versions(step) and not branch_is_enterprise(step) and (version_name != "sid" or branch_is_10_1_or_later(step))),
        warningPattern=".*Upgrade warning:.*",
        description=["testing", "minor", "upgrade"],
        descriptionDone=["minor", "upgrade"],
        logfiles={"kernel": "kernel_"+port+".log", "syslog": "daemon.log"},
#        warningPattern=impossibleRe,
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2"] + args + ["--logfile=kernel_"+port+".log", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" "+kvm_scpopt+" debs buildbot@localhost:buildbot/",
	"sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup",
	"sudo rm -rf /tmp/VERSION /tmp/GALERA",
        WithProperties("sh -c \"echo '%(branch)s' | sed -e \\\"s/.*\\\\(5\\\\.[1-356]\\\\|10\\\\.[0123]\\\\).*/\\\\1/\\\"\" > /tmp/VERSION"),
	WithProperties("sh -c \"case '%(branch)s' in *galera* | *5.5-hf*) echo \\\"galera-\\\" ;; *) echo \\\"\\\" ;; esac\" > /tmp/GALERA"),
	" dpkg -l | { grep -iE 'maria|mysql|galera' || true; } ",
	"sudo sh -c \"echo 'deb http://mirror2.hs-esslingen.de/mariadb/repo/$(cat /tmp/VERSION)/"+dist_name+" "+version_name+" main' >> /etc/apt/sources.list\"",
	WithProperties("""
set -ex

# MariaDB version
mariadb_version=`echo "%(branch)s" | sed -e "s/.*\(5\.[1-356]\|10\.[0-9]\).*/\\1/"`

# Codename: jessie, trusty etc.
version_name=`lsb_release -c | awk '{print $2}'`

# Distributor ID: debian or ubuntu
dist_name=`lsb_release -i | awk '{print tolower($3)}'`

# Architecture
arch=`uname -m`

sudo sh -c "echo 'Package: *' > /etc/apt/preferences.d/release"
sudo sh -c "echo 'Pin: origin mirror2.hs-esslingen.de' >> /etc/apt/preferences.d/release"
sudo sh -c "echo 'Pin-Priority: 1000' >> /etc/apt/preferences.d/release"

sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup
sudo sh -c 'grep -v "^deb file" /etc/apt/sources.list.backup | grep -v "^deb-src file" > /etc/apt/sources.list'
sudo apt-get update

# Check whether the previous release is available

if ! apt-cache search mariadb-server | grep "mariadb-server-$mariadb_version"
then
  echo "Upgrade warning"": MariaDB server $mariadb_version for $dist_name $version_name $arch was not found in repositories"
  exit
fi

sudo sh -c 'DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated -y mariadb-$(cat /tmp/GALERA)server'
mysql -uroot -prootpass --skip-column-names -e "select engine, support, transactions, savepoints from information_schema.engines" | sort > /tmp/engines.old
mysql -uroot -prootpass --skip-column-names -e "show plugins" | sort > /tmp/plugins.old
mysql -uroot -prootpass --skip-column-names -e "select @@version" | awk -F'-' '{ print $1 }' > /tmp/version.old
mysql -uroot -prootpass -e "CREATE DATABASE autoinc; CREATE TABLE autoinc.t_autoinc(a SERIAL) ENGINE=InnoDB SELECT 42 a"
mysql -uroot -prootpass -e "CREATE TABLE autoinc.t_autoinc2(a SERIAL) ENGINE=InnoDB; BEGIN; INSERT INTO autoinc.t_autoinc2 VALUES (NULL),(NULL); ROLLBACK; SHOW CREATE TABLE autoinc.t_autoinc2 \G"
# MDEV-11355 workaround
#sudo sh -c "grep 'file:' /etc/apt/sources.list.backup > /etc/apt/sources.list"

chmod -cR go+r ~/buildbot/debs
sudo cp /etc/apt/sources.list.backup /etc/apt/sources.list
sudo rm /etc/apt/preferences.d/release
sudo apt-get update
# MDEV-11355 workaround
#sudo sh -c 'DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get dist-upgrade --allow-unauthenticated -y'
sudo sh -c 'DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated -y mariadb-$(cat /tmp/GALERA)server'
mysql -uroot -prootpass -e "select @@version, @@version_comment"
mysql -uroot -prootpass --skip-column-names -e "select @@version" | awk -F'-' '{ print $1 }' > /tmp/version.new
mysql -uroot -prootpass --skip-column-names -e "INSERT INTO autoinc.t_autoinc SET a=NULL;  SELECT COUNT(*) Expect_2 FROM autoinc.t_autoinc WHERE a>=42"
echo "Prior to MDEV-6076, the next SELECT would return 1. After MDEV-6076, it should be 3"
mysql -uroot -prootpass --skip-column-names -e "INSERT INTO autoinc.t_autoinc2 VALUES (NULL); SELECT * FROM autoinc.t_autoinc2"
sudo cat /var/lib/mysql/mysql_upgrade_info | awk -F'-' '{ print $1 }' > /tmp/version.upgrade
# mysql_upgrade is run automatically in deb packages

case "%(systemdCapability)s" in
yes)
  ls -l /lib/systemd/system/mariadb.service
  ls -l /etc/systemd/system/mariadb.service.d/migrated-from-my.cnf-settings.conf
  ls -l /etc/init.d/mysql
  systemctl --no-pager status mariadb.service
  systemctl --no-pager status mariadb
  systemctl --no-pager status mysql
  systemctl --no-pager status mysqld
  systemctl --no-pager is-enabled mariadb
  sudo systemctl --no-pager restart mariadb
  systemctl --no-pager status mariadb
  sudo journalctl -lxn 100 --no-pager | grep mysqld
  # It does not do the same as systemctl now
  # /etc/init.d/mysql status
  ;;
no)
  echo "Steps related to systemd will be skipped"
  ;;
*)
  echo "It should never happen, check your configuration (systemdCapability property is not set or is set to a wrong value)"
  ;;
esac

mysql -uroot -prootpass --skip-column-names -e "select engine, support, transactions, savepoints from information_schema.engines" | sort > /tmp/engines.new
mysql -uroot -prootpass --skip-column-names -e "show plugins" | sort > /tmp/plugins.new

cat /tmp/version.old
cat /tmp/version.new
cat /tmp/engines.old
cat /tmp/engines.new
cat /tmp/plugins.old
cat /tmp/plugins.new
cat /tmp/version.upgrade

case '%(branch)s' in
*10.2*)
  echo "Until 10.2 is GA, the list of plugins/engines might be unstable, skipping the check"
  ;;
*)
  diff -u /tmp/engines.old /tmp/engines.new
  diff -u /tmp/plugins.old /tmp/plugins.new
  ;;
esac
echo "The next line must show a difference between versions, otherwise it's a failure"
echo "It can be a false positive if we forgot to bump version after release,"
echo "or if the tree is based on an old version"
! diff -u /tmp/version.old /tmp/version.new
"""),
	"sudo rm -rf /tmp/engines.old /tmp/engines.new /tmp/plugins.old /tmp/plugins.new /tmp/version.old /tmp/version.new /tmp/version.upgrade /tmp/GALERA /tmp/VERSION",
        "! rm -f daemon.log; (sudo cat /var/log/daemon.log || sudo cat /var/log/syslog) >daemon.log",
        "!= rm -f daemon.log; scp -P "+port+" "+kvm_scpopt+" buildbot@localhost:daemon.log ."]))

# Disabled because of MDEV-11978
    deb_fact.addStep(Test(
        name="upgrade4",
#        doStepIf=(lambda(step): version_name == "jessie" and step.getProperty("branch") == "10.1"),
	doStepIf=False,
        description=["testing", "upgrade", "from", "Debian's", "packages"],
        descriptionDone=["upgrade", "from", "Debian's", "packages"],
        logfiles={"kernel": "kernel_"+port+".log", "syslog": "daemon.log"},
        warningPattern=impossibleRe,
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2"] + args + ["--logfile=kernel_"+port+".log", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" "+kvm_scpopt+" debs buildbot@localhost:buildbot/",
	WithProperties("""
set -ex
dpkg -l | { grep -iE 'maria|mysql|galera' || true; }

sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup
sudo sh -c 'grep -v "^deb file" /etc/apt/sources.list.backup | grep -v "^deb-src file" > /etc/apt/sources.list'
sudo apt-get update 1>/dev/null

sudo sh -c 'DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated -y mariadb-server mariadb-client mariadb-test'
dpkg -l | grep -iE 'maria|mysql|galera'

# Some debian packages have unix_socket authentication for local root,
# while others (e.g. 10.0 on jessie) have old-fashion password authentication.
# In the latter case debconf-set-selections will be used upon installation.
# To avoid distinguishing between these two cases, we will first connect as root
# under sudo, but using the password from debconf. If the installation uses unix_socket,
# the password will be ignored and sudo will allow to connect as system root.
# If the installation uses password authentication, sudo won't matter, and the connection
# will use the password. After that, we will create a password-authenticated super-user

sudo mysql -uroot -prootpass -e "create user admin@localhost identified by 'admin'; grant all on *.* to admin@localhost"
mysql -uadmin -padmin --skip-column-names -e "select engine, support, transactions, savepoints from information_schema.engines" | sort > /tmp/engines.old
mysql -uadmin -padmin --skip-column-names -e "show plugins" | sort > /tmp/plugins.old
mysql -uadmin -padmin --skip-column-names -e "select @@version" | awk -F'-' '{ print $1 }' > /tmp/version.old
mysql -uadmin -padmin -e "CREATE DATABASE autoinc; CREATE TABLE autoinc.t_autoinc(a SERIAL) ENGINE=InnoDB SELECT 42 a"
mysql -uadmin -padmin -e "CREATE TABLE autoinc.t_autoinc2(a SERIAL) ENGINE=InnoDB; BEGIN; INSERT INTO autoinc.t_autoinc2 VALUES (NULL),(NULL); ROLLBACK; SHOW CREATE TABLE autoinc.t_autoinc2 \G"

chmod -cR go+r ~/buildbot/debs

# Detect the MariaDB version under test from the package name
# e.g. mariadb-server_5.5.55+maria-1~trusty_all.deb

mariadb_version=`ls ~/buildbot/debs/binary/mariadb-server*all.deb | sed -e 's/.*mariadb-server_\([0-9]*\.[0-9]*\.[0-9]*\)+maria.*/\\1/'`
major_version=`echo $mariadb_version | sed -e 's/^\([0-9]*\.[0-9]*\)\.[0-9]*$/\\1/'`
echo $mariadb_version > /tmp/version.target

echo "We will be upgrading to MariaDB $major_version ($mariadb_version)"

sudo mv /etc/apt/sources.list.backup /etc/apt/sources.list

case $major_version in
10.[1-9])
  # Add MariaDB repo to the source list, because the installation might need galera library
  sudo sh -c "echo 'deb http://mirror2.hs-esslingen.de/mariadb/repo/$major_version/"""+dist_name+""" """+version_name+""" main' >> /etc/apt/sources.list"
  ;;
esac

# Not sure it works
sudo sh -c "echo 'Package: *' > /etc/apt/preferences.d/release"
sudo sh -c "echo 'Pin: origin \"\"' >> /etc/apt/preferences.d/release"
sudo sh -c "echo 'Pin-Priority: 1001' >> /etc/apt/preferences.d/release"

sudo apt-get update 1>/dev/null

sudo sh -c 'DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated -y mariadb-server mariadb-client mariadb-test'

mysql -uadmin -padmin -e "select @@version, @@version_comment"
mysql -uadmin -padmin --skip-column-names -e "select @@version" | awk -F'-' '{ print $1 }' > /tmp/version.new
mysql -uadmin -padmin --skip-column-names -e "INSERT INTO autoinc.t_autoinc SET a=NULL;  SELECT COUNT(*) Expect_2 FROM autoinc.t_autoinc WHERE a>=42"
echo "Prior to MDEV-6076, the next SELECT would return 1. After MDEV-6076, it should be 3"
mysql -uadmin -padmin --skip-column-names -e "INSERT INTO autoinc.t_autoinc2 VALUES (NULL); SELECT * FROM autoinc.t_autoinc2"
sudo cat /var/lib/mysql/mysql_upgrade_info | awk -F'-' '{ print $1 }' > /tmp/version.upgrade
# mysql_upgrade is run automatically in deb packages

echo "Checking systemd capability"
case "%(systemdCapability)s" in
yes)
  ls -l /lib/systemd/system/mariadb.service
  ls -l /etc/systemd/system/mariadb.service.d/migrated-from-my.cnf-settings.conf
  ls -l /etc/init.d/mysql
  systemctl --no-pager status mariadb.service
  systemctl --no-pager status mariadb
  systemctl --no-pager status mysql
  systemctl --no-pager status mysqld
  systemctl --no-pager is-enabled mariadb
  sudo systemctl --no-pager restart mariadb
  systemctl --no-pager status mariadb
  sudo journalctl -lxn 100 --no-pager | grep mysqld
  # It does not do the same as systemctl now
  # /etc/init.d/mysql status
  ;;
no)
  echo "Steps related to systemd will be skipped"
  ;;
*)
  echo "It should never happen, check your configuration (systemdCapability property is not set or is set to a wrong value)"
  ;;
esac

mysql -uadmin -padmin --skip-column-names -e "select engine, support, transactions, savepoints from information_schema.engines" | sort > /tmp/engines.new
mysql -uadmin -padmin --skip-column-names -e "show plugins" | sort > /tmp/plugins.new

cat /tmp/version.old
cat /tmp/version.new
cat /tmp/version.target
cat /tmp/engines.old
cat /tmp/engines.new
cat /tmp/plugins.old
cat /tmp/plugins.new
cat /tmp/version.upgrade

echo "The next line must show a difference between versions, otherwise it's a failure"
echo "It can be a false positive if we forgot to bump version after release,"
echo "or if the tree is based on an old version"
! diff -u /tmp/version.old /tmp/version.new

echo "Also make sure that we installed the version which we expected"
diff -u /tmp/version.target /tmp/version.new
#echo "And check that we haven't lost any engines or plugins"
#diff -u /tmp/engines.old /tmp/engines.new
#diff -u /tmp/plugins.old /tmp/plugins.new
"""),
        "! rm -f daemon.log; (sudo cat /var/log/daemon.log || sudo cat /var/log/syslog) >daemon.log",
        "!= rm -f daemon.log; scp -P "+port+" "+kvm_scpopt+" buildbot@localhost:daemon.log ."]))

    deb_fact.addStep(getMTR(
            name="mtr",
            doStepIf=(lambda(step): branch_is_10_1_or_later(step) or version_name != "sid"),
            description=["running", "default", "MTR", "suites"],
            descriptionDone=["default", "MTR", "suites"],
            test_type="nm",
            test_info="Normal run, no --ps-protocol",
            logfiles={"kernel": "kernel_"+port+".log", "syslog": "daemon.log"},
            mtr_subdir=".",    # Where we scp vardir to
            env={"TERM": "vt102"},
            command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2"] + args + ["--logfile=kernel_"+port+".log", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" "+kvm_scpopt+" debs buildbot@localhost:buildbot/",
        "sudo rm -rf /tmp/VERSION",
        WithProperties("sh -c \"echo '%(branch)s' | sed -e \\\"s/.*\\\\(5\\\\.[1-356]\\\\|10\\\\.[0123]\\\\).*/\\\\1/\\\" | sed -e \\\"s/10\\\\.2/10\\\\.1/\\\"\" > /tmp/VERSION"),
        WithProperties("case '%(branch)s' in *galera* | *5.5-hf* | *10.[123]*) sudo sh -c \"echo 'deb http://yum.mariadb.org/galera/repo/deb "+version_name+" main' > /etc/apt/sources.list.d/galera-test-repo.list\" ;; esac"),
        WithProperties("case '%(branch)s' in *galera*) sudo sh -c \"echo 'deb http://mirror2.hs-esslingen.de/mariadb/repo/$(cat /tmp/VERSION)/"+dist_name+" "+version_name+" main' > /etc/apt/sources.list.d/mariadb-test-repo.list\" ;; esac"),
        WithProperties("""
set -ex
cd buildbot
chmod -cR go+r debs

# MariaDB version
mariadb_version=`echo "%(branch)s" | sed -e "s/.*\(5\.[1-356]\|10\.[0-9]\).*/\\1/"`
echo "MariaDB version: $mariadb_version"

# Codename: jessie, trusty etc.
version_name=`lsb_release -c | awk '{print $2}'`

# Distributor ID: debian or ubuntu
dist_name=`lsb_release -i | awk '{print tolower($3)}'`

echo "System: $dist_name $version_name"

# Starting from 10.1, we'll install all MariaDB* packages rather than only server and test.
# It will allow running tests for plugins which come in separate packages.
# Before 10.1 it is more complicated because of Galera-server which conflicts with the regular server,
# so we won't touch earlier branches

case "%(branch)s" in
*galera*|*5.5-hf*)
# Not sure why 5.5-hf is here, but that's how it was earlier
  packages_to_install="mariadb-galera-server mariadb-galera-test"
  ;;
*5.5*|*10.0*)
  packages_to_install="mariadb-server mariadb-test"
  ;;
*)
  cd debs/binary
  packages_to_install=`ls *.deb | awk -F'_' '{print $1}' | xargs`
  ;;
esac

sudo apt-get update
sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated -y $packages_to_install"

cd /usr/share/mysql/mysql-test

# Check whether FEEDBACK plugin is currently usable
if wget --timeout=20 --tries=1 https://mariadb.org/feedback_plugin -O /tmp/feedback_page
then
  feedback_plugin=1
  echo "Feedback page okay, enabling the plugin"
else
  feedback_plugin=0
  echo "Pre-MTR warning"": Feedback page is not okay, disabling the plugin"
fi
rm -f /tmp/feedback_page

MTR_FEEDBACK_PLUGIN=$feedback_plugin perl mysql-test-run.pl  --verbose-restart --vardir="$(readlink -f /dev/shm/var)" --parallel=4 --force --retry=3 --max-save-core=0 --max-save-datadir=1
"""),
	"sudo rm -rf /tmp/VERSION /tmp/GALERA",
        "! rm -f daemon.log; (sudo cat /var/log/daemon.log || sudo cat /var/log/syslog) >daemon.log",
        "!= rm -f daemon.log; scp -P "+port+" "+kvm_scpopt+" buildbot@localhost:daemon.log .",
        WithProperties(
              "!= rm -Rf var/ ; scp -rp -P " + port + " " + kvm_scpopt +
              " buildbot@localhost:/dev/shm/var/ . || :")]))

    return {'name': name, 'slavenames': slavenames, 'builddir': name, 'factory': deb_fact,
            "nextBuild": myNextBuild,
            "category": catg}


#bld_kvm_deb_hardy_amd64 = getDebBuilder("kvm-deb-hardy-amd64", "vm-hardy-amd64", "2228", "qemu64", "ubuntu", "hardy")
#bld_kvm_deb_hardy_x86 = getDebBuilder("kvm-deb-hardy-x86", "vm-hardy-i386", "2229", "qemu64", "ubuntu", "hardy")
#bld_kvm_deb_intrepid_amd64 = getDebBuilder("kvm-deb-intrepid-amd64", "vm-intrepid-amd64", "2230", "qemu64")
#bld_kvm_deb_intrepid_x86 = getDebBuilder("kvm-deb-intrepid-x86", "vm-intrepid-i386", "2231", "qemu64")
#bld_kvm_deb_karmic_amd64 = getDebBuilder("kvm-deb-karmic-amd64", "vm-karmic-amd64", "2232", "qemu64")
#bld_kvm_deb_karmic_x86 = getDebBuilder("kvm-deb-karmic-x86", "vm-karmic-i386", "2233", "qemu64")
#bld_kvm_deb_jaunty_amd64 = getDebBuilder("kvm-deb-jaunty-amd64", "vm-jaunty-amd64", "2235", "qemu64")
#bld_kvm_deb_jaunty_x86 = getDebBuilder("kvm-deb-jaunty-x86", "vm-jaunty-i386-deb", "2236", "qemu64")
#bld_kvm_deb_lucid_amd64 = getDebBuilder("kvm-deb-lucid-amd64", "vm-lucid-amd64", "2238", "qemu64", "ubuntu", "lucid")
#bld_kvm_deb_lucid_x86 = getDebBuilder("kvm-deb-lucid-x86", "vm-lucid-i386", "2239", "qemu64", "ubuntu", "lucid")
#bld_kvm_deb_maverick_amd64 = getDebBuilder("kvm-deb-maverick-amd64", "vm-maverick-amd64", "2246", "qemu64", "ubuntu", "maverick")
#bld_kvm_deb_maverick_x86 = getDebBuilder("kvm-deb-maverick-x86", "vm-maverick-i386", "2247", "qemu64", "ubuntu", "maverick")
#bld_kvm_deb_natty_amd64 = getDebBuilder("kvm-deb-natty-amd64", "vm-natty-amd64", "2255", "qemu64", "ubuntu", "natty")
#bld_kvm_deb_natty_x86 = getDebBuilder("kvm-deb-natty-x86", "vm-natty-i386", "2256", "qemu64", "ubuntu", "natty")
#bld_kvm_deb_oneiric_amd64 = getDebBuilder("kvm-deb-oneiric-amd64", "vm-oneiric-amd64", "2257", "qemu64", "ubuntu", "oneiric")
#bld_kvm_deb_oneiric_x86 = getDebBuilder("kvm-deb-oneiric-x86", "vm-oneiric-i386", "2258", "qemu64", "ubuntu", "oneiric")
# Do not run deb-precise-amd64 on terrier2, I saw a "BUG: soft lockup" happen on it.
# There was bb05 here, removed (temporarily?)
#bld_kvm_deb_precise_amd64 = getDebBuilder("kvm-deb-precise-amd64", "vm-precise-amd64", "2259", "qemu64", "ubuntu", "precise", slavenames=["bb01", "bb02", "bb03", "bb05", "aidi"], ramdisk=False)
#bld_kvm_deb_precise_x86 = getDebBuilder("kvm-deb-precise-x86", "vm-precise-i386", "2260", "qemu64", "ubuntu", "precise")
#bld_kvm_deb_quantal_amd64 = getDebBuilder("kvm-deb-quantal-amd64", "vm-quantal-amd64", "2275", "qemu64", "ubuntu", "quantal", ramdisk=False)
#bld_kvm_deb_quantal_x86 = getDebBuilder("kvm-deb-quantal-x86", "vm-quantal-i386", "2276", "qemu64", "ubuntu", "quantal", ramdisk=False)
#bld_kvm_deb_raring_amd64 = getDebBuilder("kvm-deb-raring-amd64", "vm-raring-amd64", "2279", "qemu64", "ubuntu", "raring")
#bld_kvm_deb_raring_x86 = getDebBuilder("kvm-deb-raring-x86", "vm-raring-i386", "2280", "qemu64", "ubuntu", "raring")
#bld_kvm_deb_saucy_amd64 = getDebBuilder("kvm-deb-saucy-amd64", "vm-saucy-amd64", "2287", "qemu64", "ubuntu", "saucy", ramdisk=False)
#bld_kvm_deb_saucy_x86 = getDebBuilder("kvm-deb-saucy-x86", "vm-saucy-i386", "2288", "qemu64", "ubuntu", "saucy", ramdisk=False)
bld_kvm_deb_trusty_amd64 = getDebBuilder("kvm-deb-trusty-amd64", "vm-trusty-amd64", "2293", "qemu64", "ubuntu", "trusty", ramdisk=False)
bld_kvm_deb_trusty_x86 = getDebBuilder("kvm-deb-trusty-x86", "vm-trusty-i386", "2294", "qemu64", "ubuntu", "trusty", ramdisk=False)
bld_kvm_deb_trusty_ppc64le = getDebBuilder("kvm-deb-trusty-ppc64le", "vm-trusty-ppc64le", "2332", "POWER8", "ubuntu", "trusty", slavenames=["p801"], ramdisk=False)
#bld_kvm_deb_utopic_amd64 = getDebBuilder("kvm-deb-utopic-amd64", "vm-utopic-amd64", "2305", "qemu64", "ubuntu", "utopic", slavenames=["bb01", "bb02"], ramdisk=False, catg="experimental")
#bld_kvm_deb_utopic_x86 = getDebBuilder("kvm-deb-utopic-x86", "vm-utopic-i386", "2306", "qemu64", "ubuntu", "utopic", slavenames=["bb01", "bb02"], ramdisk=False, catg="experimental")
#bld_kvm_deb_vivid_amd64 = getDebBuilder("kvm-deb-vivid-amd64", "vm-vivid-amd64", "2313", "qemu64", "ubuntu", "vivid", slavenames=["bb01", "bb02", "bb03"], ramdisk=False)
#bld_kvm_deb_vivid_x86 = getDebBuilder("kvm-deb-vivid-x86", "vm-vivid-i386", "2314", "qemu64", "ubuntu", "vivid", slavenames=["bb01", "bb02", "bb03"], ramdisk=False)
#bld_kvm_deb_wily_amd64 = getDebBuilder("kvm-deb-wily-amd64", "vm-wily-amd64", "2319", "qemu64", "ubuntu", "wily", slavenames=["bb01", "bb02", "bb03"], ramdisk=False)
#bld_kvm_deb_wily_x86 = getDebBuilder("kvm-deb-wily-x86", "vm-wily-i386", "2320", "qemu64", "ubuntu", "wily", slavenames=["bb01", "bb02", "bb03"], ramdisk=False)
# There was bb05 here, removed (temporarily?)
bld_kvm_deb_xenial_amd64 = getDebBuilder("kvm-deb-xenial-amd64", "vm-xenial-amd64", "2323", "qemu64", "ubuntu", "xenial", slavenames=["bb01", "bb02", "bb03", "bb05", "aidi"], ramdisk=False)
# There was bb05 here, removed (temporarily?)
bld_kvm_deb_xenial_x86 = getDebBuilder("kvm-deb-xenial-x86", "vm-xenial-i386", "2324", "qemu64", "ubuntu", "xenial", slavenames=["bb01", "bb02", "bb03", "bb05", "aidi"], ramdisk=False)
bld_kvm_deb_xenial_ppc64le = getDebBuilder("kvm-deb-xenial-ppc64le", "vm-xenial-ppc64le", "2335", "POWER8", "ubuntu", "xenial", slavenames=["p801"], ramdisk=False)
# There was bb05 here, removed (temporarily?)
bld_kvm_deb_yakkety_amd64 = getDebBuilder("kvm-deb-yakkety-amd64", "vm-yakkety-amd64", "2329", "qemu64", "ubuntu", "yakkety", slavenames=["bb01", "bb02", "bb03", "bb05", "aidi"], ramdisk=False)
# There was bb05 here, removed (temporarily?)
bld_kvm_deb_yakkety_x86 = getDebBuilder("kvm-deb-yakkety-x86", "vm-yakkety-i386", "2330", "qemu64", "ubuntu", "yakkety", slavenames=["bb01", "bb02", "bb03", "bb05", "aidi"], ramdisk=False)

bld_kvm_deb_zesty_amd64 = getDebBuilder("kvm-deb-zesty-amd64", "vm-zesty-amd64", "2350", "qemu64", "ubuntu", "zesty", slavenames=["bb01", "bb02", "bb03", "bb05", "aidi"], ramdisk=False)
bld_kvm_deb_zesty_x86 = getDebBuilder("kvm-deb-zesty-x86", "vm-zesty-i386", "2351", "qemu64", "ubuntu", "zesty", slavenames=["bb01", "bb02", "bb03", "bb05", "aidi"], ramdisk=False)

#bld_kvm_deb_debian5_amd64 = getDebBuilder("kvm-deb-debian5-amd64", "vm-debian5-amd64", "2234", "qemu64", "debian", "lenny")
#bld_kvm_deb_debian5_x86 = getDebBuilder("kvm-deb-debian5-x86", "vm-debian5-i386", "2226", "qemu64", "debian", "lenny")

#bld_kvm_deb_debian6_amd64 = getDebBuilder("kvm-deb-debian6-amd64", "vm-debian6-amd64", "2244", "qemu64", "debian", "squeeze", ramdisk=False, catg="experimental")
#bld_kvm_deb_debian6_x86 = getDebBuilder("kvm-deb-debian6-x86", "vm-debian6-i386", "2245", "qemu64", "debian", "squeeze", ramdisk=False, catg="experimental")

bld_kvm_deb_wheezy_amd64 = getDebBuilder("kvm-deb-wheezy-amd64", "vm-wheezy-amd64", "2269", "qemu64", "debian", "wheezy", ramdisk=False)
bld_kvm_deb_wheezy_x86 = getDebBuilder("kvm-deb-wheezy-x86", "vm-wheezy-i386", "2270", "qemu64", "debian", "wheezy", ramdisk=False)

# There was bb05 here, removed (temporarily?)
bld_kvm_deb_jessie_amd64 = getDebBuilder("kvm-deb-jessie-amd64", "vm-jessie-amd64", "2315", "qemu64", "debian", "jessie", slavenames=["bb01", "bb02", "bb03", "bb05", "aidi"], ramdisk=False)
# There was bb05 here, removed (temporarily?)
bld_kvm_deb_jessie_x86 = getDebBuilder("kvm-deb-jessie-x86", "vm-jessie-i386", "2316", "qemu64", "debian", "jessie", slavenames=["bb01", "bb02", "bb03", "bb05", "aidi"], ramdisk=False)
bld_kvm_deb_jessie_ppc64le = getDebBuilder("kvm-deb-jessie-ppc64le", "vm-jessie-ppc64le", "2336", "POWER8", "debian", "jessie", slavenames=["p801"], ramdisk=False)

# There was bb05 here, removed (temporarily?)
bld_kvm_deb_stretch_amd64 = getDebBuilder("kvm-deb-stretch-amd64", "vm-stretch-amd64", "2333", "qemu64", "debian", "stretch", slavenames=["bb01", "bb02", "bb03", "bb05", "aidi"], ramdisk=False)
# There was bb05 here, removed (temporarily?)
bld_kvm_deb_stretch_x86 =   getDebBuilder("kvm-deb-stretch-x86",   "vm-stretch-i386",  "2334", "qemu64", "debian", "stretch", slavenames=["bb01", "bb02", "bb03", "bb05", "aidi"], ramdisk=False)
bld_kvm_deb_stretch_ppc64le = getDebBuilder("kvm-deb-stretch-ppc64le",   "vm-stretch-ppc64le",  "2339", "POWER8", "debian", "stretch", slavenames=["p801"], ramdisk=False, catg="experimental")

bld_kvm_deb_sid_amd64 = getDebBuilder("kvm-deb-sid-amd64", "vm-sid-amd64", "2295", "qemu64", "debian", "sid", ramdisk=False, catg="experimental")
bld_kvm_deb_sid_x86 = getDebBuilder("kvm-deb-sid-x86", "vm-sid-i386", "2296", "qemu64", "debian", "sid", ramdisk=False, catg="experimental")

# Some serious kvm/kernel problem on debian4, need aggressive retry
#bld_kvm_deb_debian4_amd64 = getDebBuilder("kvm-deb-debian4-amd64", "vm-debian4-amd64", "2240", "qemu64", kvmargs=["--netdev=e1000",  "--kvm-retries=20", "--kvm=-cdrom", "--kvm=/kvm/debian-40r8-amd64-netinst.iso"])
#bld_kvm_deb_debian4_x86 = getDebBuilder("kvm-deb-debian4-x86", "vm-debian4-i386", "2241", "qemu32,-nx", kvmargs=["--netdev=e1000",  "--kvm-retries=20", "--kvm=-cdrom", "--kvm=/kvm/debian-40r8-i386-netinst.iso"])

#-------------------------------------------------------------------------------
# Debian package factory for Galera
#-------------------------------------------------------------------------------
def getGalDebBuilder(name, kvm_image, port, cpu, dist_name, version_name, kvmargs=[], slavenames=kvm_slaves, ramdisk=True):

    kvm_build_image = getGaleraBuildImage(kvm_image)

    args= ["--port="+port, "--user=buildbot", "--smp=4", "--cpu="+cpu, "--startup-timeout=600"] + kvmargs
    if ramdisk:
        args= args + ["--work-image=/dev/shm/vm-tmp-"+port+".qcow2"]
    deb_fact= factory.BuildFactory()
    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    deb_fact.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))
    deb_fact.addStep(ShellCommand(
        description=["rsyncing", "VMs"],
        descriptionDone=["rsync", "VMs"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+kvm_build_image+".qcow2",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-install.qcow2",
                 "/kvm/vms/"]))
    deb_fact.addStep(Compile(
        description=["making", "debs"],
        descriptionDone=["make", "debs"],
        logfiles={"kernel": "kernel_"+port+".log"},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        timeout=3600,
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_build_image+".qcow2"] + args +["--logfile=kernel_"+port+".log", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("""
set -ex
cd buildbot
mkdir -p debs/binary debs/source
chmod -cR go+r debs
git clone -b %(branch)s "https://github.com/MariaDB/galera.git" build
cd build
./scripts/build.sh -p
cp `find ../*.deb -maxdepth 1 -type f` ../debs/binary/
cp `find ../*.changes -maxdepth 1 -type f` ../debs/binary/
cd ../debs
dpkg-scanpackages binary /dev/null | gzip -9c > binary/Packages.gz
dpkg-scansources source /dev/null | gzip -9c > source/Sources.gz
"""),
        "= rm -Rf debs",
        "= scp -r -P "+port+" "+kvm_scpopt+" buildbot@localhost:buildbot/debs .",
        ]))
    addPackageUploadStep(deb_fact, 'debs')
    deb_fact.addStep(Test(
        description=["testing", "install"],
        descriptionDone=["test", "install"],
        logfiles={"kernel": "kernel_"+port+".log", "syslog": "daemon.log"},
        warningPattern=impossibleRe,
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2"] + args + ["--logfile=kernel_"+port+".log", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" "+kvm_scpopt+" debs buildbot@localhost:buildbot/",
        WithProperties("""
set -ex
cd buildbot
chmod -cR go+r debs
sudo apt-get update
sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated -y galera-3 galera-arbitrator-3"
garbd --version
"""),
        "! rm -f daemon.log; (sudo cat /var/log/daemon.log || sudo cat /var/log/syslog) >daemon.log",
        "!= rm -f daemon.log; scp -P "+port+" "+kvm_scpopt+" buildbot@localhost:daemon.log ."]))

    return {'name': name, 'slavenames': slavenames, 'builddir': name, 'factory': deb_fact,
            "nextBuild": myNextBuild,
            "category": "galera"}

#gal_bld_kvm_deb_lucid_amd64 = getGalDebBuilder("kvm-deb-lucid-amd64-gal", "vm-lucid-amd64",
#                                     "3020", "qemu64", "ubuntu", "lucid")
#gal_bld_kvm_deb_lucid_x86 = getGalDebBuilder("kvm-deb-lucid-x86-gal", "vm-lucid-i386",
#                                     "3021", "qemu64", "ubuntu", "lucid")
gal_bld_kvm_deb_precise_amd64 = getGalDebBuilder("kvm-deb-precise-amd64-gal", "vm-precise-amd64",
                                     "3022", "qemu64", "ubuntu", "precise", ramdisk=False)
gal_bld_kvm_deb_precise_x86 = getGalDebBuilder("kvm-deb-precise-x86-gal", "vm-precise-i386",
                                     "3023", "qemu64", "ubuntu", "precise")
gal_bld_kvm_deb_trusty_amd64 = getGalDebBuilder("kvm-deb-trusty-amd64-gal", "vm-trusty-amd64",
                                     "3024", "qemu64", "ubuntu", "trusty", ramdisk=False)
gal_bld_kvm_deb_trusty_x86 = getGalDebBuilder("kvm-deb-trusty-x86-gal", "vm-trusty-i386",
                                     "3025", "qemu64", "ubuntu", "trusty", ramdisk=False)
gal_bld_kvm_deb_trusty_ppc64le = getGalDebBuilder("kvm-deb-trusty-ppc64le-gal", "vm-trusty-ppc64le",
                                     "3055", "POWER8", "ubuntu", "trusty", slavenames=["p801"], ramdisk=False)
#gal_bld_kvm_deb_debian6_amd64 = getGalDebBuilder("kvm-deb-debian6-amd64-gal", "vm-debian6-amd64",
#                                     "3026", "qemu64", "debian", "squeeze", ramdisk=False)
#gal_bld_kvm_deb_debian6_x86 = getGalDebBuilder("kvm-deb-debian6-x86-gal", "vm-debian6-i386",
#                                     "3027", "qemu64", "debian", "squeeze", ramdisk=False)
gal_bld_kvm_deb_wheezy_amd64 = getGalDebBuilder("kvm-deb-wheezy-amd64-gal", "vm-wheezy-amd64",
                                     "3028", "qemu64", "debian", "wheezy", ramdisk=False)
gal_bld_kvm_deb_wheezy_x86 = getGalDebBuilder("kvm-deb-wheezy-x86-gal", "vm-wheezy-i386",
                                     "3029", "qemu64", "debian", "wheezy", ramdisk=False)
gal_bld_kvm_deb_sid_amd64 = getGalDebBuilder("kvm-deb-sid-amd64-gal", "vm-sid-amd64",
                                     "3030", "qemu64", "debian", "sid", ramdisk=False)
gal_bld_kvm_deb_sid_x86 = getGalDebBuilder("kvm-deb-sid-x86-gal", "vm-sid-i386",
                                     "3031", "qemu64", "debian", "sid", ramdisk=False)
#gal_bld_kvm_deb_utopic_amd64 = getGalDebBuilder("kvm-deb-utopic-amd64-gal", "vm-utopic-amd64",
#                                     "3032", "qemu64", "debian", "utopic", ramdisk=False)
#gal_bld_kvm_deb_utopic_x86 = getGalDebBuilder("kvm-deb-utopic-x86-gal", "vm-utopic-i386",
#                                     "3033", "qemu64", "debian", "utopic", ramdisk=False)
#gal_bld_kvm_deb_vivid_amd64 = getGalDebBuilder("kvm-deb-vivid-amd64-gal", "vm-vivid-amd64",
#                                     "3034", "qemu64", "debian", "vivid", ramdisk=False)
#gal_bld_kvm_deb_vivid_x86 = getGalDebBuilder("kvm-deb-vivid-x86-gal", "vm-vivid-i386",
#                                     "3035", "qemu64", "debian", "vivid", ramdisk=False)
#gal_bld_kvm_deb_wily_amd64 = getGalDebBuilder("kvm-deb-wily-amd64-gal", "vm-wily-amd64",
#                                     "3038", "qemu64", "debian", "wily", ramdisk=False)
#gal_bld_kvm_deb_wily_x86 = getGalDebBuilder("kvm-deb-wily-x86-gal", "vm-wily-i386",
#                                     "3039", "qemu64", "debian", "wily", ramdisk=False)
gal_bld_kvm_deb_xenial_amd64 = getGalDebBuilder("kvm-deb-xenial-amd64-gal", "vm-xenial-amd64",
                                     "3040", "qemu64", "ubuntu", "xenial", ramdisk=False)
gal_bld_kvm_deb_xenial_x86 = getGalDebBuilder("kvm-deb-xenial-x86-gal", "vm-xenial-i386",
                                     "3041", "qemu64", "ubuntu", "xenial", ramdisk=False)
gal_bld_kvm_deb_xenial_ppc64le = getGalDebBuilder("kvm-deb-xenial-ppc64le-gal", "vm-xenial-ppc64le",
                                     "3049", "POWER8", "ubuntu", "xenial", slavenames=["p801"], ramdisk=False)
gal_bld_kvm_deb_yakkety_amd64 = getGalDebBuilder("kvm-deb-yakkety-amd64-gal", "vm-yakkety-amd64",
                                     "3045", "qemu64", "ubuntu", "yakkety", ramdisk=False)
gal_bld_kvm_deb_yakkety_x86 = getGalDebBuilder("kvm-deb-yakkety-x86-gal", "vm-yakkety-i386",
                                     "3046", "qemu64", "ubuntu", "yakkety", ramdisk=False)
gal_bld_kvm_deb_zesty_amd64 = getGalDebBuilder("kvm-deb-zesty-amd64-gal", "vm-zesty-amd64",
                                     "3059", "qemu64", "ubuntu", "zesty", ramdisk=False)
gal_bld_kvm_deb_zesty_x86 = getGalDebBuilder("kvm-deb-zesty-x86-gal", "vm-zesty-i386",
                                     "3060", "qemu64", "ubuntu", "zesty", ramdisk=False)
gal_bld_kvm_deb_jessie_amd64 = getGalDebBuilder("kvm-deb-jessie-amd64-gal", "vm-jessie-amd64",
                                     "3036", "qemu64", "debian", "jessie", ramdisk=False)
gal_bld_kvm_deb_jessie_x86 = getGalDebBuilder("kvm-deb-jessie-x86-gal", "vm-jessie-i386",
                                     "3037", "qemu64", "debian", "jessie", ramdisk=False)
gal_bld_kvm_deb_jessie_ppc64le = getGalDebBuilder("kvm-deb-jessie-ppc64le-gal", "vm-jessie-ppc64le",
                                     "3050", "POWER8", "debian", "jessie", slavenames=["p801"], ramdisk=False)
gal_bld_kvm_deb_stretch_amd64 = getGalDebBuilder("kvm-deb-stretch-amd64-gal", "vm-stretch-amd64",
                                     "3047", "qemu64", "debian", "stretch", ramdisk=False)
gal_bld_kvm_deb_stretch_x86 = getGalDebBuilder("kvm-deb-stretch-x86-gal", "vm-stretch-i386",
                                     "3048", "qemu64", "debian", "stretch", ramdisk=False)
gal_bld_kvm_deb_stretch_ppc64le = getGalDebBuilder("kvm-deb-stretch-ppc64le-gal", "vm-stretch-ppc64le",
                                     "3053", "POWER8", "debian", "stretch", slavenames=["p801"], ramdisk=False)


def getBintarBuilder(name, kvm_image, port, cpu, ramdisk=True, catg="main"):
    args = ["--port="+port, "--user=buildbot", "--cpu="+cpu, "--smp=4", "--logfile=kernel_"+port+".log"]
    if ramdisk:
        args = args + ["--work-image=/dev/shm/vm-tmp-"+port+".qcow2"]
    bin_fact = factory.BuildFactory()
    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    bin_fact.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))
    bin_fact.addStep(ShellCommand(
        description=["rsyncing", "VMs"],
        descriptionDone=["rsync", "VMs"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-build.qcow2",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-install.qcow2",
                 "/kvm/vms/"]))
    bin_fact.addStep(DownloadSourceTarball())
    bin_fact.addStep(FileDownload(
        mastersrc=WithProperties("%(bakerypath)s"),
        slavedest=WithProperties("%(bakery)s.tar.gz"),
        blocksize=524288,
        doStepIf=branch_is_5_123))
    bin_fact.addStep(ShellCommand(
        description=["getting", ".supp"],
        descriptionDone=["get", ".supp"],
        command=["sh", "-c", WithProperties("""
rm -f compiler_warnings.supp
tar zxf "/tmp/buildcache/%(tarbuildnum)s:%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
ls -l compiler_warnings.supp
exit 0  # best-effort, not fatal if no suppression file
""")]))
    bin_fact.addStep(Compile(
        description=["making", "bintar"],
        descriptionDone=["make", "bintar"],
        timeout=3600,
        logfiles={"kernel": "kernel_"+port+".log"},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command=["runvm"] + args + ["--base-image=/kvm/vms/"+kvm_image+"-build.qcow2", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        ScpSourceIntoVM(port),
        WithProperties("= case '%(branch)s' in *5\\.[123]*) scp -P "+port+" "+kvm_scpopt+" %(bakery)s.tar.gz buildbot@localhost:buildbot/ ;; esac"),
        WithProperties("""
set -ex
cd buildbot
rm -Rf build
case "%(branch)s" in
*5\\.[123]*)
  mkdir build
  cd build
  tar zxf ../%(bakery)s.tar.gz
  cd %(bakery)s
  bakery/autobake51-bintar.sh ../../%(distname)s
  ;;
*)
  tar zxf "%(distname)s"
  mv "%(distdirname)s" build
  cd build
  mkdir mkbin
  cd mkbin
  echo $PATH
  echo $SHELL
  if [ -d $HOME/local/lib ] ; then
    export CMAKE_LIBRARY_PATH="$HOME/local/lib"
  fi
  export JAVA_HOME=/usr/lib/jvm/java
  cmake -DBUILD_CONFIG=mysql_release -DWITH_READLINE=1 ..
  make -j4 package VERBOSE=1
  ;;
esac
basename mariadb-*.tar.gz .tar.gz > ../../bindistname.txt
mv "$(cat ../../bindistname.txt).tar.gz" ../
"""),
        WithProperties("= scp -P "+port+" "+kvm_scpopt+" 'buildbot@localhost:buildbot/build/mariadb-*.tar.gz' ."),
        "= scp -P "+port+" "+kvm_scpopt+" buildbot@localhost:buildbot/bindistname.txt .",
]))
    bin_fact.addStep(SetPropertyFromCommand(
        property="bindistname",
        command=["cat", "bindistname.txt"],
        ))
    addPackageArchiveStep(bin_fact, '"%(bindistname)s.tar.gz"', "%(tarbuildnum)s")
    bin_fact.addStep(getMTR(
        description=["testing", "bintar"],
        descriptionDone=["test", "bintar"],
        logfiles={"kernel": "kernel_"+port+".log"},
        mtr_subdir=".",    # Where we scp vardir to
        env={"TERM": "vt102"},
        command=["runvm"] + args + ["--base-image=/kvm/vms/"+kvm_image+"-install.qcow2", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("= scp -P "+port+" "+kvm_scpopt+" %(bindistname)s.tar.gz buildbot@localhost:buildbot/"),
        WithProperties("""
set -ex
cd buildbot
sudo rm -Rf /usr/local/%(bindistname)s
sudo tar zxf %(bindistname)s.tar.gz -C /usr/local/
cd /usr/local/%(bindistname)s
sudo /usr/sbin/useradd mysql
sudo sudo chown -R mysql .
sudo chgrp -R mysql .
sudo scripts/mysql_install_db --no-defaults --user=mysql
sudo chown -R root .
sudo chown -R mysql data mysql-test
cd mysql-test
sudo su -s /bin/sh -c "perl mysql-test-run.pl  --verbose-restart --force --parallel=4 --retry=3 --mem --max-save-core=0 --max-save-datadir=1" mysql
"""),
        WithProperties("! sudo chmod -R go+rX /usr/local/%(bindistname)s/mysql-test/var/ || :"),
        WithProperties(
              "!= scp -rp -P " + port + " " + kvm_scpopt +
              " buildbot@localhost:/usr/local/%(bindistname)s/mysql-test/var/ . || :")]))

    bin_fact.addStep(getMTR(
        hideStepIf=(lambda results, s: results==SKIPPED),
        doStepIf=(lambda(step): step.getProperty("branch") == "bb-10.2-elenst"),
        description=["testing", "bintar", "on", "build", "VM"],
        descriptionDone=["bintar", "on", "build", "VM"],
        logfiles={"kernel": "kernel_"+port+".log"},
        mtr_subdir=".",    # Where we scp vardir to
        env={"TERM": "vt102"},
        command=["runvm"] + args + ["--base-image=/kvm/vms/"+kvm_image+"-build.qcow2", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("= scp -P "+port+" "+kvm_scpopt+" %(bindistname)s.tar.gz buildbot@localhost:buildbot/"),
        WithProperties("""
set -ex
cd buildbot
sudo rm -Rf /usr/local/%(bindistname)s
sudo tar zxf %(bindistname)s.tar.gz -C /usr/local/
cd /usr/local/%(bindistname)s
sudo /usr/sbin/useradd mysql
sudo sudo chown -R mysql .
sudo chgrp -R mysql .
sudo scripts/mysql_install_db --no-defaults --user=mysql
sudo chown -R root .
sudo chown -R mysql data mysql-test
cd mysql-test
sudo su -s /bin/sh -c "perl mysql-test-run.pl  --verbose-restart --force --parallel=4 --retry=3 --mem --max-save-core=0 --max-save-datadir=1" mysql
"""),
        WithProperties("! sudo chmod -R go+rX /usr/local/%(bindistname)s/mysql-test/var/ || :"),
        WithProperties(
              "!= scp -rp -P " + port + " " + kvm_scpopt +
              " buildbot@localhost:/usr/local/%(bindistname)s/mysql-test/var/ . || :")]))


    return {'name': name, 'slavenames': kvm_slaves, 'builddir': name, 'factory': bin_fact,
            "nextBuild": myNextBuild,
            "category": catg }

#bld_kvm_bintar_hardy_amd64 = getBintarBuilder("kvm-bintar-hardy-amd64", "vm-hardy-amd64", "2227", "qemu64")
#bld_kvm_bintar_hardy_x86 = getBintarBuilder("kvm-bintar-hardy-x86", "vm-hardy-i386", "2222", "qemu64")

#bld_kvm_bintar_precise_amd64 = getBintarBuilder("kvm-bintar-precise-amd64", "vm-precise-amd64", "2267", "qemu64", ramdisk=False)
#bld_kvm_bintar_precise_x86 = getBintarBuilder("kvm-bintar-precise-x86", "vm-precise-i386", "2268", "qemu64")

bld_kvm_bintar_trusty_amd64 = getBintarBuilder("kvm-bintar-trusty-amd64", "vm-trusty-amd64", "2341", "qemu64", ramdisk=False)
bld_kvm_bintar_trusty_x86 = getBintarBuilder("kvm-bintar-trusty-x86", "vm-trusty-i386", "2342", "qemu64", ramdisk=False)

bld_kvm_bintar_quantal_amd64 = getBintarBuilder("kvm-bintar-quantal-amd64", "vm-quantal-amd64", "2281", "qemu64", ramdisk=False)
bld_kvm_bintar_quantal_x86 = getBintarBuilder("kvm-bintar-quantal-x86", "vm-quantal-i386", "2282", "qemu64", ramdisk=False)

bld_kvm_bintar_centos5_amd64 = getBintarBuilder("kvm-bintar-centos5-amd64", "vm-centos5-amd64", "2285", "qemu64", ramdisk=False)
bld_kvm_bintar_centos5_x86 = getBintarBuilder("kvm-bintar-centos5-x86", "vm-centos5-i386", "2286", "qemu64", ramdisk=False)

# def getWinBuilder(name, kvm_image, port1, port2, cpu, kvmargs=[]):
#     args= ["--windows", "--user=buildbot", "--cpu="+cpu, "--smp=4"] + kvmargs
#     bin_fact = factory.BuildFactory()
#     bin_fact.addStep(FileDownload(
#         mastersrc=WithProperties("%(tarballpath)s"),
#         slavedest=WithProperties("%(distname)s")))
#     # Extract the compiler warning suppressions file from the source tarball.
#     bin_fact.addStep(ShellCommand(
#         description=["getting", ".supp"],
#         descriptionDone=["get", ".supp"],
#         command=["sh", "-c", WithProperties("""
# rm -f compiler_warnings.supp
# tar zxf "%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
# exit 0  # best-effort, not fatal if no suppression file
# """)]))
#     bin_fact.addStep(Compile(
#         description=["making", "noinstall"],
#         descriptionDone=["make", "noinstall"],
#         logfiles={"kernel": "kernel_"+port1+".log"},
#         warningPattern=vsWarningPattern,
#         warningExtractor=Compile.warnExtractFromRegexpGroups,
#         suppressionFile=WithProperties("compiler_warnings.supp"),
#         env={"TERM": "vt102"},
#         command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-vs2008.qcow2"] + args + ["--port="+port1, "--logfile=kernel_"+port1+".log", "vm-tmp-"+port1+".qcow2",
#         "rm -Rf buildbot && mkdir buildbot",
#         WithProperties("= scp -P "+port1+" %(distname)s buildbot@localhost:buildbot/"),
#         WithProperties("""
# set -ex
# cd buildbot
# mkdir build
# cd build
# tar zxf ../%(distname)s
# cd $(basename %(distname)s .tar.gz)
# sh win/make_mariadb_win_dist
# basename mariadb-noinstall-*.zip .zip > ../../bindistname.txt
# if fgrep -q 'INCLUDE(CPack)' CMakeLists.txt ; then cpack -C RelWithDebInfo ; else touch MariaDB-0.0.0-win32.exe ; fi
# basename MariaDB-*.exe .exe > ../../exedistname.txt
# """),
#         WithProperties("= scp -P "+port1+" 'buildbot@localhost:buildbot/build/mariadb*/mariadb-noinstall-*.zip' ."),
#         WithProperties("= scp -P "+port1+" 'buildbot@localhost:buildbot/build/mariadb*/MariaDB-*.exe' ."),
#         "= scp -P "+port1+" buildbot@localhost:buildbot/bindistname.txt .",
#         "= scp -P "+port1+" buildbot@localhost:buildbot/exedistname.txt .",
# ]))
#     bin_fact.addStep(SetPropertyFromCommand(
#         property="bindistname",
#         command=["cat", "bindistname.txt"],
#         ))
#     bin_fact.addStep(SetPropertyFromCommand(
#         property="exedistname",
#         command=["cat", "exedistname.txt"],
#         ))
#     bin_fact.addStep(getPackageArchiveStep('"%(bindistname)s.zip" "%(exedistname)s.exe"', "%(tarbuildnum)s"))
#     bin_fact.addStep(getMTR(
#         test_type="nm",
#         test_info="Normal run, no --ps-protocol",
#         logfiles={"kernel": "kernel_"+port2+".log"},
#         timeout=5400,
#         env={"TERM": "vt102"},
#         command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-clean.qcow2"] + args + ["--port="+port2, "--logfile=kernel_"+port2+".log", "vm-tmp-"+port2+".qcow2",
#         "rm -Rf buildbot && mkdir buildbot",
#         WithProperties("= scp -P "+port2+" %(bindistname)s.zip buildbot@localhost:buildbot/"),
#         WithProperties("""
# set -ex
# cd buildbot
# mkdir test
# cd test
# unzip ../%(bindistname)s.zip
# cd mariadb-*-win32/mysql-test
# perl mysql-test-run.pl  --verbose-restart --force --parallel=2 --retry=3 --testcase-timeout=30 --suite-timeout=300 --max-test-fail=20
# """)]))
#
#     return {'name': name, 'slavename': 'knielsen-kvm-x86', 'builddir': name, 'factory': bin_fact,
#             "nextBuild": myNextBuild,
#             "category": "main" }


#bld_kvm_zip_winxp_x86 = getWinBuilder("kvm-zip-winxp-x86", "xp-32", "2242", "2243", "qemu32", kvmargs=["--netdev=ne2k_pci"])


#bld_opensolaris_511_x86 = {'name': 'opensolaris-511-x86',
#                           'slavename': 'opensolaris-x86',
#                           'builddir': 'opensolaris-511-x86',
#                           'factory': f_dbg_sol_64,
#                           "nextBuild": myNextBuild,
#                           "category": "main",
#                          }

f_sol_64_bintar = factory.BuildFactory()
f_sol_64_bintar.addStep(FileDownload(mastersrc=WithProperties("%(tarballpath)s"),
                                     slavedest=WithProperties("%(distname)s"),
                                     blocksize=524288,
                                     ))
f_sol_64_bintar.addStep(ShellCommand(
        description="untarring", descriptionDone="untar",
        command=["sh", "-c", WithProperties("rm -Rf %(distdirname)s && gzip -dc %(distname)s | gtar xf -")]))
f_sol_64_bintar.addStep(getCompileStep(["sh", "-c", WithProperties("cd %(distdirname)s && bash BUILD/compile-solaris-amd64 --extra-configs=--without-plugin_innodb_plugin")],
                                       env={"AM_EXTRA_MAKEFLAGS": "VERBOSE=1"},
                                       subdir="%(distdirname)s/"))
f_sol_64_bintar.addStep(ShellCommand(
        description="packaging", descriptionDone="package",
        command=["sh", "-c", WithProperties("""
set -ex
cd %(distdirname)s
scripts/make_binary_distribution
ORIG_TAR=$(echo mariadb-*.tar.gz)
ORIG_DIR=$(basename ${ORIG_TAR} .tar.gz)
NEW_DIR="$(echo "${ORIG_DIR}" | sed -e 's/-MariaDB//')"
NEW_TAR="${NEW_DIR}.tar.gz"
if [ "$ORIG_DIR" != "$NEW_DIR" ] ; then
  rm -Rf $ORIG_DIR
  tar zxf $ORIG_TAR
  mv $ORIG_DIR "${NEW_DIR}"
  tar zcf "${NEW_TAR}" "${NEW_DIR}/"
fi
echo "${NEW_TAR}" > ../bindistname.txt
""")]))
f_sol_64_bintar.addStep(SetPropertyFromCommand(
        property="bindistname",
        command=["cat", "bindistname.txt"],
        ))
addPackageArchiveStep(f_sol_64_bintar, '"%(distdirname)s/%(bindistname)s"', "%(tarbuildnum)s")
f_sol_64_bintar.addStep(getMTR(
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3 ")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

bld_opensolaris_511_bintar = {'name': 'opensolaris-511-bintar',
                              'slavename': 'opensolaris-x86',
                              'builddir': 'opensolaris-511-bintar',
                              'factory': f_sol_64_bintar,
                              "nextBuild": myNextBuild,
                              "category": "experimental",
                              }

#f_upgrade_mysql51_mariadb52_bintar = factory.BuildFactory()
#f_upgrade_mysql51_mariadb52_bintar.addStep(ShellCommand(
#	name = "initial_cleanup",
#        workdir=".",
#        command=["sh", "-c", WithProperties("rm -rf sources/%(bindistname)s.tar.gz")]
#))

#f_upgrade_mysql51_mariadb52_bintar.addStep(ShellCommand(
#	name = "downloading_bintar",
#        workdir=".",
#        command=["sh", "-c", WithProperties("wget -O sources/%(bindistname)s.tar.gz http://knielsen-hq.org/archive/pack/5.2/build-%(tarbuildnum)s/kvm-bintar-hardy-x86/%(bindistname)s.tar.gz")]
#))

#f_upgrade_mysql51_mariadb52_bintar.addStep(Test(
#	name = "run_upgrade_vm",
#	workdir = ".",
#        logfiles={"kernel": "kernel_upgrade_mysql51_mariadb52_bintar.log"},
#        warningPattern=impossibleRe,
#        env={"TERM": "vt102"},
#        command = [
#		"mariadb-tools/buildbot/runvm", "--port=2223", "-cpu=qemu64", "--base-image=vm/vm-debian5-i386-serial.qcow2", "vm-tmp-upgrade_mysql51_mariadb52_bintar.qcow2",
#		"= scp -P 2223 -i /home/buildbot/buildbot-id_dsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no sources/mysql-5.1.53-linux-i686-glibc23.tar.gz buildbot@localhost:/tmp",
#		"mkdir /tmp/upgrade-test",
#		"tar -C /tmp/upgrade-test --strip-components=1 -xf /tmp/mysql-5.1.53-linux-i686-glibc23.tar.gz",
#		"cd /tmp/upgrade-test && ./scripts/mysql_install_db --basedir=/tmp/upgrade-test --datadir=/tmp/upgrade-test/data",
#		"cd /tmp/upgrade-test && sh -c 'nohup ./bin/mysqld_safe --no-defaults >& /dev/null &'",
#		"= sleep 20",
#		"/tmp/upgrade-test/bin/mysql  --host=127.0.0.1 --port=3306 -uroot -e 'GRANT ALL PRIVILEGES ON *.* TO \"root\" WITH GRANT OPTION'",
#		"= cd sources/mtr/mysql-test && perl mysql-test-run.pl  --verbose-restart --extern host=127.0.0.1 --extern port=2224 --suite=mariadb-upgrade before-common",
#		"/tmp/upgrade-test/bin/mysqladmin --host=127.0.0.1 --port=3306 -uroot shutdown",
#		WithProperties("= scp -P 2223 -i /home/buildbot/buildbot-id_dsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no sources/%(bindistname)s.tar.gz buildbot@localhost:/tmp"),
#		WithProperties("tar -C /tmp/upgrade-test --strip-components=1 -xf /tmp/%(bindistname)s.tar.gz"),
#		"cd /tmp/upgrade-test && sh -c 'nohup ./bin/mysqld_safe --no-defaults >& /dev/null &'",
#		"= sleep 20",
#		"cd /tmp/upgrade-test && ./bin/mysql_upgrade --host=127.0.0.1 --port=3306 -uroot",
#		"= cd sources/mtr/mysql-test && perl mysql-test-run.pl  --verbose-restart --extern host=127.0.0.1 --extern port=2224 --suite=mariadb-upgrade after-common",
#		"/tmp/upgrade-test/bin/mysqladmin --host=127.0.0.1 --port=3306 -uroot shutdown"
#	]))

#bld_upgrade_mysql51_mariadb52_bintar = {
#	'name': 'upgrade-mysql51-maria52-bintar',
#	'slavename': 'centos56-quality2',
#	'builddir': 'upgrade-testing',
#	'factory': f_upgrade_mysql51_mariadb52_bintar,
#        "nextBuild": myNextBuild,
#	'category': 'experimental',
#}

# End of Random Query Generator Tests

# Code coverage

f_gcov= factory.BuildFactory()
f_gcov.addStep(maybe_bzr_checkout)
f_gcov.addStep(maybe_git_checkout)
f_gcov.addStep(getCompileStep(["BUILD/compile-pentium-gcov"],
                              env={"AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}));
f_gcov.addStep(ShellCommand(
	description="remove-previous-report",
	command=["sh", "-c", WithProperties("rm -Rf /var/www/html/lcov/%(branch)s /home/buildbot/tmp/gcov-%(branch)s.info")]
))

f_gcov.addStep(ShellCommand(
	description="lcov-zerocounters",
	command=["sh", "-c", WithProperties("lcov --directory . --zerocounters")]
))

#f_gcov.addStep(getMTR(
#	test_type="mtr-pbxt", test_info="PBXT test suite",
#        doStepIf=branch_is_5_123,
#	command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --parallel=2 --mysqld=--loose-sync-sys=0 --suite=pbxt --mysqld=--default-storage-engine=pbxt --force --retry=1 --max-test-fail=100 --mysqld=--loose-innodb-fast-shutdown=2 --nowarnings --skip-test=flush_read_lock_kill"],
#	))
f_gcov.addStep(getMTR(
	test_type="mtr-normal", test_info="Standard test suite",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
	command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --mysqld=--loose-sync-sys=0 --mysqld=--loose_innodb_flush_log_at_trx_commit=2 --force --retry=1  --parallel=3 --testcase-timeout=45 --max-test-fail=100 --skip-combinations --mysqld=--loose-innodb-fast-shutdown=2 --nowarnings --max-save-core=0 --max-save-datadir=1"],
	))
f_gcov.addStep(getMTR(
	test_type="mtr-xtra", test_info="Some additional test suites",
	command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --mysqld=--loose-sync-sys=0 --mysqld=--loose_innodb_flush_log_at_trx_commit=2 --suite=funcs_1,funcs_2,stress,jp --force --retry=1  --parallel=3 --testcase-timeout=45 --max-test-fail=200 --mysqld=--loose-innodb-fast-shutdown=2 --nowarnings --max-save-core=0 --max-save-datadir=1"],
))

f_gcov.addStep(ShellCommand(
	description="lcov-capture",
	command=["sh", "-c", WithProperties("lcov --directory . --capture --output-file /home/buildbot/tmp/gcov-%(branch)s.info")]
))

f_gcov.addStep(ShellCommand(
	description="lcov-genhtml",
	command=["sh", "-c", WithProperties("genhtml --output-directory=/var/www/html/lcov/%(branch)s /home/buildbot/tmp/gcov-%(branch)s.info")]
))

f_gcov.addStep(ShellCommand(
	description="lcov-chmod",
	command=["sh", "-c", WithProperties("chmod -R o+rx /var/www/html/lcov/%(branch)s")]
))


bld_gcov = {"name": "gcov",
               "slavename": "centos56-quality2",
               "builddir": "perpush-gcov",
               "factory": f_gcov,
               "nextBuild": myNextBuild,
               "category": "experimental",
               }

# End of code coverage

# Builder that compiles DBD::mysql, PHP and the like

f_compile_connectors = factory.BuildFactory()

f_compile_connectors.addStep(maybe_bzr_checkout)
f_compile_connectors.addStep(maybe_git_checkout)
f_compile_connectors.addStep(getCompileStep(["BUILD/compile-pentium64-max"],
                                            env={"EXTRA_FLAGS": "-DFORCE_INIT_OF_VARS",
                                                 "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}));

f_compile_connectors.addStep(ShellCommand(
	name="start-test-mysqld",
	command=["sh", "-c", "cd mysql-test && MTR_VERSION=1 perl mysql-test-run.pl  --verbose-restart --start-and-exit --mysqld=--skip-safemalloc --master_port=43210 1st"]
))

# DBD::MySQL

f_compile_connectors.addStep(ShellCommand(
	name="unpack-dbi-mysql",
	command=["sh", "-c", "cd .. && tar xfvz DBD-mysql-4.018.tar.gz"]
));

f_compile_connectors.addStep(ShellCommand(
	name="configure-dbi-mysql",
	command=["sh", "-c", "cd ../DBD-mysql-4.018 && perl Makefile.PL --mysql_config=../build/scripts/mysql_config --with-mysql=../build/ --libs='-L../build/libmysql/.libs/ -lmysqlclient -lz -lcrypt -lnsl -lm' --cflags='-I../build/include -g  -Wextra -Wwrite-strings -g3 -gdwarf-2 -UFORCE_INIT_OF_VARS -DUNIV_LINUX' --testhost=127.0.0.1 --testport=43210 --testuser=root"]
));

f_compile_connectors.addStep(ShellCommand(
	name="compile-dbi-mysql",
	command=["sh", "-c", "cd ../DBD-mysql-4.018 && make"]
));

f_compile_connectors.addStep(ShellCommand(
	name="test-dbi-mysql",
	command=["sh", "-c", "cd ../DBD-mysql-4.018 && PERL5LIB=lib LD_LIBRARY_PATH=./blib/arch/auto/DBD/mysql/:../build/libmysql/.libs/ make test"]
));

f_compile_connectors.addStep(ShellCommand(
	name="cleanup-dbi-mysql",
	command=["sh", "-c", "rm -rf ../DBD-mysql-4.018/"]
));

#
# PHP with --with-mysql
#

f_compile_connectors.addStep(ShellCommand(
	name="unpack-php-oldconnector",
	command=["sh", "-c", "cd .. && tar xfvz php-5.3.3.tar.gz"]
));

f_compile_connectors.addStep(ShellCommand(
	name="configure-php-oldconnector",
	command=["sh", "-c", "mkdir lib && ln -s ../libmysql/.libs/ lib/mysql && cd ../php-5.3.3 && ./configure --with-mysql=../build"]
));

f_compile_connectors.addStep(ShellCommand(
	name="compile-php-oldconnector",
	command=["sh", "-c", "cd ../php-5.3.3 && make -j 4"]
));

f_compile_connectors.addStep(ShellCommand(
	name="test-php-oldconnector",
	command=["sh", "-c", 'cd ../php-5.3.3 && REPORT_EXIT_STATUS=1 TEST_PHP_EXECUTABLE=./sapi/cli/php MYSQL_TEST_HOST=127.0.0.1 MYSQL_TEST_PORT=43210 ./sapi/cli/php run-tests.php -r ../workable_tests.php-mysql --show-diff']
));

f_compile_connectors.addStep(ShellCommand(
        name="cleanup-php-newconnector",
	command=["sh", "-c", "rm -rf ../php-5.3.3/"]
));

#
# PHP with --with-mysqli
#

f_compile_connectors.addStep(ShellCommand(
	name="unpack-php-newconnector",
	command=["sh", "-c", "cd .. && tar xfvz php-5.3.3.tar.gz"]
));

f_compile_connectors.addStep(ShellCommand(
	name="configure-php-newconnector",
	command=["sh", "-c", "cd ../php-5.3.3 && ./configure --with-mysqli=../fake_mysql_config"]
));

f_compile_connectors.addStep(ShellCommand(
	name="compile-php-newconnector",
	command=["sh", "-c", "cd ../php-5.3.3 && C_INCLUDE_PATH=../build/include/ make -j 4"]
));

f_compile_connectors.addStep(ShellCommand(
	name="test-php-newconnector",
	command=["sh", "-c", 'cd ../php-5.3.3 && REPORT_EXIT_STATUS=1 TEST_PHP_EXECUTABLE=./sapi/cli/php MYSQL_TEST_HOST=127.0.0.1 MYSQL_TEST_PORT=43210 ./sapi/cli/php run-tests.php -r ../workable_tests.php-mysqli --show-diff']
));

f_compile_connectors.addStep(ShellCommand(
	name="cleanup-php-newconnector",
	command=["sh", "-c", "rm -rf ../php-5.3.3/"]
));

f_compile_connectors.addStep(ShellCommand(
	name="stop-test-mysqld",
	command=["sh", "-c", "./client/mysqladmin -uroot --protocol=tcp --port=43210 shutdown"],
	alwaysRun=True
));

bld_compile_connectors = {"name": "compile-connectors",
               "slavename": "centos56-quality2",
               "builddir": "compile-connectors",
               "factory": f_compile_connectors,
               "nextBuild": myNextBuild,
               "category": "connectors"
}

# end of compile-connectors/DBD::mysql/PHP builder



f_customer_data = factory.BuildFactory()

f_customer_data.addStep(maybe_bzr_checkout)
f_customer_data.addStep(maybe_git_checkout)
f_customer_data.addStep(getCompileStep(["BUILD/compile-pentium64-max"],
                                            env={"EXTRA_FLAGS": "-DFORCE_INIT_OF_VARS",
                                                 "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}));

f_customer_data.addStep(ShellCommand(
	name="customer1-start-server",
	command=["sh", "-c", "cd mysql-test && perl mysql-test-run.pl  --verbose-restart --start-and-exit --mysqld=--loose-skip-safemalloc --mtr-build-thread=321 1st"]
))

f_customer_data.addStep(ShellCommand(
	name="customer1-create-aria",
	command=["sh", "-c", "./client/mysql -uroot --protocol=tcp --port=16420 test  < ../customer1/create-aria.sql 2>&1 > customer1-create-aria.log"]
))

f_customer_data.addStep(ShellCommand(
	name="customer1-insert",
	command=["sh", "-c", "./client/mysql -uroot --protocol=tcp --port=16420 test  < ../customer1/test-insert.sql 2>&1 > customer1-test-insert.log"]
))

f_customer_data.addStep(ShellCommand(
	name="customer1-update",
	command=["sh", "-c", "./client/mysql -uroot --protocol=tcp --port=16420 test  < ../customer1/test-update.sql 2>&1 > customer1-test-update.log"]
))

f_customer_data.addStep(ShellCommand(
	name="customer1-stop-server",
	command=["sh", "-c", "./client/mysqladmin -uroot --protocol=tcp --port=16420 shutdown"],
	alwaysRun=True
));

f_customer_data.addStep(ShellCommand(
	name="customer1-check-tables",
	command=["sh", "-c", "./storage/maria/aria_chk --verbose --extend-check mysql-test/var/mysqld.1/data/test/*.MAI --datadir mysql-test/var/mysqld.1/data/ 2>&1 > customer1-test-check.log"]
))

bld_customer_data = {"name": "test-customer-data",
               "slavename": "centos56-quality2",
               "builddir": "test-customer-data",
               "factory": f_customer_data,
               "nextBuild": myNextBuild,
               "category": "experimental"
}


# Builder that compiles Net::HandlerSocket and tests handlersocket

f_test_handlersocket = factory.BuildFactory()

f_test_handlersocket.addStep(maybe_bzr_checkout)
f_test_handlersocket.addStep(maybe_git_checkout)

f_test_handlersocket.addStep(
     getCompileStep(["sh", "-c", "make clean || rm -f CMakeCache.txt && cmake . -DCMAKE_BUILD_TYPE=Debug && make -j3"],
     doStepIf=branch_is_5_5_or_later)
)

f_test_handlersocket.addStep(ShellCommand(
	name="build-perl-handlersocket",
        command=["sh", "-c", WithProperties("""
set -ex
cd plugin/handler_socket/perl-Net-HandlerSocket
if [ ! -e Makefile.PL ] ; then
  sed -e "s/LIBS.*/LIBS => ['-L.. -L..\/libhsclient -lhsclient'],/g" Makefile.PL.in | sed -e "s/INC.*/INC => '-I..\/libhsclient -I..\/..\/..\/include',/g" > Makefile.PL
fi
perl Makefile.PL
make
LD_LIBRARY_PATH=../libhsclient/.libs make test
""")]))

f_test_handlersocket.addStep(ShellCommand(
	name="start-mysqld",
	command=["sh", "-c", "cd mysql-test && LD_LIBRARY_PATH=../plugin/handler_socket/libhsclient/.libs perl mysql-test-run.pl --verbose-restart --start-and-exit 1st --mysqld=--loose-handlersocket_port=9998 --mysqld=--loose-handlersocket_port_wr=9999 --mtr-build-thread=963 --mysqld=--innodb"]
))

f_test_handlersocket.addStep(ShellCommand(
	name="install-handlersocket",
	command=["sh", "-c", "client/mysql -uroot --protocol=tcp --port=29260 -e 'INSTALL PLUGIN handlersocket soname \"handlersocket.so\"'"]
))

f_test_handlersocket.addStep(ShellCommand(
	name="show-handlersocket-variables",
	command=["sh", "-c", "client/mysql -uroot --protocol=tcp --port=29260 -e 'SHOW VARIABLES LIKE \"%handlersocket%\"'"]
))

f_test_handlersocket.addStep(ShellCommand(
	name="test-handlersocket",
	command=["sh", "-c", "cd plugin/handler_socket/regtest/test_01_lib && MYHOST=127.0.0.1 MYPORT=29260 LD_LIBRARY_PATH=../../libhsclient/.libs/ PERL5LIB=../common:../../perl-Net-HandlerSocket/lib:../../perl-Net-HandlerSocket/blib/arch/auto/Net/HandlerSocket/ ./run.sh"]
))

f_test_handlersocket.addStep(ShellCommand(
	name="show-innodb-status",
	command=["sh", "-c", "client/mysql -uroot --protocol=tcp --port=29260 -e 'SHOW STATUS LIKE \"%innodb%\"'"]
))

f_test_handlersocket.addStep(ShellCommand(
	name="shutdown-mysqld",
	command=["sh", "-c", "client/mysqladmin -uroot --protocol=tcp --port=29260 shutdown"],
	alwaysRun=True
))

bld_test_handlersocket = {"name": "test-handlersocket",
               "slavename": "centos56-quality2",
               "builddir": "test-handlersocket",
               "factory": f_test_handlersocket,
               "nextBuild": myNextBuild,
               "category": "experimental"
}

# End of handlersocket build

# Builder for  Hakan's Mac Mini.
#f_mac_mini = factory.BuildFactory()
#f_mac_mini.addStep(bzr_checkout)
#f_mac_mini.addStep(getCompileStep(["BUILD/compile-amd64-debug-max-no-ndb"],
#                                  env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
#                                       "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}))
#f_mac_mini.addStep(getMTR(
#        test_type="nm",
#        test_info="Mac Mini debug:Normal run, mixed-mode replication, no --ps-protocol",
#        command=["sh", "-c", 'diskutil eject /Volumes/ramdisk ; diskutil erasevolume "Journaled HFS+" "ramdisk" $(hdiutil attach -nomount ram://3145728) ; rm -Rf mysql-test/var ; ln -s /Volumes/ramdisk mysql-test/var ; cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3 --parallel=3  --mysqld=--binlog-format=mixed']))
#f_mac_mini.addStep(getMTR(
#        test_type="pr",
#        test_info="Mac Mini debug: prepared statement protocol, row-based replication",
#        command=["sh", "-c", 'diskutil eject /Volumes/ramdisk ; diskutil erasevolume "Journaled HFS+" "ramdisk" $(hdiutil attach -nomount ram://3145728) ; rm -Rf mysql-test/var ; ln -s /Volumes/ramdisk mysql-test/var ; cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3 --parallel=3  --mysqld=--binlog-format=row --ps-protocol']))
#f_mac_mini.addStep(ShellCommand(command=["diskutil", "eject", "/Volumes/ramdisk"],
#                                description=["ejecting"], descriptionDone=["eject"],
#                                alwaysRun=True))

#bld_mac_mini_x86_dbg = {'name': "mac-mini-x86-dbg",
#               'slavename': "mac-mini-intel",
#               'builddir': "mac-mini-intel",
#               'factory': f_mac_mini,
#               "nextBuild": myNextBuild,
#               "category": "main",
#              }

#f_fedora13_x86_dbg = factory.BuildFactory()
#f_fedora13_x86_dbg.addStep(bzr_checkout)
#f_fedora13_x86_dbg.addStep(getCompileStep(["BUILD/compile-pentium-debug-max"],
#                                           env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS", "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}))
#f_fedora13_x86_dbg.addStep(getMTR(
#        test_type="ps",
#        test_info="Statement-based, --ps-protocol",
#        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --parallel=2 --force --retry=3  --mysqld=--binlog-format=statement --ps-protocol"]))
#f_fedora13_x86_dbg.addStep(getMTR(
#        test_type="pr",
#        test_info="Row-based, --ps-protocol",
#        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --parallel=2 --force --retry=3  --mysqld=--binlog-format=row --ps-protocol"]))
#f_fedora13_x86_dbg.addStep(getMTR(
#        test_type="emb",
#        test_info="Embedded server",
#        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --parallel=2 --force --retry=3  --embedded-server"]))
#f_fedora13_x86_dbg.addStep(getMTR(
#        test_type="pbxt",
#        test_info="PBXT",
#        doStepIf=branch_is_5_123,
#        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --parallel=2 --force --retry=3 --suite=pbxt"]))
#
#bld_fedora13_x86_dbg = {'name': "fedora13-x86-dbg",
#                        'slavename': "haidong-fedora13-x86",
#                        'builddir': "fedora13-x86-dbg",
#                        'factory': f_fedora13_x86_dbg,
#                        "nextBuild": myNextBuild,
#                        "category": "experimental",
#                        }


#f_win7_x86 = factory.BuildFactory()
#f_win7_x86.addStep(bzr_checkout)
#f_win7_x86.addStep(getCompileStep(
#        ["sh win/configure-mariadb.sh"],
#        description=["configuring"],
#        descriptionDone=["configure"],
#        ))
#f_win7_x86.addStep(getCompileStep(
# 	["cmake", "-G", "NMake Makefiles", "-DCMAKE_BUILD_TYPE=RelWithDebInfo"],
#        description=["cmaking"],
#        descriptionDone=["cmake"],
#        ))
#f_win7_x86.addStep(getCompileStep(
#        ["nmake"],
#        description=["nmaking"],
#        descriptionDone=["nmake"],
#        ))
#f_win7_x86.addStep(getMTR(
#        test_type="nm",
#        test_info="Normal run, no --ps-protocol",
#        env={"MTR_FEEDBACK_PLUGIN": "1"},
#        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3 --parallel=2  --testcase-timeout=45 --suite-timeout=600"],
#        timeout=2700))
#f_win7_x86.addStep(getMTR(
#        test_type="emb",
#        test_info="--embedded-server run",
#        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3 --parallel=2  --testcase-timeout=45 --suite-timeout=600 --embedded-server"],
#        timeout=2700))
#f_win7_x86.addStep(getMTR(
#        test_type="pbxt",
#        test_info="PBXT run",
#        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3  --testcase-timeout=45 --suite-timeout=600 --mysqld=--default-storage-engine=pbxt --suite=pbxt"],
#        timeout=2700))

# bld_win7_x86 = {'name': "win7-x86",
#                'slavename': "haidong-win7-x86",
#                'builddir': "win7-x86",
#                'factory': f_win7_x86,
#                "nextBuild": myNextBuild,
#                "category": "experimental",
#                }


#
# New builders located on pstoev's host. See http://kb.askmonty.org/v/buildbot-setup-buildbot-setup-for-windows
# for more information, including explanations on the use of taskkill, --mysqld=--gdb and other odditites
#
# Since buildbot slave is unstable on windows, we use a Linux slave which pipes each command to the windows machine
# This way there is no python or buildbot involvement on the Windows side, just a SSHd daemon
#

#f_win2008r2_i386_release = factory.BuildFactory()
#
#f_win2008r2_i386_release.addStep(ShellCommand(
#	name= "kill_old_build_processes",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", "taskkill /im cmake* /f /t || taskkill /im my* /f /t || taskkill /im bzr* /f /t || taskkill /im perl* /f /t || exit 0"],
#        alwaysRun=True
#));
#
#f_win2008r2_i386_release.addStep(ShellCommand(
#	name= "remove_old_build_dir",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("rmdir /S /Q c:\\buildbot\\%(buildername)s\\build || exit 0")],
#	alwaysRun=True
#));
#
#f_win2008r2_i386_release.addStep(ShellCommand(
#	name = "bzr_prepare",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("bzr init-repo c:\\buildbot\\%(buildername)s || exit 0")]
#));
#
## We can not use Bzr() here because it contains a hard-coded assumption that the bzr client will run on the local machine
#
#f_win2008r2_i386_release.addStep(ShellCommand(
#	name = "bzr_checkout",
#	command=["ssh", "buildbot@win2008r2-build", "bzr" ,"checkout", "-r", WithProperties("%(revision)s"), WithProperties("lp:~maria-captains/maria/%(branch)s"), WithProperties("c:\\buildbot\\%(buildername)s\\build")],
#	timeout = 4*3600
#));
#
#f_win2008r2_i386_release.addStep(ShellCommand(
#	name = "bzr_version_info",
#	command=["ssh", "buildbot@win2008r2-build", "bzr" ,"version-info", WithProperties("c:\\buildbot\\%(buildername)s\\build")]
#));
#
#f_win2008r2_i386_release.addStep(Compile(
#	name = "cmake",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build && cmake . -G \"Visual Studio 9 2008\"")]
#));
#
#f_win2008r2_i386_release.addStep(Compile(
#	name = "build",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build && cmake --build . --config RelWithDebInfo --")],
#	warningPattern=vsWarningPattern,
#	warningExtractor=Compile.warnExtractFromRegexpGroups
#));
#
#f_win2008r2_i386_release.addStep(getMTR(
#	test_type="nm", test_info="Normal mode",
#        env={"MTR_FEEDBACK_PLUGIN": "1"},
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build\mysql-test && perl mysql-test-run.pl  --verbose-restart --force --parallel=4 --testcase-timeout=45 --suite-timeout=600 --max-test-fail=500")]
#))
#
#bld_win2008r2_vs2008_i386_release = {
#	'name': "win2008r2-vs2008-i386-release",
#	'slavename': "centos56-quality2",
#	'builddir': "vs2008-i386-release",
#	'factory': f_win2008r2_i386_release,
#        "nextBuild": myNextBuild,
#	'category': "experimental"
#}

#f_win2008r2_amd64_debug = factory.BuildFactory()
#
#f_win2008r2_amd64_debug.addStep(ShellCommand(
#	name= "kill_old_build_processes",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", "taskkill /im cmake* /f /t || taskkill /im my* /f /t || taskkill /im bzr* /f /t || taskkill /im perl* /f /t || exit 0"],
#        alwaysRun=True
#));
#
#f_win2008r2_amd64_debug.addStep(ShellCommand(
#	name= "remove_old_build_dir",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("rmdir /S /Q c:\\buildbot\\%(buildername)s\\build || exit 0")],
#       alwaysRun=True
#));
#
#f_win2008r2_amd64_debug.addStep(ShellCommand(
#	name = "bzr_prepare",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("bzr init-repo c:\\buildbot\\%(buildername)s || exit 0")]
#));
#
## We can not use Bzr() here because it contains a hard-coded assumption that the bzr client will run on the local machine
#
#f_win2008r2_amd64_debug.addStep(ShellCommand(
#	name = "bzr_checkout",
#	command=["ssh", "buildbot@win2008r2-build", "bzr" ,"checkout", "-r", WithProperties("%(revision)s"), WithProperties("lp:~maria-captains/maria/%(branch)s"), WithProperties("c:\\buildbot\\%(buildername)s\\build")],
#	timeout = 4*3600
#));
#
#f_win2008r2_amd64_debug.addStep(ShellCommand(
#	name = "bzr_version_info",
#	command=["ssh", "buildbot@win2008r2-build", "bzr" ,"version-info", WithProperties("c:\\buildbot\\%(buildername)s\\build")]
#));
#
#f_win2008r2_amd64_debug.addStep(Compile(
#	name = "cmake",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build && cmake . -DWITH_EMBEDDED_SERVER=1 -G \"Visual Studio 10 Win64\"")]
#));
#
#f_win2008r2_amd64_debug.addStep(Compile(
#	name = "build",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build && cmake --build . --config Debug -- \"/maxcpucount:4\"")],
#	warningPattern=vsWarningPattern,
#	warningExtractor=Compile.warnExtractFromRegexpGroups
#));
#
#f_win2008r2_amd64_debug.addStep(getMTR(
#	test_type="nm", test_info="Normal test suite",
#        env={"MTR_FEEDBACK_PLUGIN": "1"},
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build\mysql-test && perl mysql-test-run.pl  --verbose-restart --force  --parallel=4 --testcase-timeout=45 --max-test-fail=100 --retry=3")]
#))
#
#f_win2008r2_amd64_debug.addStep(getMTR(
#	test_type="emb", test_info="Embedded",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build\mysql-test && perl mysql-test-run.pl  --verbose-restart --embedded-server --force --parallel=4  --testcase-timeout=45 --max-test-fail=100 --retry=3")]
#))
#
#f_win2008r2_amd64_debug.addStep(getMTR(
#	test_type="pbxt", test_info="PBXT test suite",
#        doStepIf=branch_is_5_123,
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build\mysql-test && perl mysql-test-run.pl  --verbose-restart --suite=pbxt --mysqld=--default-storage-engine=pbxt --force --parallel=4 --max-test-fail=100 --retry=3")]
#))
#
#f_win2008r2_amd64_debug.addStep(getMTR(
#	test_type="pm", test_info="--ps-protocol mode",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build\mysql-test && perl mysql-test-run.pl  --verbose-restart --ps-protocol --force   --parallel=4 --testcase-timeout=45 --max-test-fail=100 --retry=3")]
#))
#
#f_win2008r2_amd64_debug.addStep(getMTR(
#	test_type="xtra", test_info="Some additional test suites",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build\mysql-test && perl mysql-test-run.pl  --verbose-restart --suite=funcs_1,funcs_2,stress,jp --force  --parallel=4 --testcase-timeout=45 --max-test-fail=200 --retry=3")]
#))
#
#bld_win2008r2_vs2010_amd64_debug = {
#	'name': "win2008r2-vs2010-amd64-debug",
#	'slavename': "centos56-quality2",
#	'builddir': "vs2010-amd64-Debug",
#	'factory': f_win2008r2_amd64_debug,
#        "nextBuild": myNextBuild,
#	"category": "experimental"
#}



#f_win2008r2_i386_packages = factory.BuildFactory()
#
#f_win2008r2_i386_packages.addStep(ShellCommand(
#	name= "kill_old_build_processes",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", "taskkill /im cmake* /f /t || taskkill /im my* /f /t || taskkill /im bzr* /f /t || taskkill /im perl* /f /t || exit 0"],
#        alwaysRun=True
#));
#
#f_win2008r2_i386_packages.addStep(ShellCommand(
#	name= "remove_old_build_dir",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("rmdir /S /Q c:\\buildbot\\%(buildername)s\\build || exit 0")],
#        alwaysRun=True
#));
#
#f_win2008r2_i386_packages.addStep(ShellCommand(
#	name= "create_new_build_dir",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("mkdir c:\\buildbot\\%(buildername)s\\build || exit 0")]
#));
#
#f_win2008r2_i386_packages.addStep(FileDownload( mastersrc=WithProperties("%(tarballpath)s"), slavedest=WithProperties("%(distdirname)s.tar.gz")) );
#
#f_win2008r2_i386_packages.addStep(ShellCommand(
#	name = "push_tarball",
#	command=["sh", "-c", WithProperties("echo 'put %(distdirname)s.tar.gz %(buildername)s/build/' | sftp buildbot@win2008r2-build")]
#));
#
## gzip -d is a separate step because tar -z does not work on Windows
#
#f_win2008r2_i386_packages.addStep(ShellCommand(
#	name = "unpack_tarball",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("gzip -d --force c:\\buildbot\\%(buildername)s\\build\\%(distdirname)s.tar.gz")]
#));
#
## we do cd + tar because tar on windows does not allow paths. also tar --strip-components does not work on Windows
#
#f_win2008r2_i386_packages.addStep(ShellCommand(
#	name = "unpack_tarball",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build && tar xfv %(distdirname)s.tar")]
#));
#
#f_win2008r2_i386_packages.addStep(Compile(
#	name = "cmake",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build\\%(distdirname)s && cmake . -DWITH_EMBEDDED_SERVER=1 -DCOMPILATION_COMMENT=\"mariadb.org binary distribution\" -DWITH_THIRD_PARTY=HeidiSQL  -G \"Visual Studio 10\"")]
#));
#
#f_win2008r2_i386_packages.addStep(Compile(
#	name = "build_zip",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build\\%(distdirname)s && cmake --build . --config Debug -- \"/maxcpucount:4\" && cmake --build . --config RelWithDebInfo --target package -- \"/maxcpucount:4\"")],
#	warningPattern=vsWarningPattern,
#	warningExtractor=Compile.warnExtractFromRegexpGroups
#));
#
#f_win2008r2_i386_packages.addStep(getMTR(
#	test_type="nm", test_info="Normal test suite",
#        env={"MTR_FEEDBACK_PLUGIN": "1"},
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build\\%(distdirname)s\\mysql-test && perl mysql-test-run.pl  --verbose-restart --suite=main --force  --parallel=4 --testcase-timeout=45 --max-test-fail=100 --retry=3")]
#))
#
#
#f_win2008r2_i386_packages.addStep(Compile(
#	name = "build_msi",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build\\%(distdirname)s && cmake --build . --config RelWithDebInfo --target win/packaging/msi -- \"/maxcpucount:4\"")],
#	warningPattern=vsWarningPattern,
#	warningExtractor=Compile.warnExtractFromRegexpGroups
#));
#
#f_win2008r2_i386_packages.addStep(ShellCommand(
#	name = "create_dir",
#	command=["sh", "-c", WithProperties("mkdir %(tarbuildnum)s")]
#));
#
#f_win2008r2_i386_packages.addStep(ShellCommand(
#	name = "pull_zip",
#	command=["sh", "-c", WithProperties("echo 'get %(buildername)s/build/%(distdirname)s/*.zip %(tarbuildnum)s/' | sftp buildbot@win2008r2-build")]
#));
#
#f_win2008r2_i386_packages.addStep(ShellCommand(
#	name = "pull_msi",
#	command=["sh", "-c", WithProperties("echo 'get %(buildername)s/build/%(distdirname)s/*.msi %(tarbuildnum)s/' | sftp buildbot@win2008r2-build")]
#));
#
#f_win2008r2_i386_packages.addStep(ShellCommand(
#	name = "fix_permissions",
#	command=["sh", "-c", WithProperties("chmod -R a+rwx %(tarbuildnum)s/")]
#));
#
#bld_win2008r2_vs2010_i386_packages = {
#	'name': "win2008r2-vs2010-i386-packages",
#	'slavename': "centos56-quality2",
#	'builddir': "win2008r2-vs2010-i386-packages",
#	'factory': f_win2008r2_i386_packages,
#        "nextBuild": myNextBuild,
#	"category": "experimental"
#}

#f_win2008r2_amd64_packages = factory.BuildFactory()
#
#f_win2008r2_amd64_packages.addStep(ShellCommand(
#	name= "kill_old_build_processes",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", "taskkill /im cmake* /f /t || taskkill /im my* /f /t || taskkill /im bzr* /f /t || taskkill /im perl* /f /t || exit 0"],
#        alwaysRun=True
#));
#
#f_win2008r2_amd64_packages.addStep(ShellCommand(
#	name= "remove_old_build_dir",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("rmdir /S /Q c:\\buildbot\\%(buildername)s\\build || exit 0")],
#        alwaysRun=True
#));
#
#f_win2008r2_amd64_packages.addStep(ShellCommand(
#	name= "create_new_build_dir",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("mkdir c:\\buildbot\\%(buildername)s\\build || exit 0")]
#));
#
#f_win2008r2_amd64_packages.addStep(FileDownload( mastersrc=WithProperties("%(tarballpath)s"), slavedest=WithProperties("%(distdirname)s.tar.gz")) );
#
#f_win2008r2_amd64_packages.addStep(ShellCommand(
#	name = "push_tarball",
#	command=["sh", "-c", WithProperties("echo 'put %(distdirname)s.tar.gz %(buildername)s/build/' | sftp buildbot@win2008r2-build")]
#));
#
## gzip -d is a separate step because tar -z does not work on Windows
#
#f_win2008r2_amd64_packages.addStep(ShellCommand(
#	name = "unpack_tarball",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("gzip -d --force c:\\buildbot\\%(buildername)s\\build\\%(distdirname)s.tar.gz")]
#));
#
## we do cd + tar because tar on windows does not allow paths. also tar --strip-components does not work on Windows
#
#f_win2008r2_amd64_packages.addStep(ShellCommand(
#	name = "unpack_tarball",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build && tar xfv %(distdirname)s.tar")]
#));
#
#f_win2008r2_amd64_packages.addStep(Compile(
#
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build\\%(distdirname)s && cmake . -DWITH_EMBEDDED_SERVER=1  -DCOMPILATION_COMMENT=\"mariadb.org binary distribution\" -DWITH_THIRD_PARTY=HeidiSQL -G \"Visual Studio 10 Win64\"")]
#));
#
#f_win2008r2_amd64_packages.addStep(Compile(
#	name = "build_zip",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build\\%(distdirname)s && cmake --build . --config Debug -- \"/maxcpucount:4\" && cmake --build . --config RelWithDebInfo --target package -- \"/maxcpucount:4\"")],
#	warningPattern=vsWarningPattern,
#	warningExtractor=Compile.warnExtractFromRegexpGroups
#));
#
#f_win2008r2_amd64_packages.addStep(getMTR(
#	test_type="nm", test_info="Normal test suite",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build\\%(distdirname)s\\mysql-test && perl mysql-test-run.pl  --verbose-restart --suite=main --force  --parallel=4 --testcase-timeout=45 --max-test-fail=100 --retry=3")]
#))
#
#
#f_win2008r2_amd64_packages.addStep(Compile(
#	name = "build_msi",
#	command=["ssh", "buildbot@win2008r2-build", "cmd", "/C", WithProperties("cd c:\\buildbot\\%(buildername)s\\build\\%(distdirname)s && cmake --build . --config RelWithDebInfo --target win/packaging/msi -- \"/maxcpucount:4\"")],
#	warningPattern=vsWarningPattern,
#	warningExtractor=Compile.warnExtractFromRegexpGroups
#));
#
#f_win2008r2_amd64_packages.addStep(ShellCommand(
#	name = "create_dir",
#	command=["sh", "-c", WithProperties("mkdir %(tarbuildnum)s")]
#));
#
#f_win2008r2_amd64_packages.addStep(ShellCommand(
#	name = "pull_zip",
#	command=["sh", "-c", WithProperties("echo 'get %(buildername)s/build/%(distdirname)s/*.zip %(tarbuildnum)s/' | sftp buildbot@win2008r2-build")]
#));
#
#f_win2008r2_amd64_packages.addStep(ShellCommand(
#	name = "pull_msi",
#	command=["sh", "-c", WithProperties("echo 'get %(buildername)s/build/%(distdirname)s/*.msi %(tarbuildnum)s/' | sftp buildbot@win2008r2-build")]
#));
#
#f_win2008r2_amd64_packages.addStep(ShellCommand(
#	name = "fix_permissions",
#	command=["sh", "-c", WithProperties("chmod -R a+rwx %(tarbuildnum)s/")]
#));
#
#bld_win2008r2_vs2010_amd64_packages = {
#	'name': "win2008r2-vs2010-amd64-packages",
#	'slavename': "centos56-quality2",
#	'builddir': "win2008r2-vs2010-amd64-packages",
#	'factory': f_win2008r2_amd64_packages,
#        "nextBuild": myNextBuild,
#	"category": "experimental"
#}


def do_step_win(step):
	return branch_is_not_galera(step) and branch_is_not_connector(step)

def make_win_build_factory(generator,config,do_package, test_spec=" --suite=main,innodb,plugins --parallel=4 ",publish_root_dir=""):
	f = factory.BuildFactory()
	f.addStep(ShellCommand(
        name= "close_open_handles",
        command=["dojob", "unlock_handles.bat" ],
        alwaysRun=True
	));
	f.addStep(ShellCommand(
        name= "remove_build_dir",
        command=["dojob", "rm -rf * || exit 0" ],
	doStepIf=do_step_win
    	));
	if do_package:
		f.addStep(FileDownload(
		mastersrc=WithProperties("%(tarballpath)s"),
		slavedest=WithProperties("%(distdirname)s.tar.gz"),
        	blocksize=524288,
		doStepIf=do_step_win
		))
		f.addStep(ShellCommand(
		name = "unpack_tarball",
		command=["dojob", WithProperties("cmake -E tar xfz %(distdirname)s.tar.gz && move %(distdirname)s src")],
		doStepIf=do_step_win
		))
	else:
    		f.addStep(ShellCommand(
            	name= "git_checkout",
		command=["dojob", WithProperties("git clone %(repository)s src && cd  src && git reset --hard %(revision)s")],
            	timeout=7200,
		doStepIf=do_step_win
    		));
	cmake_extra_args = ' -DBUILD_CONFIG=mysql_release -DCOMPILATION_COMMENT="mariadb.org binary distribution" -DWITH_THIRD_PARTY=HeidiSQL -DSIGNCODE=ON -DWITH_UNIT_TESTS=0' if do_package else ''
        f.addStep(Compile(
		name = "cmake",
		command=["dojob", WithProperties(("cmake src " if not generator else "cmake src -G \"" + generator + "\"") + cmake_extra_args)],
		warningPattern=vsWarningPattern,
		warningExtractor=Compile.warnExtractFromRegexpGroups,
		doStepIf=do_step_win
	));
	if do_package:
		f.addStep(Compile(
			name = "build",
			command=["dojob", WithProperties("cmake --build  .  --config " + config + " --target package " + " && cmake --build  .  --config " + config + " --target MSI")],
			warningPattern=vsWarningPattern,
			warningExtractor=Compile.warnExtractFromRegexpGroups,
                        timeout=3600,
			doStepIf=do_step_win
		));
	else:
		f.addStep(Compile(
			name = "cmake",
			command=["dojob", WithProperties("cmake --build  .  --config " + config)],
			warningPattern=vsWarningPattern,
			warningExtractor=Compile.warnExtractFromRegexpGroups,
			doStepIf=do_step_win
		));

	if do_package:
		export_dir = publish_root_dir +  "\\%(branch)s\\build-%(tarbuildnum)s\\%(buildername)s"
		f.addStep(ShellCommand(
			name = "publish",
			doStepIf=lambda(step): in_savedPackageBranches(step) and do_step_win(step),
			command=["dojob", WithProperties("(if exist " + export_dir + "  (rd /s /q " + export_dir + ")) && mkdir " + export_dir + " && xcopy /y /f *.zip " + export_dir + " && xcopy /y /f *.msi " + export_dir + " && md5sums " + export_dir)],
		));

	f.addStep(getMTR(
		test_type="nm", test_info="Normal mode",
		env={"MTR_FEEDBACK_PLUGIN": "1"},
		command=["dojob", WithProperties("if exist src\\mysql-test\\collections\\buildbot_suites.bat (cd mysql-test && ..\\src\mysql-test\\collections\\buildbot_suites.bat) else (cd mysql-test && perl mysql-test-run.pl  --verbose-restart --force  --testcase-timeout=45 --suite-timeout=600 --max-test-fail=500 --retry=3 " + test_spec + " )" )],
		doStepIf=do_step_win
	));

        f.addStep(getMTR(
                test_type="extra", test_info="connect engine", description=["connect engine"],
                command=["dojob", WithProperties("cd mysql-test &&  perl mysql-test-run.pl  --verbose-restart --force  --testcase-timeout=45 --suite-timeout=600  --retry=3 --suites=connect" )],
                doStepIf=lambda(step): step.getProperty("branch").startswith("ob-") and do_step_win(step)
        ));

	return f


bld_win32_debug = {
	'name': "win32-debug",
	'slavename': "bb-win-azure-2",
	'builddir': "D:\\win32-debug",
	'factory':  make_win_build_factory(generator='Visual Studio 15 2017',config='Debug',do_package=False),
        'nextBuild': myNextBuild,
	'category': "main"
}

bld_winx64_debug = {
	'name': "winx64-debug",
	'slavename': "bb-win-azure-2",
	'builddir': "D:\\winx64-debug",
	'factory': make_win_build_factory(generator='Visual Studio 15 2017 Win64',config='Debug',do_package=False),
        'nextBuild': myNextBuild,
	'category': "main"
}

bld_win32_packages = {
	'name': "win32-packages",
	'slavename': "bb-win-azure",
	'builddir': "D:\\win32-packages",
        'factory':  make_win_build_factory(generator='Visual Studio 15 2017',config='RelWithDebInfo',do_package=True, publish_root_dir="E:\\packs"),
        "nextBuild": myNextBuild,
	"category": "main"
}

bld_winx64_packages = {
	'name': "winx64-packages",
	'slavename': "bb-win-azure",
	'builddir': "D:\\winx64-packages",
	'factory': make_win_build_factory(generator='Visual Studio 15 2017 Win64',config='RelWithDebInfo',do_package=True, publish_root_dir="E:\\packs"),
        "nextBuild": myNextBuild,
	"category": "main"
}

# Attention! bld_kvm_qa_linux builder uses port=10710
#            bld_qa_bb_experiments builder uses port=10711
execfile("/etc/buildbot/builders/qa/qa_builders.py");

f_win_jdbc = factory.BuildFactory()
f_win_jdbc.addStep(ShellCommand(
	name = "bzr_prepare",
	command=["dojob", WithProperties("bzr init-repo c:\\buildbot\\%(buildername)s || exit 0")]
));

f_win_jdbc.addStep(ShellCommand(
        name = "remove_old_build",
        command=["dojob", "rm -rf" ,
         WithProperties("c:\\buildbot\\%(buildername)s\\build")],
        timeout = 4*3600,
        haltOnFailure = True
));

f_win_jdbc.addStep(ShellCommand(
        name = "bzr_checkout",
        command=["dojob", "bzr" ,"checkout", "-r", WithProperties("%(revision)s"), WithProperties("lp:%(repository)s"), WithProperties("c:\\buildbot\\%(buildername)s\\build")],
        timeout = 4*3600,
        haltOnFailure = True
));

f_win_jdbc.addStep(ShellCommand(
	name= "build_package",
	command=["dojob",
        WithProperties("cd c:\\buildbot\\%(buildername)s\\build && build_release")
        ],
        haltOnFailure = True
	));

f_win_jdbc.addStep(ShellCommand(
        name= "create_publish_dir",
        command=["dojob",
        WithProperties("mkdir c:\\build_archive\\%(branch)s\\%(revision)s || exit 0")]
        ))

f_win_jdbc.addStep(ShellCommand(
        name= "publish",
        command=["dojob",
        WithProperties("cd c:\\buildbot\\%(buildername)s\\build && xcopy /y /f target\*.jar c:\\build_archive\\%(branch)s\\%(revision)s && xcopy /y /f *.tar.gz c:\\build_archive\\%(branch)s\\%(revision)s &&  md5sums c:/build_archive/%(branch)s/%(revision)s")]
        ))

f_win_jdbc.addStep(ShellCommand(
        name= "create_upload_dir",
        command=["dojob",
        WithProperties("mkdir c:\\bzr\\bb-win32\\win-jdbc\\build\\%(revision)s && xcopy /y /f c:\\build_archive\\%(branch)s\\%(revision)s\\* c:\\bzr\\bb-win32\\win-jdbc\\build\\%(revision)s")]
        ))

addPackageUploadStepWin(f_win_jdbc, 'win')


bld_win_jdbc = {
        'name': "win-jdbc",
        'slavename': "bb-win32",
        'builddir': "win-jdbc",
        'factory': f_win_jdbc,
        'category': "experimental"
}

f_win_connector_c = factory.BuildFactory()

f_win_connector_c.addStep(ShellCommand(
        name = "remove_old_build",
        command=["dojob", "rm -rf" ,
         WithProperties("d:\\buildbot\\%(buildername)s\\build")],
        timeout = 4*3600,
        haltOnFailure = True
));

f_win_connector_c.addStep(ShellCommand(
        name= "git_checkout",
        command=["dojob", WithProperties("rm -rf src && git clone -b %(branch)s %(repository)s src && cd src && git reset --hard %(revision)s && cd ..")],
        timeout=7200,
	doStepIf=do_step_win
    	));

f_win_connector_c.addStep(ShellCommand(
	name= "build_package32-debug",
	command=["dojob",
        WithProperties("rm -rf win32 && mkdir win32 && cd win32 && cmake ..\\src -G \"Visual Studio 14 2015\" -DCMAKE_BUILD_TYPE=Debug && cmake --build . --config Debug --target package")
        ],
        haltOnFailure = True
	));
f_win_connector_c.addStep(ShellCommand(
	name= "build_package32",
	command=["dojob",
        WithProperties("cd win32 && del CMakeCache.txt && cmake ..\\src -G \"Visual Studio 14 2015\" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_SIGNCODE=1 && cmake --build . --clean-first --config RelWithDebInfo --target package")
        ],
        haltOnFailure = True
	));
f_win_connector_c.addStep(ShellCommand(
	name= "build_package64-debug",
	command=["dojob",
        WithProperties("rm -rf win64 && mkdir win64 && cd win64 && cmake ..\\src -G \"Visual Studio 14 2015 Win64\" -DCMAKE_BUILD_TYPE=Debug && cmake --build . --config Debug --target package")
        ],
        haltOnFailure = True
	));
f_win_connector_c.addStep(ShellCommand(
	name= "build_package64",
	command=["dojob",
        WithProperties("cd win64 && del CMakeCache.txt && cmake ..\\src -G \"Visual Studio 14 2015 Win64\" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_SIGNCODE=1 && cmake --build . --clean-first --config RelWithDebInfo --target package")
        ],
        haltOnFailure = True
	));
f_win_connector_c.addStep(ShellCommand(
        name= "create_publish_dir",
        command=["dojob",
        WithProperties("mkdir c:\\build_archive\\%(buildername)s\%(branch)s\\%(revision)s || exit 0")]
        ))

f_win_connector_c.addStep(ShellCommand(
        name= "publish_win32",
        command=["dojob",
        WithProperties("cd win32 && xcopy /y /f win\packaging\*.msi c:\\build_archive\\%(buildername)s\\%(branch)s\\%(revision)s &&  md5sums c:/build_archive/%(buildername)s/%(branch)s/%(revision)s")]
        ))

f_win_connector_c.addStep(ShellCommand(
        name= "publish_win64",
        command=["dojob",
        WithProperties("cd win64 && xcopy /y /f win\packaging\*.msi c:\\build_archive\\%(buildername)s\\%(branch)s\\%(revision)s &&  md5sums c:/build_archive/%(buildername)s/%(branch)s/%(revision)s")]
        ))

f_win_connector_c.addStep(ShellCommand(
        name= "create_upload_dir",
        command=["dojob",
        WithProperties("if not exist \"c:\\bb\\connector-c\\build\\%(revision)s\" mkdir c:\\bb\\connector-c\\build\\%(revision)s && xcopy /y /f c:\\build_archive\\%(buildername)s\\%(branch)s\\%(revision)s\\* c:\\bb\\connector-c\\build\\%(revision)s")]
        ))

addPackageUploadStepWin(f_win_connector_c, 'win')

bld_win_connector_c = {
        'name': "win-connector_c",
        'slavename': "win-connectors",
        'builddir': "connector-c",
        'factory': f_win_connector_c,
        'category': "connectors"
}

f_win_connector_c_3 = factory.BuildFactory()

f_win_connector_c_3.addStep(ShellCommand(
        name = "remove_old_build",
        command=["dojob", "rm -rf" ,
         WithProperties("d:\\buildbot\\%(buildername)s\\build")],
        timeout = 4*3600,
        haltOnFailure = True
));

f_win_connector_c_3.addStep(ShellCommand(
        name= "git_checkout",
        command=["dojob", WithProperties("rm -rf src && git clone -b %(branch)s %(repository)s src && cd src && git reset --hard %(revision)s && cd ..")],
        timeout=7200,
	doStepIf=do_step_win
    	));


f_win_connector_c_3.addStep(ShellCommand(
	name="create_dir",
	command=["dojob",
	WithProperties("rm win32 -rf && rm win64 -rf && mkdir win32 && mkdir win64")
	],
	haltOnFailure = False
	));

f_win_connector_c_3.addStep(ShellCommand(
        name= "build_package32",
        env={'PATH': "c:\\tools\\curl\\lib;${PATH}"},
        command=["dojob",
        WithProperties("cd win32 && del CMakeCache.txt && cmake ..\\src -G \"Visual Studio 14 2015\" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_SSL=SCHANNEL -DWITH_SIGNCODE=1 -DWITH_MSI=ON  -DCURL_INCLUDE_DIR=c:\\tools\\curl\\include && cmake --build . --clean-first --config RelWithDebInfo --target package")
        ],
        haltOnFailure = True
        ));

f_win_connector_c_3.addStep(ShellCommand(
        name= "build_package64",
        env={'PATH': "c:\\tools\\curl\\lib64;${PATH}"},
        command=["dojob",
        WithProperties("cd win64 && del CMakeCache.txt && cmake ..\\src -G \"Visual Studio 14 2015 Win64\" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_SSL=SCHANNEL -DWITH_SIGNCODE=1 -DWITH_MSI=ON -DCURL_INCLUDE_DIR=c:\\tools\\curl\\include && cmake --build . --clean-first --config RelWithDebInfo --target package")
        ],
        haltOnFailure = True
        ));

f_win_connector_c_3.addStep(ShellCommand(
        name= "create_publish_dir",
        command=["dojob",
        WithProperties("mkdir c:\\build_archive\\%(buildername)s\%(branch)s\\%(revision)s || exit 0")]
        ))

f_win_connector_c_3.addStep(ShellCommand(
        name= "publish_win32",
        command=["dojob",
        WithProperties("cd win32 && xcopy /y /f win\packaging\*.msi c:\\build_archive\\%(buildername)s\\%(branch)s\\%(revision)s &&  md5sums c:/build_archive/%(buildername)s/%(branch)s/%(revision)s")]
        ))

f_win_connector_c_3.addStep(ShellCommand(
        name= "publish_win64",
        command=["dojob",
        WithProperties("cd win64 && xcopy /y /f win\packaging\*.msi c:\\build_archive\\%(buildername)s\\%(branch)s\\%(revision)s &&  md5sums c:/build_archive/%(buildername)s/%(branch)s/%(revision)s")]
        ))

f_win_connector_c_3.addStep(ShellCommand(
        name= "create_upload_dir",
        command=["dojob",
        WithProperties("if not exist \"c:\\bb\\connector_c_3\\build\\%(revision)s\" mkdir c:\\bb\\connector_c_3\\build\\%(revision)s && xcopy /y /f c:\\build_archive\\%(buildername)s\\%(branch)s\\%(revision)s\\* c:\\bb\\connector_c_3\\build\\%(revision)s")]
        ))

addPackageUploadStepWin(f_win_connector_c_3, 'win')

bld_win_connector_c_3 = {
        'name': "win-connector_c_3",
        'slavename': "win-connectors",
        'builddir': "connector_c_3",
        'factory': f_win_connector_c_3,
        'category': "connectors"
}


f_connector_c= factory.BuildFactory()
f_connector_c.addStep(
                  ShellCommand(name="clean", command=["sh", "-c", WithProperties("""
rm -Rf build
""")]))
f_connector_c.addStep(maybe_bzr_checkout)
f_connector_c.addStep(maybe_git_checkout)

f_connector_c.addStep(ShellCommand(name="build", command=["sh", "-c", WithProperties("""
cmake . -DCMAKE_BUILD_TYPE=RelWithDebInfo
cmake --build . --config RelWithDebInfo --target package
""")]))

def bld_linux_connector_c(name, port, kvm_image):
    args= ["--port="+port, "--user=buildbot", "--smp=4", "--cpu=qemu64"]
    linux_connector_c= factory.BuildFactory()
    linux_connector_c.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))
    linux_connector_c.addStep(ShellCommand(
        description=["rsyncing", "VMs"],
        descriptionDone=["rsync", "VMs"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-build.qcow2",
                 "/kvm/vms/"]))
    linux_connector_c.addStep(Compile(
        description=["building", "linux-connctor_c"],
        descriptionDone=["build", "linux-connctor_c"],
        timeout=3600,
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-build.qcow2"] + args +["vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("""
set -ex
gcc --version
uname -a
rm -rf %(buildername)s
mkdir %(buildername)s
cd %(buildername)s
rm -rf build
#sudo apt-get -y install git
#time bzr co "lp:~maria-captains/mariadb-native-client/trunk" build
git clone --depth 1 -b %(branch)s "https://github.com/MariaDB/mariadb-connector-c.git" build
cd build
cmake . -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGIT_BUILD_SRCPKG=1
cmake --build . --config RelWithDebInfo --target package
make package
ls -l *.tar.gz
ls -l *.zip
"""),
        "= scp -r -P "+port+" "+kvm_scpopt+" buildbot@localhost:/home/buildbot/" + name + "/build/mariadb*tar.gz .",
        "= scp -r -P "+port+" "+kvm_scpopt+" buildbot@localhost:/home/buildbot/" + name + "/build/mariadb*zip .",
        ]))
    linux_connector_c.addStep(SetPropertyFromCommand(
        property="bindistname",
        command=["sh", "-c", WithProperties("if [ -f mariadb*freebsd*tar.gz ]; then basename `ls mariadb*freebsd*tar.gz`;else basename `ls mariadb*linux*tar.gz`;fi")],
        ))
    addPackageUploadStep(linux_connector_c, '"%(bindistname)s"')

    linux_connector_c.addStep(SetPropertyFromCommand(
        property="srcdistname",
        command=["sh", "-c", WithProperties("basename `ls mariadb*src*tar.gz`")],
        ))
    addPackageUploadStep(linux_connector_c, '"%(srcdistname)s"')

    linux_connector_c.addStep(SetPropertyFromCommand(
        property="zipdistname",
        command=["sh", "-c", WithProperties("basename `ls mariadb*src*zip`")],
        ))
    addPackageUploadStep(linux_connector_c, '"%(zipdistname)s"')

    return {'name': name, 'builddir': name,
            'factory': linux_connector_c,
            "slavenames": connector_slaves,
            "category": "connectors"}

bld_linux_x64_connector_c= bld_linux_connector_c("linux_x64-connector_c", "2250", "vm-trusty-amd64");
bld_freebsd_x64_connector_c= bld_linux_connector_c("freebsd_x64-connector_c", "2250", "vm-freebsd101-amd64");
bld_linux_x86_connector_c= bld_linux_connector_c("linux_x86-connector_c", "2250", "vm-trusty-i386");
bld_centos6_i386_connector_c= bld_linux_connector_c("centos6_i386-connector_c", "2250", "vm-centos6-i386");
bld_freebsd11_x86_connector_c= bld_linux_connector_c("freebsd11_x86-connector_c", "2343", "vm-freebsd11-i386");
bld_freebsd11_x64_connector_c= bld_linux_connector_c("freebsd11_x64-connector_c", "2344", "vm-freebsd11-amd64");

execfile("/etc/buildbot/builders/odbc/linux_builders.py");
execfile("/etc/buildbot/builders/odbc/windows_builder.py");





#-------------------------------------------------------------------------------
# FreeBSD Builder
#-------------------------------------------------------------------------------
# initially based on Linux KVM Bintar builder - dbart 2017-02-24

def getFreeBSDBuilder(name, kvm_image, port, cpu, ramdisk=True, catg="experimental"):
    args = ["--port="+port, "--user=buildbot", "--cpu="+cpu, "--smp=4", "--logfile=kernel_"+port+".log"]
    if ramdisk:
        args = args + ["--work-image=/dev/shm/vm-tmp-"+port+".qcow2"]
    bin_fact = factory.BuildFactory()
    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    bin_fact.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))
    bin_fact.addStep(ShellCommand(
        description=["rsyncing", "VMs"],
        descriptionDone=["rsync", "VMs"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-build.qcow2",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-install.qcow2",
                 "/kvm/vms/"]))
    bin_fact.addStep(DownloadSourceTarball())
    bin_fact.addStep(FileDownload(
        mastersrc=WithProperties("%(bakerypath)s"),
        slavedest=WithProperties("%(bakery)s.tar.gz"),
        blocksize=524288,
        doStepIf=branch_is_5_123))
    bin_fact.addStep(ShellCommand(
        description=["getting", ".supp"],
        descriptionDone=["get", ".supp"],
        command=["sh", "-c", WithProperties("""
rm -f compiler_warnings.supp
tar zxf "/tmp/buildcache/%(tarbuildnum)s:%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
ls -l compiler_warnings.supp
exit 0  # best-effort, not fatal if no suppression file
""")]))
    bin_fact.addStep(Compile(
        description=["making", "bintar"],
        descriptionDone=["make", "bintar"],
        timeout=3600,
        logfiles={"kernel": "kernel_"+port+".log"},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command=["runvm"] + args + ["--base-image=/kvm/vms/"+kvm_image+"-build.qcow2", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        ScpSourceIntoVM(port),
        WithProperties("= case '%(branch)s' in *5\\.[123]*) scp -P "+port+" "+kvm_scpopt+" %(bakery)s.tar.gz buildbot@localhost:buildbot/ ;; esac"),
        WithProperties("""
set -ex
cd buildbot
rm -Rf build
case "%(branch)s" in
*5\\.[123]*)
  mkdir build
  cd build
  tar zxf ../%(bakery)s.tar.gz
  cd %(bakery)s
  bakery/autobake51-bintar.sh ../../%(distname)s
  ;;
*)
  tar zxf "%(distname)s"
  mv "%(distdirname)s" build
  cd build
  mkdir mkbin
  cd mkbin
  echo $PATH
  echo $SHELL
  cmake -DBUILD_CONFIG=mysql_release -DWITH_READLINE=1 -DWITH_JEMALLOC=no ..
  make -j4 package VERBOSE=1
  ;;
esac
basename mariadb-*.tar.gz .tar.gz > ../../bindistname.txt
mv "$(cat ../../bindistname.txt).tar.gz" ../
"""),
        WithProperties("= scp -P "+port+" "+kvm_scpopt+" 'buildbot@localhost:buildbot/build/mariadb-*.tar.gz' ."),
        "= scp -P "+port+" "+kvm_scpopt+" buildbot@localhost:buildbot/bindistname.txt .",
]))
    bin_fact.addStep(SetPropertyFromCommand(
        property="bindistname",
        command=["cat", "bindistname.txt"],
        ))
    addPackageArchiveStep(bin_fact, '"%(bindistname)s.tar.gz"', "%(tarbuildnum)s")
    bin_fact.addStep(getMTR(
        description=["testing", "bintar"],
        descriptionDone=["test", "bintar"],
        logfiles={"kernel": "kernel_"+port+".log"},
        mtr_subdir=".",    # Where we scp vardir to
        env={"TERM": "vt102"},
        command=["runvm"] + args + ["--base-image=/kvm/vms/"+kvm_image+"-install.qcow2", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("= scp -P "+port+" "+kvm_scpopt+" %(bindistname)s.tar.gz buildbot@localhost:buildbot/"),
        WithProperties("""
set -ex
cd buildbot
sudo rm -Rf /usr/local/%(bindistname)s
sudo tar zxf %(bindistname)s.tar.gz -C /usr/local/
cd /usr/local/%(bindistname)s
sudo /usr/sbin/useradd mysql
sudo sudo chown -R mysql .
sudo chgrp -R mysql .
sudo scripts/mysql_install_db --no-defaults --user=mysql
sudo chown -R root .
sudo chown -R mysql data mysql-test
cd mysql-test
sudo su -s /bin/sh -c "perl mysql-test-run.pl  --verbose-restart --force --parallel=4 --retry=3 --mem --max-save-core=0 --max-save-datadir=1" mysql
"""),
        WithProperties("! sudo chmod -R go+rX /usr/local/%(bindistname)s/mysql-test/var/ || :"),
        WithProperties(
              "!= scp -rp -P " + port + " " + kvm_scpopt +
              " buildbot@localhost:/usr/local/%(bindistname)s/mysql-test/var/ . || :")]))

    bin_fact.addStep(getMTR(
        hideStepIf=(lambda results, s: results==SKIPPED),
        doStepIf=(lambda(step): step.getProperty("branch") == "bb-10.2-elenst"),
        description=["testing", "bintar", "on", "build", "VM"],
        descriptionDone=["bintar", "on", "build", "VM"],
        logfiles={"kernel": "kernel_"+port+".log"},
        mtr_subdir=".",    # Where we scp vardir to
        env={"TERM": "vt102"},
        command=["runvm"] + args + ["--base-image=/kvm/vms/"+kvm_image+"-build.qcow2", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("= scp -P "+port+" "+kvm_scpopt+" %(bindistname)s.tar.gz buildbot@localhost:buildbot/"),
        WithProperties("""
set -ex
cd buildbot
sudo rm -Rf /usr/local/%(bindistname)s
sudo tar zxf %(bindistname)s.tar.gz -C /usr/local/
cd /usr/local/%(bindistname)s
sudo /usr/sbin/useradd mysql
sudo sudo chown -R mysql .
sudo chgrp -R mysql .
sudo scripts/mysql_install_db --no-defaults --user=mysql
sudo chown -R root .
sudo chown -R mysql data mysql-test
cd mysql-test
sudo su -s /bin/sh -c "perl mysql-test-run.pl  --verbose-restart --force --parallel=4 --retry=3 --mem --max-save-core=0 --max-save-datadir=1" mysql
"""),
        WithProperties("! sudo chmod -R go+rX /usr/local/%(bindistname)s/mysql-test/var/ || :"),
        WithProperties(
              "!= scp -rp -P " + port + " " + kvm_scpopt +
              " buildbot@localhost:/usr/local/%(bindistname)s/mysql-test/var/ . || :")]))


    return {'name': name, 'slavenames': kvm_slaves, 'builddir': name, 'factory': bin_fact,
            "nextBuild": myNextBuild,
            "category": catg }

bld_kvm_freebsd11_x86 = getFreeBSDBuilder("kvm-freebsd11-x86", "vm-freebsd11-i386", "2345", "qemu64", ramdisk=False)
bld_kvm_freebsd11_amd64 = getFreeBSDBuilder("kvm-freebsd11-amd64", "vm-freebsd11-amd64", "2346", "qemu64", ramdisk=False)





#-------------------------------------------------------------------------------
# Solaris amd64 Bintar Builder
#-------------------------------------------------------------------------------

f_sol10_64_bintar = factory.BuildFactory()
f_sol10_64_bintar.addStep(FileDownload(mastersrc=WithProperties("%(tarballpath)s"),
                                       slavedest=WithProperties("%(distname)s"),
                                       blocksize=524288,
))
f_sol10_64_bintar.addStep(ShellCommand(
        description="untarring", descriptionDone="untar",
        command=["sh", "-c", WithProperties("rm -Rf %(distdirname)s && gzip -dc %(distname)s | gtar xf -")]))
f_sol10_64_bintar.addStep(getCompileStep(["sh", "-c", WithProperties("cd %(distdirname)s && BUILD/compile-solaris-amd64 --extra-configs=--without-plugin_innodb_plugin")],
                                         subdir="%(distdirname)s/",
                                         logfiles={"config.log" : WithProperties("%(distdirname)s/config.log")},
                                         env={"EXTRA_FLAGS": "-DFORCE_INIT_OF_VARS",
                                              "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}))
f_sol10_64_bintar.addStep(ShellCommand(
        description="packaging", descriptionDone="package",
        command=["sh", "-c", WithProperties("""
set -ex
cd %(distdirname)s
scripts/make_binary_distribution
ORIG_TAR="`echo mariadb-*.tar.gz`"
ORIG_DIR="`basename ${ORIG_TAR} .tar.gz`"
NEW_DIR="`echo "${ORIG_DIR}" | sed -e 's/-MariaDB//'`"
NEW_TAR="${NEW_DIR}.tar.gz"
if [ "$ORIG_DIR" != "$NEW_DIR" ] ; then
  rm -Rf $ORIG_DIR
  gtar zxf $ORIG_TAR
  mv $ORIG_DIR "${NEW_DIR}"
  gtar zcf "${NEW_TAR}" "${NEW_DIR}/"
fi
echo "${NEW_TAR}" > ../bindistname.txt
""")]))
f_sol10_64_bintar.addStep(SetPropertyFromCommand(
        property="bindistname",
        command=["cat", "bindistname.txt"],
        ))
addPackageArchiveStep(f_sol10_64_bintar, '"%(distdirname)s/%(bindistname)s"', "%(tarbuildnum)s")
f_sol10_64_bintar.addStep(getMTR(
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3 ")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

bld_sol10_64 = {"name": "sol10-64",
                "slavename": "solaris10-x86",
                "builddir": "solaris10-x86",
                "factory": f_sol10_64_bintar,
                "nextBuild": myNextBuild,
                "category": "main",
                }




#-------------------------------------------------------------------------------
# Solaris Sparc Bintar Builder
#-------------------------------------------------------------------------------

f_sol10_sparc_bintar = factory.BuildFactory()
f_sol10_sparc_bintar.addStep(FileDownload(mastersrc=WithProperties("%(tarballpath)s"),
                                       slavedest=WithProperties("%(distname)s"),
                                       blocksize=524288,
))
f_sol10_sparc_bintar.addStep(ShellCommand(
        description="untarring", descriptionDone="untar",
        command=["sh", "-c", WithProperties("rm -Rf %(distdirname)s && gzip -dc %(distname)s | gtar xf -")]))

f_sol10_sparc_bintar.addStep(getCompileStep(["sh", "-c",
        WithProperties("cd %(distdirname)s && "
                       "cmake . -L"
                            " -DCMAKE_BUILD_TYPE=Release"
                            " -DCMAKE_C_COMPILER=cc"
                            " -DCMAKE_CXX_COMPILER=CC"
                            " -DCMAKE_C_FLAGS_RELEASE='-DNDEBUG -xtarget=ultra2 -xarch=sparcvis -xO4 -xstrconst -mt'"
                            " -DCMAKE_CXX_FLAGS_RELEASE='-DNDEBUG -xtarget=ultra2 -xarch=sparcvis -xO4 -noex -mt'"
                            " -DCMAKE_INSTALL_PREFIX=/opt/fli/mysql"
                            " -DINSTALL_SBINDIR=sbin "
                            " -DDEFAULT_SYSCONFDIR=/opt/fli/mysql/etc"
                            " -DENABLED_LOCAL_INFILE=1"
                            " -DMYSQL_UNIX_ADDR=/tmp/.mysql.sock"
                            " -DWITH_EXTRA_CHARSETS=complex"
                            " -DWITH_MYSQLD_LDFLAGS=-lmtmalloc"
                       " && gmake -j6 VERBOSE=1")],
                                         subdir="%(distdirname)s/",
                                         logfiles={"config.log" : WithProperties("%(distdirname)s/config.log")},
                                         env={"LDFLAGS": "-s", "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}))

#f_sol10_sparc_bintar.addStep(getCompileStep(["sh", "-c", WithProperties("cd %(distdirname)s && BUILD/compile-solaris-sparc --extra-configs=--without-plugin_innodb_plugin")],
#                                         subdir="%(distdirname)s/",
#                                         logfiles={"config.log" : WithProperties("%(distdirname)s/config.log")},
#                                         env={"EXTRA_FLAGS": "-DFORCE_INIT_OF_VARS",
#                                              "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}))

f_sol10_sparc_bintar.addStep(ShellCommand(
        description="packaging", descriptionDone="package",
        command=["sh", "-c", WithProperties("""
set -ex
cd %(distdirname)s
scripts/make_binary_distribution
ORIG_TAR="`echo mariadb-*.tar.gz`"
ORIG_DIR="`basename ${ORIG_TAR} .tar.gz`"
NEW_DIR="`echo "${ORIG_DIR}" | sed -e 's/-MariaDB//'`"
NEW_TAR="${NEW_DIR}.tar.gz"
if [ "$ORIG_DIR" != "$NEW_DIR" ] ; then
  rm -Rf $ORIG_DIR
  gtar zxf $ORIG_TAR
  mv $ORIG_DIR "${NEW_DIR}"
  gtar zcf "${NEW_TAR}" "${NEW_DIR}/"
fi
echo "${NEW_TAR}" > ../bindistname.txt
""")]))
f_sol10_sparc_bintar.addStep(SetPropertyFromCommand(
        property="bindistname",
        command=["cat", "bindistname.txt"],
        ))
addPackageArchiveStep(f_sol10_sparc_bintar, '"%(distdirname)s/%(bindistname)s"', "%(tarbuildnum)s")
f_sol10_sparc_bintar.addStep(getMTR(
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3 ")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

bld_sol10_sparc = {"name": "sol10-sparc",
                "slavename": "solaris-sparc",
                "builddir": "solaris-sparc",
                "factory": f_sol10_sparc_bintar,
                "nextBuild": myNextBuild,
                "category": "experimental",
                }


#-------------------------------------------------------------------------------
# Labrador Mac Builder
#-------------------------------------------------------------------------------
# mac mini server 8GB, 10.7

#test_labrador = getMTR(
#    test_type="nm",
#    test_info="Normal run, no --ps-protocol",
#    env={"MTR_FEEDBACK_PLUGIN": "1",
#         "LC_ALL": "en_GB.UTF-8"},
#    command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3  --max-save-core=0 --max-save-datadir=1"])

f_dbg_labrador = factory.BuildFactory()
f_dbg_labrador.addStep(maybe_bzr_checkout)
f_dbg_labrador.addStep(maybe_git_checkout)
f_dbg_labrador.addStep(
     getCompileStep(["sh", "-c", "cmake . -DBUILD_CONFIG=mysql_release -DWITH_JEMALLOC=no && make -j4 package"],
     env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
          "CC": "gcc",
          "CXX": "g++",
          "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"},
     doStepIf=branch_is_5_5_or_later)
)

f_dbg_labrador.addStep(SetPropertyFromCommand(
    property="bindistname",
    command=["sh", "-c", WithProperties("basename `ls mariadb*tar.gz`")],
    ))

f_dbg_labrador.addStep(SetPropertyFromCommand(
    property="distdirname",
    command=["sh", "-c", WithProperties("pwd")],
    ))

addPackageUploadStep(f_dbg_labrador, '"%(bindistname)s"')

f_dbg_labrador.addStep(test_mac)

bld_labrador = {"name": "labrador",
                 "slavename": "labrador",
                 "builddir": "labrador",
                 "factory": f_dbg_labrador,
                 "nextBuild": myNextBuild,
                 "category": "main",
                 }

#-------------------------------------------------------------------------------
# dbart Mac Builder
#-------------------------------------------------------------------------------
# Mac Mini, MacOS 10.12

# Bintar builds ----------------------------------------------------------------
f_mac_1012_bintar = factory.BuildFactory()
f_mac_1012_bintar.addStep(maybe_bzr_checkout)
f_mac_1012_bintar.addStep(maybe_git_checkout)
f_mac_1012_bintar.addStep(
     getCompileStep(["sh", "-c", "cmake . -DBUILD_CONFIG=mysql_release -DWITH_SSL=yes -DTOKUDB_OK=0 -DWITH_JEMALLOC=no && make -j4 package"],
     env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
          "CXX": "g++",
          "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"},
     doStepIf=branch_is_5_5_or_later)
)

f_mac_1012_bintar.addStep(SetPropertyFromCommand(
    property="bindistname",
    command=["sh", "-c", WithProperties("basename `ls mariadb*tar.gz`")],
    ))

f_mac_1012_bintar.addStep(SetPropertyFromCommand(
    property="distdirname",
    command=["sh", "-c", WithProperties("pwd")],
    ))

addPackageUploadStep(f_mac_1012_bintar, '"%(bindistname)s"')

f_mac_1012_bintar.addStep(test_mac)

bld_mac_1012_bintar = {"name": "mac-1012-bintar",
                 "slavename": "db-mac-1012",
                 "builddir": "mac-1012-bintar",
                 "factory": f_mac_1012_bintar,
                 "nextBuild": myNextBuild,
                 "category": "experimental",
                 }

# Pkg builds -------------------------------------------------------------------
f_mac_1012_pkg = factory.BuildFactory()
f_mac_1012_pkg.addStep(maybe_bzr_checkout)
f_mac_1012_pkg.addStep(maybe_git_checkout)
f_mac_1012_pkg.addStep(
     getCompileStep(["sh", "-c", "cmake . -DBUILD_CONFIG=mysql_release -DWITH_SSL=bundled -DTOKUDB_OK=0 -DWITH_JEMALLOC=no -DMYSQL_UNIX_ADDR=/usr/local/mariadb/data/mariadb.sock -DCMAKE_INSTALL_PREFIX=/usr/local/mariadb/server -DINSTALL_MYSQLDATADIR=/usr/local/mariadb/data -DDEFAULT_SYSCONFDIR=/usr/local/mariadb/etc -DWITH_EMBEDDED_SERVER=OFF -DWITH_UNIT_TESTS=OFF -DINSTALL_MYSQLTESTDIR= -DWITH_WSREP=OFF -DGNUTLS_LIBRARY='/usr/local/lib/libgnutls.a;/usr/local/lib/libnettle.a;/usr/local/lib/libtasn1.a;/usr/local/lib/libgmp.a;/usr/local/lib/libhogweed.a' && make -j4 package && mkpkg mariadb*tar.gz"],
     env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
          "CXX": "g++",
          "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"},
     doStepIf=branch_is_5_5_or_later)
)

f_mac_1012_pkg.addStep(SetPropertyFromCommand(
    property="bindistname",
    command=["sh", "-c", WithProperties("basename `ls mariadb*pkg`")],
    ))

f_mac_1012_pkg.addStep(SetPropertyFromCommand(
    property="distdirname",
    command=["sh", "-c", WithProperties("pwd")],
    ))

addPackageUploadStep(f_mac_1012_pkg, '"%(bindistname)s"')

f_mac_1012_pkg.addStep(test_mac)

bld_mac_1012_pkg = {"name": "mac-1012-pkg",
                 "slavename": "db-mac-1012",
                 "builddir": "mac-1012-pkg",
                 "factory": f_mac_1012_pkg,
                 "nextBuild": myNextBuild,
                 "category": "experimental",
                 }


#-------------------------------------------------------------------------------
# IBM System Z RHEL6 Bintar Builder
#-------------------------------------------------------------------------------
f_ibmz_rhel6_bintar = factory.BuildFactory()
f_ibmz_rhel6_bintar.addStep(maybe_bzr_checkout)
f_ibmz_rhel6_bintar.addStep(maybe_git_checkout)
f_ibmz_rhel6_bintar.addStep(
    getCompileStep(["sh", "-c", "git clean -dfX && cmake . -DBUILD_CONFIG=mysql_release -DWITH_SSL=system -DWITHOUT_CONNECT=ON -DWITH_WSREP=no -DWITH_JEMALLOC=no && make -j4 package"],
    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"})
)

f_ibmz_rhel6_bintar.addStep(SetPropertyFromCommand(
        property="bindistname",
        command=["sh", "-c", WithProperties("basename `ls mariadb*tar.gz`")],
        ))

f_ibmz_rhel6_bintar.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        ))

addPackageUploadStep(f_ibmz_rhel6_bintar, '"%(bindistname)s"')

f_ibmz_rhel6_bintar.addStep(getMTR(
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --parallel=4 ")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

f_ibmz_rhel6_bintar.addStep(getMTR(
        test_type="xtra-big",
        test_info="Some additional test suites, with --big",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl " +
                       "--verbose-restart --force --parallel=4  " +
                       "--suite=funcs_1,funcs_2,stress,jp --big " +
                       "--testcase-timeout=45")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

f_ibmz_rhel6_bintar.addStep(RemoveDirectory(
    name="remove_build",
    dir=WithProperties("%(distdirname)s"),
    alwaysRun=True));

bld_ibmz_rhel6_bintar = {"name": "ibmz-rhel6-bintar",
                "slavename": "ibmz-rhel6",
                "builddir": "ibmz-rhel6-bintar",
                "factory": f_ibmz_rhel6_bintar,
                "nextBuild": myNextBuild,
                "category": "experimental",
                }



#-------------------------------------------------------------------------------
# IBM System Z RHEL 6 RPM Builder
#-------------------------------------------------------------------------------
f_ibmz_rhel6_rpm = factory.BuildFactory()
f_ibmz_rhel6_rpm.addStep(maybe_bzr_checkout)
f_ibmz_rhel6_rpm.addStep(maybe_git_checkout)
f_ibmz_rhel6_rpm.addStep(
    getCompileStep(["sh", "-c", "git clean -dfX && export PATH=/opt/at7.0/bin:$PATH && cmake . -DBUILD_CONFIG=mysql_release -DWITH_WSREP=no -DWITH_JEMALLOC=no -DRPM=rhel6 && make -j4 package VERBOSE=1"],
    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"})
)

f_ibmz_rhel6_rpm.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        ))

f_ibmz_rhel6_rpm.addStep(ShellCommand(
    description=["archiving"],
    descriptionDone=["archive"],
    command=["sh", "-c", WithProperties("""
set -ex
rm -Rf rpms
mkdir -p rpms
""" + 'cp -rp *.rpm rpms/\n' + """
cd rpms
find . -type f \! -name md5sums.txt|xargs md5sum > md5sums.txt
""")]))

addPackageUploadStep(f_ibmz_rhel6_rpm, 'rpms')

f_ibmz_rhel6_rpm.addStep(RemoveDirectory(
        name="remove_build",
        dir=WithProperties("%(distdirname)s"),
        alwaysRun=True));

bld_ibmz_rhel6_rpm = {"name": "ibmz-rhel6-rpm",
                "slavename": "ibmz-rhel6",
                "builddir": "ibmz-rhel6-rpm",
                "factory": f_ibmz_rhel6_rpm,
                "nextBuild": myNextBuild,
                "category": "experimental",
                }



#-------------------------------------------------------------------------------
# IBM System Z SLES11 Bintar Builder
#-------------------------------------------------------------------------------
f_ibmz_sles11_bintar = factory.BuildFactory()
f_ibmz_sles11_bintar.addStep(maybe_bzr_checkout)
f_ibmz_sles11_bintar.addStep(maybe_git_checkout)
f_ibmz_sles11_bintar.addStep(
    getCompileStep(["sh", "-c", "git clean -dfX && cmake . -DBUILD_CONFIG=mysql_release -DWITH_SSL=system -DWITHOUT_CONNECT=ON -DWITH_WSREP=no -DWITH_JEMALLOC=no && make -j4 package"],
    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"})
)

f_ibmz_sles11_bintar.addStep(SetPropertyFromCommand(
        property="bindistname",
        command=["sh", "-c", WithProperties("basename `ls mariadb*tar.gz`")],
        ))

f_ibmz_sles11_bintar.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        ))

addPackageUploadStep(f_ibmz_sles11_bintar, '"%(bindistname)s"')

f_ibmz_sles11_bintar.addStep(getMTR(
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --parallel=4 ")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

f_ibmz_sles11_bintar.addStep(getMTR(
        test_type="xtra-big",
        test_info="Some additional test suites, with --big",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl " +
                       "--verbose-restart --force --parallel=4  " +
                       "--suite=funcs_1,funcs_2,stress,jp --big " +
                       "--testcase-timeout=45")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

f_ibmz_sles11_bintar.addStep(RemoveDirectory(
    name="remove_build",
    dir=WithProperties("%(distdirname)s"),
    alwaysRun=True));

bld_ibmz_sles11_bintar = {"name": "ibmz-sles11-bintar",
                "slavename": "ibmz-sles11",
                "builddir": "ibmz-sles11-bintar",
                "factory": f_ibmz_sles11_bintar,
                "nextBuild": myNextBuild,
                "category": "experimental",
                }



#-------------------------------------------------------------------------------
# IBM System Z SLES 11 RPM Builder
#-------------------------------------------------------------------------------
f_ibmz_sles11_rpm = factory.BuildFactory()
f_ibmz_sles11_rpm.addStep(maybe_bzr_checkout)
f_ibmz_sles11_rpm.addStep(maybe_git_checkout)
f_ibmz_sles11_rpm.addStep(
    getCompileStep(["sh", "-c", "git clean -dfX && export PATH=/opt/at7.0/bin:$PATH && cmake . -DBUILD_CONFIG=mysql_release -DWITH_WSREP=no -DWITH_JEMALLOC=no -DRPM=sles11 && make -j4 package VERBOSE=1"],
    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"})
)

f_ibmz_sles11_rpm.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        ))

f_ibmz_sles11_rpm.addStep(ShellCommand(
    description=["archiving"],
    descriptionDone=["archive"],
    command=["sh", "-c", WithProperties("""
set -ex
rm -Rf rpms
mkdir -p rpms
""" + 'cp -rp *.rpm rpms/\n' + """
cd rpms
find . -type f \! -name md5sums.txt|xargs md5sum > md5sums.txt
""")]))

addPackageUploadStep(f_ibmz_sles11_rpm, 'rpms')

f_ibmz_sles11_rpm.addStep(RemoveDirectory(
        name="remove_build",
        dir=WithProperties("%(distdirname)s"),
        alwaysRun=True));

bld_ibmz_sles11_rpm = {"name": "ibmz-sles11-rpm",
                "slavename": "ibmz-sles11",
                "builddir": "ibmz-sles11-rpm",
                "factory": f_ibmz_sles11_rpm,
                "nextBuild": myNextBuild,
                "category": "experimental",
                }



#-------------------------------------------------------------------------------
# RHEL 6 P8 ppc64 Bintar Builder
#-------------------------------------------------------------------------------
f_p8_rhel6_bintar = factory.BuildFactory()
f_p8_rhel6_bintar.addStep(maybe_bzr_checkout)
f_p8_rhel6_bintar.addStep(maybe_git_checkout)

f_p8_rhel6_bintar.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        alwaysRun=True))

f_p8_rhel6_bintar.addStep(
    getCompileStep(["sh", "-c", "git clean -dfX && export PATH=/opt/at7.0/bin:$PATH && cmake . -DBUILD_CONFIG=mysql_release -DWITH_SSL=system -DWITHOUT_CONNECT=ON -DWITH_JEMALLOC=yes && make -j4 package"],
    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
#        "CXX": "g++ -mminimal-toc",
        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"})
)

f_p8_rhel6_bintar.addStep(SetPropertyFromCommand(
        property="bindistname",
        command=["sh", "-c", WithProperties("basename `ls mariadb*tar.gz`")],
        ))

addPackageUploadStep(f_p8_rhel6_bintar, '"%(bindistname)s"')

## If needed, here is a step that archives builds locally under
## /opt/buildbot/builds/:
#f_p8_rhel6_bintar.addStep(ShellCommand(
#        description=["archiving"],
#        descriptionDone=["archive"],
#        doStepIf=in_savedPackageBranches,
#        command=["sh", "-c", WithProperties("""
#set -ex
#rm -Rf "./%(revision)s"
#mkdir -p "%(revision)s"
#chmod 755 "%(revision)s"
#""" + 'cp -rp ' + '"%(bindistname)s"' + ' "%(revision)s/"\n' + """
#cd "%(revision)s"
#find . -type f \! -name md5sums.txt|xargs md5sum > md5sums.txt
#find . -type f|xargs chmod 644
#cd ..
#if [ ! -e "/opt/buildbot/%(branch)s/%(revision)s/%(buildername)s" ]
#then
#mkdir -p "/opt/buildbot/builds/%(branch)s/%(revision)s/%(buildername)s"
#fi
#rsync -a %(revision)s/ /opt/buildbot/builds/%(branch)s/%(revision)s/%(buildername)s/
#""")]))

f_p8_rhel6_bintar.addStep(ShellCommand(
    name="cleanup",
    description=["cleanup"],
    descriptionDone=["cleanup"],
    command=["sh", "-c", "rm -rf /dev/shm/var_*"]))

f_p8_rhel6_bintar.addStep(getMTR(
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --parallel=4 --mem ")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))


## Here and for other p8 builders, commented as requested in MDEV-7439
#f_p8_rhel6_bintar.addStep(getMTR(
#        test_type="xtra",
#        test_info="Some additional test suites",
#        env={"MTR_FEEDBACK_PLUGIN": "1"},
#        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl " +
#                       "--verbose-restart --force --parallel=4  " +
#                       "--suite=funcs_1,funcs_2,stress,jp ")],
#                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

f_p8_rhel6_bintar.addStep(getMTR(
        test_type="xtra-big",
        test_info="Some additional test suites, with --big",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl " +
                       "--verbose-restart --force --parallel=4 " +
                       "--suite=funcs_1,funcs_2,stress,jp --big --mem " +
                       "--testcase-timeout=45")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

f_p8_rhel6_bintar.addStep(RemoveDirectory(
	name="remove_build",
	dir=WithProperties("%(distdirname)s"),
	alwaysRun=True));


bld_p8_rhel6_bintar = {"name": "p8-rhel6-bintar",
#                "slavename": "power8-vlp01",
                "slavenames": ["power8-vlp01", "p8-rhel6-bb"],
                "builddir": "p8-rhel6-bintar",
                "factory": f_p8_rhel6_bintar,
                "nextBuild": myNextBuild,
                "category": "main",
                }


#-------------------------------------------------------------------------------
# RHEL 6 P8 ppc64 Bintar Debug Builder
#-------------------------------------------------------------------------------
f_p8_rhel6_bintar_debug = factory.BuildFactory()
f_p8_rhel6_bintar_debug.addStep(maybe_bzr_checkout)
f_p8_rhel6_bintar_debug.addStep(maybe_git_checkout)

f_p8_rhel6_bintar_debug.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        alwaysRun=True))

f_p8_rhel6_bintar_debug.addStep(ShellCommand(
    description=["diskspace", "before", "build"],
    descriptionDone=["diskspace", "before", "build"],
    command=["sh", "-c", WithProperties("""df -k""")]))

f_p8_rhel6_bintar_debug.addStep(
#    getCompileStep(["sh", "-c", "export PATH=/opt/at7.0/bin:$PATH && BUILD/compile-ppc-debug-max"],
    getCompileStep(["sh", "-c", "git clean -dfX && export PATH=/opt/at7.0/bin:$PATH && cmake . -DCMAKE_BUILD_TYPE=Debug -DMYSQL_MAINTAINER_MODE=ON -DWITHOUT_CONNECT=ON && make -j4 package"],
    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
        "EXTRA_CONFIGS": "--with-embedded-privilege-control",
        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"})
)

f_p8_rhel6_bintar_debug.addStep(SetPropertyFromCommand(
        property="bindistname",
        command=["sh", "-c", WithProperties("basename `ls mariadb*tar.gz`")],
        ))

addPackageUploadStep(f_p8_rhel6_bintar_debug, '"%(bindistname)s"')

f_p8_rhel6_bintar_debug.addStep(ShellCommand(
    description=["diskspace", "before", "test"],
    descriptionDone=["diskspace", "before", "test"],
    command=["sh", "-c", WithProperties("""df -k""")]))

f_p8_rhel6_bintar_debug.addStep(ShellCommand(
    name="cleanup",
    description=["cleanup"],
    descriptionDone=["cleanup"],
    command=["sh", "-c", "rm -rf /dev/shm/var_*"]))

f_p8_rhel6_bintar_debug.addStep(getMTR(
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --parallel=4 --mem ")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

#f_p8_rhel6_bintar_debug.addStep(getMTR(
#        test_type="xtra",
#        test_info="Some additional test suites",
#        env={"MTR_FEEDBACK_PLUGIN": "1"},
#        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl " +
#                       "--verbose-restart --force --parallel=4  " +
#                       "--suite=funcs_1,funcs_2,stress,jp ")],
#                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

f_p8_rhel6_bintar_debug.addStep(getMTR(
        test_type="xtra-big",
        test_info="Some additional test suites, with --big",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl " +
                       "--verbose-restart --force --parallel=4  " +
                       "--suite=funcs_1,funcs_2,stress,jp --big --mem " +
                       "--testcase-timeout=45")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

f_p8_rhel6_bintar_debug.addStep(ShellCommand(
    description=["diskspace", "after", "test"],
    descriptionDone=["diskspace", "after", "test"],
    command=["sh", "-c", WithProperties("""df -k""")],
    alwaysRun=True))


f_p8_rhel6_bintar_debug.addStep(RemoveDirectory(
        name="remove_build",
        dir=WithProperties("%(distdirname)s"),
        alwaysRun=True));

bld_p8_rhel6_bintar_debug = {"name": "p8-rhel6-bintar-debug",
#                "slavename": "power8-vlp01",
                "slavenames": ["power8-vlp01", "p8-rhel6-bb"],
                "builddir": "p8-rhel6-bintar-debug",
                "factory": f_p8_rhel6_bintar_debug,
                "nextBuild": myNextBuild,
                "category": "main",
                }


#-------------------------------------------------------------------------------
# RHEL 6 P8 ppc64 RPM Builder
#-------------------------------------------------------------------------------
f_p8_rhel6_rpm = factory.BuildFactory()
f_p8_rhel6_rpm.addStep(maybe_bzr_checkout)
f_p8_rhel6_rpm.addStep(maybe_git_checkout)

f_p8_rhel6_rpm.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        alwaysRun=True))

f_p8_rhel6_rpm.addStep(
    getCompileStep(["sh", "-c", "git clean -dfX && export PATH=/opt/at7.0/bin:$PATH && cmake . -DBUILD_CONFIG=mysql_release -DWITH_JEMALLOC=yes -DRPM=rhel6 && make -j4 package VERBOSE=1"],
    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"})
)

f_p8_rhel6_rpm.addStep(ShellCommand(
    description=["archiving"],
    descriptionDone=["archive"],
    command=["sh", "-c", WithProperties("""
set -ex
rm -Rf rpms
mkdir -p rpms
""" + 'cp -rp *.rpm rpms/\n' + """
cd rpms
find . -type f \! -name md5sums.txt|xargs md5sum > md5sums.txt
""")]))

addPackageUploadStep(f_p8_rhel6_rpm, 'rpms')

f_p8_rhel6_rpm.addStep(RemoveDirectory(
        name="remove_build",
        dir=WithProperties("%(distdirname)s"),
        alwaysRun=True));

bld_p8_rhel6_rpm = {"name": "p8-rhel6-rpm",
#                "slavename": "power8-vlp01",
                "slavenames": ["power8-vlp01", "p8-rhel6-bb"],
                "builddir": "p8-rhel6-rpm",
                "factory": f_p8_rhel6_rpm,
                "nextBuild": myNextBuild,
                "category": "main",
                }


#-------------------------------------------------------------------------------
# RHEL 6 P8 ppc64 RPM Builder for Galera
#-------------------------------------------------------------------------------

f_p8_rhel6_rpm_gal = factory.BuildFactory()

f_p8_rhel6_rpm_gal.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        alwaysRun=True))

f_p8_rhel6_rpm_gal.addStep(Compile(
        description=["making", "rpms"],
        descriptionDone=["make", "rpms"],
        timeout=7200,
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command=["sh", "-c", WithProperties("""
set -ex
rm -Rf rpms build
mkdir rpms
git clone -b %(branch)s "https://github.com/MariaDB/galera.git" build
cd build
export PATH=/opt/at7.0/bin:$PATH
./scripts/build.sh -p
cp `find *.rpm -maxdepth 1 -type f` ../rpms
cd ..
        """),
        ]))

f_p8_rhel6_rpm_gal.addStep(ShellCommand(
        description=["archiving"],
        descriptionDone=["archive"],
        command=["sh", "-c", WithProperties("""
set -ex
cd rpms
find . -type f \! -name md5sums.txt|xargs md5sum > md5sums.txt
""")]))

addPackageUploadStep(f_p8_rhel6_rpm_gal, 'rpms')

f_p8_rhel6_rpm_gal.addStep(RemoveDirectory(
        name="remove_build",
        dir=WithProperties("%(distdirname)s"),
        alwaysRun=True));

gal_bld_p8_rhel6_rpm = {"name": "p8-rhel6-rpm-gal",
#                "slavename": "power8-vlp01",
                "slavenames": ["power8-vlp01", "p8-rhel6-bb"],
                "builddir": "p8-rhel6-rpm-gal",
                "factory": f_p8_rhel6_rpm_gal,
                "nextBuild": myNextBuild,
                "category": "galera",
                }

# 2017-06-05 : removing IBM Trusty builders in favor of kvm-deb-trusty-ppc64le - dbart
##-------------------------------------------------------------------------------
## Ubuntu Trusty P8 ppc64le Bintar Builder
##-------------------------------------------------------------------------------
#f_p8_trusty_bintar = factory.BuildFactory()
#f_p8_trusty_bintar.addStep(maybe_bzr_checkout)
#f_p8_trusty_bintar.addStep(maybe_git_checkout)
#
#f_p8_trusty_bintar.addStep(SetPropertyFromCommand(
#        property="distdirname",
#        command=["sh", "-c", WithProperties("pwd")],
#        alwaysRun=True))
#
#f_p8_trusty_bintar.addStep(
#    getCompileStep(["sh", "-c", "git clean -dfX && export JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-ppc64el && export PATH=/opt/at8.0/bin:$PATH && cmake . -DBUILD_CONFIG=mysql_release -DWITHOUT_OQGRAPH=ON -DWITH_SSL=system && make -j4 package"],
#    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
##        "CXX": "g++ -mminimal-toc",
#        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"})
#)
#
#f_p8_trusty_bintar.addStep(SetPropertyFromCommand(
#        property="bindistname",
#        command=["sh", "-c", WithProperties("basename `ls mariadb*tar.gz`")],
#        ))
#
#addPackageUploadStep(f_p8_trusty_bintar, '"%(bindistname)s"')
#
#f_p8_trusty_bintar.addStep(ShellCommand(
#    name="cleanup",
#    description=["cleanup"],
#    descriptionDone=["cleanup"],
#    command=["sh", "-c", "rm -rf /dev/shm/var_*"]))
#
#f_p8_trusty_bintar.addStep(getMTR(
#        test_type="nm",
#        test_info="Normal run, no --ps-protocol",
#        env={"MTR_FEEDBACK_PLUGIN": "1"},
#        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --parallel=4 --mem ")],
#                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))
#
##f_p8_trusty_bintar.addStep(getMTR(
##        test_type="xtra",
##        test_info="Some additional test suites",
##        env={"MTR_FEEDBACK_PLUGIN": "1"},
##        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl " +
##                       "--verbose-restart --force --parallel=4  " +
##                       "--suite=funcs_1,funcs_2,stress,jp ")],
##                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))
#
#f_p8_trusty_bintar.addStep(getMTR(
#        test_type="xtra-big",
#        test_info="Some additional test suites, with --big",
#        env={"MTR_FEEDBACK_PLUGIN": "1"},
#        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl " +
#                       "--verbose-restart --force --parallel=4  " +
#                       "--suite=funcs_1,funcs_2,stress,jp --big --mem " +
#                       "--testcase-timeout=45")],
#                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))
#
#f_p8_trusty_bintar.addStep(RemoveDirectory(
#        name="remove_build",
#        dir=WithProperties("%(distdirname)s"),
#        alwaysRun=True));
#
#bld_p8_trusty_bintar = {"name": "p8-trusty-bintar",
##                "slavename": "power8-vlp04",
#                "slavenames": ["power8-vlp04", "p8-trusty-bb"],
#                "builddir": "p8-trusty-bintar",
#                "factory": f_p8_trusty_bintar,
#                "nextBuild": myNextBuild,
#                "category": "experimental",
#                }


# 2017-06-05 : removing IBM Trusty builders in favor of kvm-deb-trusty-ppc64le - dbart
##-------------------------------------------------------------------------------
## Ubuntu Trusty P8 ppc64le Bintar Debug Builder
##-------------------------------------------------------------------------------
#f_p8_trusty_bintar_debug = factory.BuildFactory()
#f_p8_trusty_bintar_debug.addStep(maybe_bzr_checkout)
#f_p8_trusty_bintar_debug.addStep(maybe_git_checkout)
#
#f_p8_trusty_bintar_debug.addStep(SetPropertyFromCommand(
#        property="distdirname",
#        command=["sh", "-c", WithProperties("pwd")],
#        alwaysRun=True))
#
#f_p8_trusty_bintar_debug.addStep(
#    getCompileStep(["sh", "-c", "git clean -dfX && export JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-ppc64el && export PATH=/opt/at8.0/bin:$PATH && cmake . -DCMAKE_BUILD_TYPE=Debug -DWITHOUT_OQGRAPH=ON -DMYSQL_MAINTAINER_MODE=ON && make -j4 package"],
#    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
#        "EXTRA_CONFIGS": "--with-embedded-privilege-control",
#        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"})
#)
#
#f_p8_trusty_bintar_debug.addStep(SetPropertyFromCommand(
#        property="bindistname",
#        command=["sh", "-c", WithProperties("basename `ls mariadb*tar.gz`")],
#        ))
#
#addPackageUploadStep(f_p8_trusty_bintar_debug, '"%(bindistname)s"')
#
#f_p8_trusty_bintar_debug.addStep(ShellCommand(
#    name="cleanup",
#    description=["cleanup"],
#    descriptionDone=["cleanup"],
#    command=["sh", "-c", "rm -rf /dev/shm/var_*"]))
#
#f_p8_trusty_bintar_debug.addStep(getMTR(
#        test_type="nm",
#        test_info="Normal run, no --ps-protocol",
#        env={"MTR_FEEDBACK_PLUGIN": "1"},
#        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --parallel=4 --mem ")],
#                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))
#
##f_p8_trusty_bintar_debug.addStep(getMTR(
##        test_type="xtra",
##        test_info="Some additional test suites",
##        env={"MTR_FEEDBACK_PLUGIN": "1"},
##        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl " +
##                       "--verbose-restart --force --parallel=4  " +
##                       "--suite=funcs_1,funcs_2,stress,jp ")],
##                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))
#
#f_p8_trusty_bintar_debug.addStep(getMTR(
#        test_type="xtra-big",
#        test_info="Some additional test suites, with --big",
#        env={"MTR_FEEDBACK_PLUGIN": "1"},
#        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl " +
#                       "--verbose-restart --force --parallel=4 --mem " +
#                       "--suite=funcs_1,funcs_2,stress,jp --big " +
#                       "--testcase-timeout=45")],
#                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))
#
#f_p8_trusty_bintar_debug.addStep(RemoveDirectory(
#        name="remove_build",
#        dir=WithProperties("%(distdirname)s"),
#        alwaysRun=True));
#
#bld_p8_trusty_bintar_debug = {"name": "p8-trusty-bintar-debug",
##                "slavename": "power8-vlp04",
#                "slavenames": ["power8-vlp04", "p8-trusty-bb"],
#                "builddir": "p8-trusty-bintar-debug",
#                "factory": f_p8_trusty_bintar_debug,
#                "nextBuild": myNextBuild,
#                "category": "experimental",
#                }

# 2017-06-05 : removing IBM Trusty builders in favor of kvm-deb-trusty-ppc64le - dbart
##-------------------------------------------------------------------------------
## Ubuntu Trusty P8 ppc64le DEB Builder
##-------------------------------------------------------------------------------
#f_p8_trusty_deb = factory.BuildFactory()
#f_p8_trusty_deb.addStep(maybe_bzr_checkout)
#f_p8_trusty_deb.addStep(maybe_git_checkout)
#
#f_p8_trusty_deb.addStep(SetPropertyFromCommand(
#        property="distdirname",
#        command=["sh", "-c", WithProperties("pwd")],
#        alwaysRun=True))
#
#f_p8_trusty_deb.addStep(
#    getCompileStep(["sh", "-c", 'git clean -dfX && export JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-ppc64el && export PATH=/opt/at8.0/bin:$PATH && echo | MYSQL_BUILD_CC=/opt/at8.0/bin/gcc MYSQL_BUILD_CXX=/opt/at8.0/bin/g++ MYSQL_BUILD_PATH="/opt/at8.0/bin:$PATH" debian/autobake-deb.sh'],
#    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
#        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"})
#)
#
#f_p8_trusty_deb.addStep(ShellCommand(
#    description=["archiving"],
#    descriptionDone=["archive"],
#    command=["sh", "-c", WithProperties("""
#set -ex
#rm -Rf debs
#mkdir -vp debs/binary
#mkdir -vp debs/source
#""" + 'mv -v $(find .. -maxdepth 1 -type f) debs/binary/\n' + """
#cd debs
#dpkg-scanpackages binary /dev/null | gzip -9c > binary/Packages.gz
#dpkg-scansources source /dev/null | gzip -9c > source/Sources.gz
#""")]))
#
#addPackageUploadStep(f_p8_trusty_deb, 'debs')
#
#f_p8_trusty_deb.addStep(RemoveDirectory(
#        name="remove_build",
#        dir=WithProperties("%(distdirname)s"),
#        alwaysRun=True));
#
#bld_p8_trusty_deb = {"name": "p8-trusty-deb",
##                "slavename": "power8-vlp04",
#                "slavenames": ["power8-vlp04", "p8-trusty-bb"],
#                "builddir": "p8-trusty-deb",
#                "factory": f_p8_trusty_deb,
#                "nextBuild": myNextBuild,
#                "category": "experimental",
#                }


# 2017-06-05 : removing IBM Trusty builders in favor of kvm-deb-trusty-ppc64le - dbart
##-------------------------------------------------------------------------------
## Ubuntu Trusty P8 ppc64le DEB Builder for Galera
##-------------------------------------------------------------------------------
#f_p8_trusty_deb_gal = factory.BuildFactory()
#
#f_p8_trusty_deb_gal.addStep(SetPropertyFromCommand(
#        property="distdirname",
#        command=["sh", "-c", WithProperties("pwd")],
#        alwaysRun=True))
#
#f_p8_trusty_deb_gal.addStep(Compile(
#        description=["making", "debs"],
#        descriptionDone=["make", "debs"],
#        timeout=3600,
#        warningPattern=gccWarningPattern,
#        warningExtractor=Compile.warnExtractFromRegexpGroups,
#        suppressionFile=WithProperties("compiler_warnings.supp"),
#        env={"TERM": "vt102"},
#        command=["sh", "-c", WithProperties("""
#set -ex
#rm -Rf debs build
#mkdir -p debs/binary debs/source
#git clone -b %(branch)s "https://github.com/MariaDB/galera.git" build
#cd build
#export PATH=/opt/at8.0/bin:$PATH
#./scripts/build.sh -p
#cp `find ../*.deb -maxdepth 1 -type f` ../debs/binary/
#cp `find ../*.changes -maxdepth 1 -type f` ../debs/binary/
#cd ../debs
#dpkg-scanpackages binary /dev/null | gzip -9c > binary/Packages.gz
#dpkg-scansources source /dev/null | gzip -9c > source/Sources.gz
#""")]))
#
#addPackageUploadStep(f_p8_trusty_deb_gal, 'debs')
#
#f_p8_trusty_deb_gal.addStep(RemoveDirectory(
#        name="remove_build",
#        dir=WithProperties("%(distdirname)s"),
#        alwaysRun=True));
#
#gal_bld_p8_trusty_deb = {"name": "p8-trusty-deb-gal",
##                "slavename": "power8-vlp04",
#                "slavenames": ["power8-vlp04", "p8-trusty-bb"],
#                "builddir": "p8-trusty-deb-gal",
#                "factory": f_p8_trusty_deb_gal,
#                "nextBuild": myNextBuild,
#                "category": "galera",
#                }

# 2017-06-05 : removing IBM Xenial builders in favor of kvm-deb-xenial-ppc64le - dbart
##-------------------------------------------------------------------------------
## Ubuntu Xenial P8 ppc64le Bintar Builder
##-------------------------------------------------------------------------------
#f_p8_xenial_bintar = factory.BuildFactory()
#f_p8_xenial_bintar.addStep(maybe_bzr_checkout)
#f_p8_xenial_bintar.addStep(maybe_git_checkout)
#
#f_p8_xenial_bintar.addStep(SetPropertyFromCommand(
#        property="distdirname",
#        command=["sh", "-c", WithProperties("pwd")],
#        alwaysRun=True))
#
#f_p8_xenial_bintar.addStep(
##    getCompileStep(["sh", "-c", "git clean -dfX && export PATH=/opt/at8.0/bin:$PATH && cmake . -DBUILD_CONFIG=mysql_release -DWITHOUT_OQGRAPH=ON -DWITH_SSL=system && make -j4 package"],
#    getCompileStep(["sh", "-c", "git clean -dfX && export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-ppc64el && cmake . -DBUILD_CONFIG=mysql_release -DWITHOUT_OQGRAPH=ON -DWITH_SSL=system && make -j4 package"],
#    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
##        "CXX": "g++ -mminimal-toc",
#        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"})
#)
#
#f_p8_xenial_bintar.addStep(SetPropertyFromCommand(
#        property="bindistname",
#        command=["sh", "-c", WithProperties("basename `ls mariadb*tar.gz`")],
#        ))
#
#addPackageUploadStep(f_p8_xenial_bintar, '"%(bindistname)s"')
#
#f_p8_xenial_bintar.addStep(ShellCommand(
#    name="cleanup",
#    description=["cleanup"],
#    descriptionDone=["cleanup"],
#    command=["sh", "-c", "rm -rf /dev/shm/var_*"]))
#
#f_p8_xenial_bintar.addStep(getMTR(
#        test_type="nm",
#        test_info="Normal run, no --ps-protocol",
#        env={"MTR_FEEDBACK_PLUGIN": "1"},
#        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --parallel=4 --mem ")],
#                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))
#
#f_p8_xenial_bintar.addStep(getMTR(
#        test_type="xtra-big",
#        test_info="Some additional test suites, with --big",
#        env={"MTR_FEEDBACK_PLUGIN": "1"},
#        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl " +
#                       "--verbose-restart --force --parallel=4  " +
#                       "--suite=funcs_1,funcs_2,stress,jp --big --mem " +
#                       "--testcase-timeout=45")],
#                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))
#
#f_p8_xenial_bintar.addStep(RemoveDirectory(
#        name="remove_build",
#        dir=WithProperties("%(distdirname)s"),
#        alwaysRun=True));
#
#bld_p8_xenial_bintar = {"name": "p8-xenial-bintar",
#                "slavename": "p8-xenial-bb",
#                "builddir": "p8-xenial-bintar",
#                "factory": f_p8_xenial_bintar,
#                "nextBuild": myNextBuild,
#                "category": "experimental",
#                }

# 2017-06-05 : removing IBM Xenial builders in favor of kvm-deb-xenial-ppc64le - dbart
##-------------------------------------------------------------------------------
## Ubuntu Xenial P8 ppc64le Bintar Debug Builder
##-------------------------------------------------------------------------------
#f_p8_xenial_bintar_debug = factory.BuildFactory()
#f_p8_xenial_bintar_debug.addStep(maybe_bzr_checkout)
#f_p8_xenial_bintar_debug.addStep(maybe_git_checkout)
#
#f_p8_xenial_bintar_debug.addStep(SetPropertyFromCommand(
#        property="distdirname",
#        command=["sh", "-c", WithProperties("pwd")],
#        alwaysRun=True))
#
#f_p8_xenial_bintar_debug.addStep(
##    getCompileStep(["sh", "-c", "git clean -dfX && export PATH=/opt/at8.0/bin:$PATH && cmake . -DCMAKE_BUILD_TYPE=Debug -DWITHOUT_OQGRAPH=ON -DMYSQL_MAINTAINER_MODE=ON && make -j4 package"],
#    getCompileStep(["sh", "-c", "git clean -dfX && export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-ppc64el && cmake . -DCMAKE_BUILD_TYPE=Debug -DWITHOUT_OQGRAPH=ON -DMYSQL_MAINTAINER_MODE=ON && make -j4 package"],
#    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
#        "EXTRA_CONFIGS": "--with-embedded-privilege-control",
#        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"})
#)
#
#f_p8_xenial_bintar_debug.addStep(SetPropertyFromCommand(
#        property="bindistname",
#        command=["sh", "-c", WithProperties("basename `ls mariadb*tar.gz`")],
#        ))
#
#addPackageUploadStep(f_p8_xenial_bintar_debug, '"%(bindistname)s"')
#
#f_p8_xenial_bintar_debug.addStep(ShellCommand(
#    name="cleanup",
#    description=["cleanup"],
#    descriptionDone=["cleanup"],
#    command=["sh", "-c", "rm -rf /dev/shm/var_*"]))
#
#f_p8_xenial_bintar_debug.addStep(getMTR(
#        test_type="nm",
#        test_info="Normal run, no --ps-protocol",
#        env={"MTR_FEEDBACK_PLUGIN": "1"},
#        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --parallel=4 --mem ")],
#                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))
#
#f_p8_xenial_bintar_debug.addStep(getMTR(
#        test_type="xtra-big",
#        test_info="Some additional test suites, with --big",
#        env={"MTR_FEEDBACK_PLUGIN": "1"},
#        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl " +
#                       "--verbose-restart --force --parallel=4 --mem " +
#                       "--suite=funcs_1,funcs_2,stress,jp --big " +
#                       "--testcase-timeout=45")],
#                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))
#
#f_p8_xenial_bintar_debug.addStep(RemoveDirectory(
#        name="remove_build",
#        dir=WithProperties("%(distdirname)s"),
#        alwaysRun=True));
#
#bld_p8_xenial_bintar_debug = {"name": "p8-xenial-bintar-debug",
#                "slavename": "p8-xenial-bb",
#                "builddir": "p8-xenial-bintar-debug",
#                "factory": f_p8_xenial_bintar_debug,
#                "nextBuild": myNextBuild,
#                "category": "experimental",
#                }

# 2017-06-05 : removing IBM Xenial builders in favor of kvm-deb-xenial-ppc64le - dbart
##-------------------------------------------------------------------------------
## Ubuntu Xenial P8 ppc64le DEB Builder
##-------------------------------------------------------------------------------
#f_p8_xenial_deb = factory.BuildFactory()
#f_p8_xenial_deb.addStep(maybe_bzr_checkout)
#f_p8_xenial_deb.addStep(maybe_git_checkout)
#
#f_p8_xenial_deb.addStep(SetPropertyFromCommand(
#        property="distdirname",
#        command=["sh", "-c", WithProperties("pwd")],
#        alwaysRun=True))
#
#f_p8_xenial_deb.addStep(
##    getCompileStep(["sh", "-c", 'git clean -dfX && export PATH=/opt/at8.0/bin:$PATH && echo | MYSQL_BUILD_CC=/opt/at8.0/bin/gcc MYSQL_BUILD_CXX=/opt/at8.0/bin/g++ MYSQL_BUILD_PATH="/opt/at8.0/bin:$PATH" debian/autobake-deb.sh'],
#    getCompileStep(["sh", "-c", 'git clean -dfX && export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-ppc64el && echo | debian/autobake-deb.sh'],
#    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
#        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"})
#)
#
#f_p8_xenial_deb.addStep(ShellCommand(
#    description=["archiving"],
#    descriptionDone=["archive"],
#    command=["sh", "-c", WithProperties("""
#set -ex
#rm -Rf debs
#mkdir -vp debs/binary
#mkdir -vp debs/source
#""" + 'mv -v $(find .. -maxdepth 1 -type f) debs/binary/\n' + """
#cd debs
#dpkg-scanpackages binary /dev/null | gzip -9c > binary/Packages.gz
#dpkg-scansources source /dev/null | gzip -9c > source/Sources.gz
#""")]))
#
#addPackageUploadStep(f_p8_xenial_deb, 'debs')
#
#f_p8_xenial_deb.addStep(RemoveDirectory(
#        name="remove_build",
#        dir=WithProperties("%(distdirname)s"),
#        alwaysRun=True));
#
#bld_p8_xenial_deb = {"name": "p8-xenial-deb",
#                "slavename": "p8-xenial-bb",
#                "builddir": "p8-xenial-deb",
#                "factory": f_p8_xenial_deb,
#                "nextBuild": myNextBuild,
#                "category": "experimental",
#                }

# 2017-06-05 : removing IBM Xenial builders in favor of kvm-deb-xenial-ppc64le - dbart
##-------------------------------------------------------------------------------
## Ubuntu Xenial P8 ppc64le DEB Builder for Galera
##-------------------------------------------------------------------------------
#f_p8_xenial_deb_gal = factory.BuildFactory()
#
#f_p8_xenial_deb_gal.addStep(SetPropertyFromCommand(
#        property="distdirname",
#        command=["sh", "-c", WithProperties("pwd")],
#        alwaysRun=True))
#
#f_p8_xenial_deb_gal.addStep(Compile(
#        description=["making", "debs"],
#        descriptionDone=["make", "debs"],
#        timeout=3600,
#        warningPattern=gccWarningPattern,
#        warningExtractor=Compile.warnExtractFromRegexpGroups,
#        suppressionFile=WithProperties("compiler_warnings.supp"),
#        env={"TERM": "vt102"},
#        command=["sh", "-c", WithProperties("""
#set -ex
#rm -Rf debs build
#mkdir -p debs/binary debs/source
#git clone -b %(branch)s "https://github.com/MariaDB/galera.git" build
#cd build
#export PATH=/opt/at8.0/bin:$PATH
#./scripts/build.sh -p
#cp `find ../*.deb -maxdepth 1 -type f` ../debs/binary/
#cp `find ../*.changes -maxdepth 1 -type f` ../debs/binary/
#cd ../debs
#dpkg-scanpackages binary /dev/null | gzip -9c > binary/Packages.gz
#dpkg-scansources source /dev/null | gzip -9c > source/Sources.gz
#""")]))
#
#addPackageUploadStep(f_p8_xenial_deb_gal, 'debs')
#
#f_p8_xenial_deb_gal.addStep(RemoveDirectory(
#        name="remove_build",
#        dir=WithProperties("%(distdirname)s"),
#        alwaysRun=True));
#
#gal_bld_p8_xenial_deb = {"name": "p8-xenial-deb-gal",
#                "slavename": "p8-xenial-bb",
#                "builddir": "p8-xenial-deb-gal",
#                "factory": f_p8_xenial_deb_gal,
#                "nextBuild": myNextBuild,
#                "category": "galera",
#                }






#-------------------------------------------------------------------------------
# RHEL 7 P8 ppc64 Bintar Builder
#-------------------------------------------------------------------------------
f_p8_rhel7_bintar = factory.BuildFactory()
f_p8_rhel7_bintar.addStep(maybe_bzr_checkout)
f_p8_rhel7_bintar.addStep(maybe_git_checkout)

f_p8_rhel7_bintar.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        alwaysRun=True))

f_p8_rhel7_bintar.addStep(
    getCompileStep(["sh", "-c", "git clean -dfX && export PATH=/opt/at8.0/bin:$PATH && cmake . -DBUILD_CONFIG=mysql_release -DWITH_SSL=system -DWITHOUT_CONNECT=ON -DWITH_JEMALLOC=yes && make -j4 package"],
    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"})
)

f_p8_rhel7_bintar.addStep(SetPropertyFromCommand(
        property="bindistname",
        command=["sh", "-c", WithProperties("basename `ls mariadb*tar.gz`")],
        ))

addPackageUploadStep(f_p8_rhel7_bintar, '"%(bindistname)s"')

f_p8_rhel7_bintar.addStep(ShellCommand(
    name="cleanup",
    description=["cleanup"],
    descriptionDone=["cleanup"],
    command=["sh", "-c", "rm -rf /dev/shm/var_*"]))


f_p8_rhel7_bintar.addStep(getMTR(
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --parallel=4 --mem ")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

#f_p8_rhel7_bintar.addStep(getMTR(
#        test_type="xtra",
#        test_info="Some additional test suites",
#        env={"MTR_FEEDBACK_PLUGIN": "1"},
#        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl " +
#                       "--verbose-restart --force --parallel=4  " +
#                       "--suite=funcs_1,funcs_2,stress,jp ")],
#                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

f_p8_rhel7_bintar.addStep(getMTR(
        test_type="xtra-big",
        test_info="Some additional test suites, with --big",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl " +
                       "--verbose-restart --force --parallel=4  " +
                       "--suite=funcs_1,funcs_2,stress,jp --big --mem " +
                       "--testcase-timeout=45")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

f_p8_rhel7_bintar.addStep(RemoveDirectory(
        name="remove_build",
        dir=WithProperties("%(distdirname)s"),
        alwaysRun=True));

bld_p8_rhel7_bintar = {"name": "p8-rhel7-bintar",
                "slavename": "power8-vlp03",
                "builddir": "power8-vlp03-bintar",
                "factory": f_p8_rhel7_bintar,
                "nextBuild": myNextBuild,
                "category": "main",
                }


#-------------------------------------------------------------------------------
# RHEL 7 P8 ppc64 Bintar Debug Builder
#-------------------------------------------------------------------------------
f_p8_rhel7_bintar_debug = factory.BuildFactory()
f_p8_rhel7_bintar_debug.addStep(maybe_bzr_checkout)
f_p8_rhel7_bintar_debug.addStep(maybe_git_checkout)

f_p8_rhel7_bintar_debug.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        alwaysRun=True))

f_p8_rhel7_bintar_debug.addStep(
    getCompileStep(["sh", "-c", "git clean -dfX && export PATH=/opt/at8.0/bin:$PATH && cmake . -DCMAKE_BUILD_TYPE=Debug -DMYSQL_MAINTAINER_MODE=ON -DWITHOUT_CONNECT=ON && make -j4 package"],
    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
        "EXTRA_CONFIGS": "--with-embedded-privilege-control",
        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"})
)

f_p8_rhel7_bintar_debug.addStep(SetPropertyFromCommand(
        property="bindistname",
        command=["sh", "-c", WithProperties("basename `ls mariadb*tar.gz`")],
        ))

addPackageUploadStep(f_p8_rhel7_bintar_debug, '"%(bindistname)s"')

f_p8_rhel7_bintar_debug.addStep(ShellCommand(
    name="cleanup",
    description=["cleanup"],
    descriptionDone=["cleanup"],
    command=["sh", "-c", "rm -rf /dev/shm/var_*"]))

f_p8_rhel7_bintar_debug.addStep(getMTR(
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --parallel=4 --mem ")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

#f_p8_rhel7_bintar_debug.addStep(getMTR(
#        test_type="xtra",
#        test_info="Some additional test suites",
#        env={"MTR_FEEDBACK_PLUGIN": "1"},
#        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl " +
#                       "--verbose-restart --force --parallel=4  " +
#                       "--suite=funcs_1,funcs_2,stress,jp ")],
#                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

f_p8_rhel7_bintar_debug.addStep(getMTR(
        test_type="xtra-big",
        test_info="Some additional test suites, with --big",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl " +
                       "--verbose-restart --force --parallel=4  " +
                       "--suite=funcs_1,funcs_2,stress,jp --big --mem " +
                       "--testcase-timeout=45")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

f_p8_rhel7_bintar_debug.addStep(RemoveDirectory(
        name="remove_build",
        dir=WithProperties("%(distdirname)s"),
        alwaysRun=True));

bld_p8_rhel7_bintar_debug = {"name": "p8-rhel7-bintar-debug",
                "slavename": "power8-vlp03",
                "builddir": "power8-vlp03-bintar-debug",
                "factory": f_p8_rhel7_bintar_debug,
                "nextBuild": myNextBuild,
                "category": "main",
                }


#-------------------------------------------------------------------------------
# RHEL 7 P8 ppc64 RPM Builder
#-------------------------------------------------------------------------------
f_p8_rhel7_rpm = factory.BuildFactory()
f_p8_rhel7_rpm.addStep(maybe_bzr_checkout)
f_p8_rhel7_rpm.addStep(maybe_git_checkout)

f_p8_rhel7_rpm.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        alwaysRun=True))

f_p8_rhel7_rpm.addStep(
    getCompileStep(["sh", "-c", "git clean -dfX && export PATH=/opt/at8.0/bin:$PATH && cmake . -DBUILD_CONFIG=mysql_release -DWITH_JEMALLOC=yes -DRPM=rhel7 && make -j4 package VERBOSE=1"],
    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"})
)

f_p8_rhel7_rpm.addStep(ShellCommand(
    description=["archiving"],
    descriptionDone=["archive"],
    command=["sh", "-c", WithProperties("""
set -ex
rm -Rf rpms
mkdir -p rpms
""" + 'cp -rp *.rpm rpms/\n' + """
cd rpms
find . -type f \! -name md5sums.txt|xargs md5sum > md5sums.txt
""")]))

addPackageUploadStep(f_p8_rhel7_rpm, 'rpms')

f_p8_rhel7_rpm.addStep(RemoveDirectory(
        name="remove_build",
        dir=WithProperties("%(distdirname)s"),
        alwaysRun=True));

bld_p8_rhel7_rpm = {"name": "p8-rhel7-rpm",
                "slavename": "power8-vlp03",
                "builddir": "power8-vlp03-rpm",
                "factory": f_p8_rhel7_rpm,
                "nextBuild": myNextBuild,
                "category": "main",
                }


#-------------------------------------------------------------------------------
# RHEL 7 P8 ppc64 RPM Builder for Galera
#-------------------------------------------------------------------------------

f_p8_rhel7_rpm_gal = factory.BuildFactory()

f_p8_rhel7_rpm_gal.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        alwaysRun=True))

f_p8_rhel7_rpm_gal.addStep(Compile(
        description=["making", "rpms"],
        descriptionDone=["make", "rpms"],
        timeout=7200,
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command=["sh", "-c", WithProperties("""
set -ex
rm -Rf rpms build
mkdir rpms
git clone -b %(branch)s "https://github.com/MariaDB/galera.git" build
cd build
export PATH=/opt/at8.0/bin:$PATH
./scripts/build.sh -p
cp `find *.rpm -maxdepth 1 -type f` ../rpms
cd ..
        """),
        ]))

f_p8_rhel7_rpm_gal.addStep(ShellCommand(
        description=["archiving"],
        descriptionDone=["archive"],
        command=["sh", "-c", WithProperties("""
set -ex
cd rpms
find . -type f \! -name md5sums.txt|xargs md5sum > md5sums.txt
""")]))

addPackageUploadStep(f_p8_rhel7_rpm_gal, 'rpms')

f_p8_rhel7_rpm_gal.addStep(RemoveDirectory(
        name="remove_build",
        dir=WithProperties("%(distdirname)s"),
        alwaysRun=True));

gal_bld_p8_rhel7_rpm = {"name": "p8-rhel7-rpm-gal",
                "slavename": "power8-vlp03",
                "builddir": "power8-vlp03-rpm-gal",
                "factory": f_p8_rhel7_rpm_gal,
                "nextBuild": myNextBuild,
                "category": "galera",
                }



#-------------------------------------------------------------------------------
# RHEL 7.1 P8 ppc64le Bintar Builder
#-------------------------------------------------------------------------------
f_p8_rhel71_bintar = factory.BuildFactory()
f_p8_rhel71_bintar.addStep(maybe_bzr_checkout)
f_p8_rhel71_bintar.addStep(maybe_git_checkout)

f_p8_rhel71_bintar.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        alwaysRun=True))

# There is no epel repo for Red Hat 7.1 P8 LE (Little Endian), so there are no
# jemalloc packages available, so that is disabled below -- dbart (2015-01-22)

f_p8_rhel71_bintar.addStep(
    getCompileStep(["sh", "-c", "git clean -dfX && export PATH=/opt/at8.0/bin:$PATH && cmake . -DBUILD_CONFIG=mysql_release -DWITH_SSL=system -DWITHOUT_CONNECT=ON -DWITH_JEMALLOC=no && make -j4 package"],
    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"})
)

f_p8_rhel71_bintar.addStep(SetPropertyFromCommand(
        property="bindistname",
        command=["sh", "-c", WithProperties("basename `ls mariadb*tar.gz`")],
        ))

addPackageUploadStep(f_p8_rhel71_bintar, '"%(bindistname)s"')

f_p8_rhel71_bintar.addStep(ShellCommand(
    name="cleanup",
    description=["cleanup"],
    descriptionDone=["cleanup"],
    command=["sh", "-c", "rm -rf /dev/shm/var_*"]))

f_p8_rhel71_bintar.addStep(getMTR(
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --parallel=2 --mem ")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

#f_p8_rhel71_bintar.addStep(getMTR(
#        test_type="xtra",
#        test_info="Some additional test suites",
#        env={"MTR_FEEDBACK_PLUGIN": "1"},
#        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl " +
#                       "--verbose-restart --force --parallel=4  " +
#                       "--suite=funcs_1,funcs_2,stress,jp ")],
#                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

f_p8_rhel71_bintar.addStep(getMTR(
        test_type="xtra-big",
        test_info="Some additional test suites, with --big",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl " +
                       "--verbose-restart --force --parallel=2 --mem " +
                       "--suite=funcs_1,funcs_2,stress,jp --big " +
                       "--testcase-timeout=45")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

f_p8_rhel71_bintar.addStep(RemoveDirectory(
        name="remove_build",
        dir=WithProperties("%(distdirname)s"),
        alwaysRun=True));

f_p8_rhel71_bintar.addStep(ShellCommand(
    description=["Check shm"],
        command=["sh", "-c", "ls -l /dev/shm/"]))

f_p8_rhel71_bintar.addStep(ShellCommand(
    description=["Clean up shm"],
        command=["sh", "-c", "rm -rf /dev/shm/var_auto*"]))

bld_p8_rhel71_bintar = {"name": "p8-rhel71-bintar",
                "slavename": "power8-vlp06",
                "builddir": "power8-vlp06-bintar",
                "factory": f_p8_rhel71_bintar,
                "nextBuild": myNextBuild,
                "category": "main",
                }


#-------------------------------------------------------------------------------
# RHEL 7.1 P8 ppc64le Bintar Debug Builder
#-------------------------------------------------------------------------------
f_p8_rhel71_bintar_debug = factory.BuildFactory()
f_p8_rhel71_bintar_debug.addStep(maybe_bzr_checkout)
f_p8_rhel71_bintar_debug.addStep(maybe_git_checkout)

f_p8_rhel71_bintar_debug.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        alwaysRun=True))

f_p8_rhel71_bintar_debug.addStep(
    getCompileStep(["sh", "-c", "git clean -dfX && export PATH=/opt/at8.0/bin:$PATH && cmake . -DCMAKE_BUILD_TYPE=Debug -DMYSQL_MAINTAINER_MODE=ON -DWITHOUT_CONNECT=ON && make -j4 package"],
    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
        "EXTRA_CONFIGS": "--with-embedded-privilege-control",
        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"})
)

f_p8_rhel71_bintar_debug.addStep(SetPropertyFromCommand(
        property="bindistname",
        command=["sh", "-c", WithProperties("basename `ls mariadb*tar.gz`")],
        ))

addPackageUploadStep(f_p8_rhel71_bintar_debug, '"%(bindistname)s"')

f_p8_rhel71_bintar_debug.addStep(ShellCommand(
    name="cleanup",
    description=["cleanup"],
    descriptionDone=["cleanup"],
    command=["sh", "-c", "rm -rf /dev/shm/var_*"]))

f_p8_rhel71_bintar_debug.addStep(getMTR(
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --parallel=2 --mem ")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

#f_p8_rhel71_bintar_debug.addStep(getMTR(
#        test_type="xtra",
#        test_info="Some additional test suites",
#        env={"MTR_FEEDBACK_PLUGIN": "1"},
#        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl " +
#                       "--verbose-restart --force --parallel=4  " +
#                       "--suite=funcs_1,funcs_2,stress,jp ")],
#                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

f_p8_rhel71_bintar_debug.addStep(getMTR(
        test_type="xtra-big",
        test_info="Some additional test suites, with --big",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl " +
                       "--verbose-restart --force --parallel=2 --mem " +
                       "--suite=funcs_1,funcs_2,stress,jp --big " +
                       "--testcase-timeout=45")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

f_p8_rhel71_bintar_debug.addStep(RemoveDirectory(
        name="remove_build",
        dir=WithProperties("%(distdirname)s"),
        alwaysRun=True));

f_p8_rhel71_bintar_debug.addStep(ShellCommand(
    description=["Clean up shm"],
        command=["sh", "-c", "rm -rf /dev/shm/var_auto*"]))

bld_p8_rhel71_bintar_debug = {"name": "p8-rhel71-bintar-debug",
                "slavename": "power8-vlp06",
                "builddir": "power8-vlp06-bintar-debug",
                "factory": f_p8_rhel71_bintar_debug,
                "nextBuild": myNextBuild,
                "category": "main",
                }


#-------------------------------------------------------------------------------
# RHEL 7.1 P8 ppc64le RPM Builder
#-------------------------------------------------------------------------------

f_p8_rhel71_rpm = factory.BuildFactory()
f_p8_rhel71_rpm.addStep(maybe_bzr_checkout)
f_p8_rhel71_rpm.addStep(maybe_git_checkout)

f_p8_rhel71_rpm.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        alwaysRun=True))

# There is no epel repo for Red Hat 7.1 P8 LE (Little Endian), so there are no
# jemalloc packages available, so that is disabled below -- dbart (2015-01-22)
f_p8_rhel71_rpm.addStep(
    #getCompileStep(["sh", "-c", "cmake . -DBUILD_CONFIG=mysql_release -DWITH_JEMALLOC=no -DRPM=rhel7 && make -j4 package VERBOSE=1"],
    getCompileStep(["sh", "-c", "git clean -dfX && export PATH=/opt/at8.0/bin:$PATH && cmake . -DBUILD_CONFIG=mysql_release -DWITH_JEMALLOC=no -DRPM=rhel7 && make -j4 package VERBOSE=1"],
    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"})
)

f_p8_rhel71_rpm.addStep(ShellCommand(
    description=["archiving"],
    descriptionDone=["archive"],
    command=["sh", "-c", WithProperties("""
set -ex
rm -Rf rpms
mkdir -p rpms
""" + 'cp -rp *.rpm rpms/\n' + """
cd rpms
find . -type f \! -name md5sums.txt|xargs md5sum > md5sums.txt
""")]))

addPackageUploadStep(f_p8_rhel71_rpm, 'rpms')

f_p8_rhel71_rpm.addStep(RemoveDirectory(
        name="remove_build",
        dir=WithProperties("%(distdirname)s"),
        alwaysRun=True));

bld_p8_rhel71_rpm = {"name": "p8-rhel71-rpm",
                "slavename": "power8-vlp06",
                "builddir": "power8-vlp06-rpm",
                "factory": f_p8_rhel71_rpm,
                "nextBuild": myNextBuild,
                "category": "main",
                }

#-------------------------------------------------------------------------------
# RHEL 7.1 P8 ppc64le RPM Builder for Galera
#-------------------------------------------------------------------------------

f_p8_rhel71_rpm_gal = factory.BuildFactory()

f_p8_rhel71_rpm_gal.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        alwaysRun=True))

f_p8_rhel71_rpm_gal.addStep(Compile(
        description=["making", "rpms"],
        descriptionDone=["make", "rpms"],
        timeout=7200,
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command=["sh", "-c", WithProperties("""
set -ex
rm -Rf rpms build
mkdir rpms
git clone -b %(branch)s "https://github.com/MariaDB/galera.git" build
cd build
export PATH=/opt/at8.0/bin:$PATH
./scripts/build.sh -p
cp `find *.rpm -maxdepth 1 -type f` ../rpms
cd ..
        """),
        ]))

f_p8_rhel71_rpm_gal.addStep(ShellCommand(
        description=["archiving"],
        descriptionDone=["archive"],
        command=["sh", "-c", WithProperties("""
set -ex
cd rpms
find . -type f \! -name md5sums.txt|xargs md5sum > md5sums.txt
""")]))

addPackageUploadStep(f_p8_rhel71_rpm_gal, 'rpms')

f_p8_rhel71_rpm_gal.addStep(RemoveDirectory(
        name="remove_build",
        dir=WithProperties("%(distdirname)s"),
        alwaysRun=True));

gal_bld_p8_rhel71_rpm = {"name": "p8-rhel71-rpm-gal",
                "slavename": "power8-vlp06",
                "builddir": "power8-vlp06-rpm-gal",
                "factory": f_p8_rhel71_rpm_gal,
                "nextBuild": myNextBuild,
                "category": "galera",
                }


#-------------------------------------------------------------------------------
# SUSE 12 P8 RPM Builder
#-------------------------------------------------------------------------------
f_p8_suse12_rpm = factory.BuildFactory()
f_p8_suse12_rpm.addStep(maybe_bzr_checkout)
f_p8_suse12_rpm.addStep(maybe_git_checkout)

f_p8_suse12_rpm.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        alwaysRun=True))

f_p8_suse12_rpm.addStep(
    getCompileStep(["sh", "-c", "git clean -dfX && export PATH=/opt/at8.0/bin:$PATH && cmake . -DBUILD_CONFIG=mysql_release -DWITH_JEMALLOC=no -DRPM=suse12 && make -j4 package VERBOSE=1"],
    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"})
)

f_p8_suse12_rpm.addStep(ShellCommand(
    description=["archiving"],
    descriptionDone=["archive"],
    command=["sh", "-c", WithProperties("""
set -ex
rm -Rf rpms
mkdir -p rpms
""" + 'cp -rp *.rpm rpms/\n' + """
cd rpms
find . -type f \! -name md5sums.txt|xargs md5sum > md5sums.txt
""")]))

addPackageUploadStep(f_p8_suse12_rpm, 'rpms')

f_p8_suse12_rpm.addStep(RemoveDirectory(
        name="remove_build",
        dir=WithProperties("%(distdirname)s"),
        alwaysRun=True));

bld_p8_suse12_rpm = {"name": "p8-suse12-rpm",
                "slavename": "power8-vlp05",
                "builddir": "power8-vlp05-rpm",
                "factory": f_p8_suse12_rpm,
                "nextBuild": myNextBuild,
                "category": "main",
                }


#-------------------------------------------------------------------------------
# SUSE 12 P8 RPM Builder for Galera
#-------------------------------------------------------------------------------

f_p8_suse12_rpm_gal = factory.BuildFactory()

f_p8_suse12_rpm_gal.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        alwaysRun=True))

f_p8_suse12_rpm_gal.addStep(Compile(
        description=["making", "rpms"],
        descriptionDone=["make", "rpms"],
        timeout=7200,
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command=["sh", "-c", WithProperties("""
set -ex
rm -Rf rpms build
mkdir rpms
git clone -b %(branch)s "https://github.com/MariaDB/galera.git" build
cd build
export PATH=/opt/at8.0/bin:$PATH
./scripts/build.sh -p
cp `find *.rpm -maxdepth 1 -type f` ../rpms
cd ..
        """),
        ]))

f_p8_suse12_rpm_gal.addStep(ShellCommand(
        description=["archiving"],
        descriptionDone=["archive"],
        command=["sh", "-c", WithProperties("""
set -ex
cd rpms
find . -type f \! -name md5sums.txt|xargs md5sum > md5sums.txt
""")]))

addPackageUploadStep(f_p8_suse12_rpm_gal, 'rpms')

f_p8_suse12_rpm_gal.addStep(RemoveDirectory(
        name="remove_build",
        dir=WithProperties("%(distdirname)s"),
        alwaysRun=True));

gal_bld_p8_suse12_rpm = {"name": "p8-suse12-rpm-gal",
                "slavename": "power8-vlp05",
                "builddir": "power8-vlp05-rpm-gal",
                "factory": f_p8_suse12_rpm_gal,
                "nextBuild": myNextBuild,
                "category": "galera",
                }


#-------------------------------------------------------------------------------
# BSD 9 Bintar Builder
#-------------------------------------------------------------------------------
f_bsd9_64_bintar = factory.BuildFactory()
f_bsd9_64_bintar.addStep(
  FileDownload(
  mastersrc=WithProperties("%(tarballpath)s"),
  slavedest=WithProperties("%(distname)s"),
  blocksize=524288,
  doStepIf=branch_is_5_5_or_later
))

f_bsd9_64_bintar.addStep(ShellCommand(
        description="untarring", descriptionDone="untar",
        doStepIf=branch_is_5_5_or_later,
        command=["sh", "-c",
            WithProperties("rm -Rf %(distdirname)s && gzip -dc %(distname)s | gtar xf -")]))

f_bsd9_64_bintar.addStep(
   Compile(command=["sh", "-c", WithProperties("cd %(distdirname)s && BUILD/compile-pentium64-max --extra-configs=--without-plugin_innodb_plugin")],
      logfiles={"config.log" : WithProperties("%(distdirname)s/config.log")},
      doStepIf=branch_is_5_5_or_later,
      env={"EXTRA_FLAGS": "-DFORCE_INIT_OF_VARS",
           "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}))

f_bsd9_64_bintar.addStep(ShellCommand(
        description="packaging", descriptionDone="package",
      doStepIf=branch_is_5_5_or_later,
        command=["sh", "-c", WithProperties("""
set -ex
cd %(distdirname)s
scripts/make_binary_distribution
ORIG_TAR="`echo mariadb-*.tar.gz`"
ORIG_DIR="`basename ${ORIG_TAR} .tar.gz`"
NEW_DIR="`echo "${ORIG_DIR}" | sed -e 's/-MariaDB//'`"
NEW_TAR="${NEW_DIR}.tar.gz"
if [ "$ORIG_DIR" != "$NEW_DIR" ] ; then
  rm -Rf $ORIG_DIR
  gtar zxf $ORIG_TAR
  mv $ORIG_DIR "${NEW_DIR}"
  gtar zcf "${NEW_TAR}" "${NEW_DIR}/"
fi
echo "${NEW_TAR}" > ../bindistname.txt
""")]))

f_bsd9_64_bintar.addStep(SetPropertyFromCommand(
        property="bindistname",
        command=["cat", "bindistname.txt"],
        doStepIf=branch_is_5_5_or_later
        ))

addPackageArchiveStep(f_bsd9_64_bintar, '"%(distdirname)s/%(bindistname)s"', "%(tarbuildnum)s",
  branch_is_5_5_or_later)

f_bsd9_64_bintar.addStep(getMTR(
        doStepIf=branch_is_5_5_or_later,
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("(killall mysqld || true) && cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3 ")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

bld_bsd9_64 = {"name": "bsd9-64",
                "slavename": "bsd9",
                "builddir": "bsd9",
                "factory": f_bsd9_64_bintar,
                "nextBuild": myNextBuild,
                "category": "experimental",
                }

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------

f_kvm_dgcov_jaunty_amd64= factory.BuildFactory()
f_kvm_dgcov_jaunty_amd64.addStep(Compile(
        description=["compiling"],
        descriptionDone=["compile"],
        timeout = 3600,
        logfiles={"kernel": "kernel_2250.log"},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        env={"TERM": "vt102"},
        command=["runvm", "--port=2250", "--user=buildbot", "-cpu=qemu64", "--smp=4", "--logfile=kernel_2250.log", "/kvm/vms/vm-lucid-amd64-dgcov.qcow2",
        WithProperties("""
set -ex
rm -Rf build
time bzr co "lp:~maria-captains/maria/%(branch)s" build
cd build
BUILD/autorun.sh
CFLAGS='-fprofile-arcs -ftest-coverage -DDISABLE_TAO_ASM -DHAVE_gcov -O0 -g  -Wno-unused-parameter' CXXFLAGS='-fprofile-arcs -ftest-coverage  -DDISABLE_TAO_ASM -DHAVE_gcov  -O0 -g  -Wno-unused-parameter' LDFLAGS='-fprofile-arcs -ftest-coverage' ./configure --enable-assembler --with-extra-charsets=complex --enable-thread-safe-client --with-big-tables --with-plugin-aria --with-aria-tmp-tables --with-readline --with-debug --with-ssl --with-plugins=max --with-embedded-server --with-libevent --with-zlib-dir=bundled --enable-local-infile
make -j6
""")]))
f_kvm_dgcov_jaunty_amd64.addStep(Test(
            description=["unit", "testing"],
            descriptionDone=["unit", "test"],
            logfiles={"kernel": "kernel_2250.log"},
            timeout=7200,
            doStepIf=branch_is_5_123,
            env={"TERM": "vt102"},
            command=["runvm", "--port=2250", "--user=buildbot", "--cpu=qemu64", "--smp=4", "--logfile=kernel_2250.log", "/kvm/vms/vm-lucid-amd64-dgcov.qcow2",
                     "cd build && make test-unit"]))
f_kvm_dgcov_jaunty_amd64.addStep(getMTR(
            test_type="emb",
            test_info="Embedded with",
            logfiles={"kernel": "kernel_2250.log"},
            env={"TERM": "vt102"},
            command=["runvm", "--port=2250", "--memory=3072", "--user=buildbot", "--cpu=qemu64", "--smp=4", "--logfile=kernel_2250.log", "/kvm/vms/vm-lucid-amd64-dgcov.qcow2",
                     "cd build/mysql-test && perl mysql-test-run.pl  --verbose-restart --embedded-server --mem --force --retry=3 --parallel=2 --testcase-timeout=45"]))
#f_kvm_dgcov_jaunty_amd64.addStep(getMTR(
#            test_type="pbxt",
#            test_info="PBXT test suite with",
#            doStepIf=branch_is_5_123,
#            logfiles={"kernel": "kernel_2250.log"},
#            env={"TERM": "vt102"},
#            command=["runvm", "--port=2250", "--memory=3072", "--user=buildbot", "--cpu=qemu64", "--smp=4", "--logfile=kernel_2250.log", "/kvm/vms/vm-lucid-amd64-dgcov.qcow2",
#                     "cd build/mysql-test && perl mysql-test-run.pl  --verbose-restart --suite=pbxt --mysqld=--default-storage-engine=pbxt --mem --parallel=2 --force --retry=3"]))
f_kvm_dgcov_jaunty_amd64.addStep(getMTR(
            test_type="nm",
            test_info="Normal run, no --ps-protocol",
            logfiles={"kernel": "kernel_2250.log"},
            env={"TERM": "vt102"},
            command=["runvm", "--port=2250", "--memory=3072", "--user=buildbot", "--cpu=qemu64", "--smp=4", "--logfile=kernel_2250.log", "/kvm/vms/vm-lucid-amd64-dgcov.qcow2",
                     "cd build/mysql-test && MTR_FEEDBACK_PLUGIN=1 perl mysql-test-run.pl  --verbose-restart --mem --testcase-timeout=45 --parallel=2 --force --retry=3 --max-save-core=0 --max-save-datadir=1"]))
f_kvm_dgcov_jaunty_amd64.addStep(getMTR(
            test_type="pm",
            test_info="Normal run, with --ps-protocol",
            logfiles={"kernel": "kernel_2250.log"},
            env={"TERM": "vt102"},
            command=["runvm", "--port=2250", "--memory=3072", "--user=buildbot", "--cpu=qemu64", "--smp=4", "--logfile=kernel_2250.log", "/kvm/vms/vm-lucid-amd64-dgcov.qcow2",
                     "cd build/mysql-test && perl mysql-test-run.pl  --verbose-restart --ps-protocol --mem --parallel=2 --force --retry=3 --max-save-core=0 --max-save-datadir=1"]))
f_kvm_dgcov_jaunty_amd64.addStep(getMTR(
            test_type="xtra",
            test_info="Some additional test suites",
            logfiles={"kernel": "kernel_2250.log"},
            env={"TERM": "vt102"},
            command=["runvm", "--port=2250", "--memory=3072", "--user=buildbot", "--cpu=qemu64", "--smp=4", "--logfile=kernel_2250.log", "/kvm/vms/vm-lucid-amd64-dgcov.qcow2",
                     "cd build/mysql-test && perl mysql-test-run.pl  --verbose-restart --suite=funcs_1,funcs_2,stress,jp --mem --parallel=2 --force --retry=3 --testcase-timeout=45 --max-save-core=0 --max-save-datadir=1"]))
f_kvm_dgcov_jaunty_amd64.addStep(Test(
        description=["dgcov'ing"],
        descriptionDone=["dgcov"],
        logfiles={"kernel": "kernel_2250.log"},
        haltOnFailure=False, flunkOnFailure=False, warnOnFailure=True,
        env={"TERM": "vt102"},
        command=["runvm", "--port=2250", "--user=buildbot", "--cpu=qemu64", "--smp=4", "--logfile=kernel_2250.log", "/kvm/vms/vm-lucid-amd64-dgcov.qcow2",
                 "cd build && dgcov.pl last:1"]))

bld_kvm_dgcov_jaunty_i386 = {"name": "kvm-dgcov-jaunty-i386",
                             "slavenames": kvm_slaves,
                             "builddir": "kvm-dgcov-jaunty-i386",
                             "factory": f_kvm_dgcov_jaunty_amd64,
                             "nextBuild": myNextBuild,
                             "category": "experimental",
                             }

def getFulltest(buildcmd, vm_img, port, slavenames=kvm_slaves):
    kvm_log = "kernel_"+port+".log"
    kvm_args = ["/usr/local/bin/runvm",
                "--port="+port, "--user=buildbot",
                "--smp=4", "--cpu=qemu64",
                "--logfile="+kvm_log,
                "--memory=3584",
                "--kvm=-hdb", "--kvm=vm-blank-20G.qcow2",
                ]
    tmp_img = "vm-tmp-"+port+".qcow2"

    def mtr_step(type, info, args, doRun= True):
        return getMTR(
          test_type=type, test_info=info,
          logfiles={"kernel": kvm_log},
          mtr_subdir=".",    # Where we scp vardir to
          timeout=5000,
          env={"TERM": "vt102"},
          command=kvm_args + [tmp_img,
            WithProperties("""
set -ex
sudo mount /dev/sdb1 /mnt
sudo sysctl fs.aio-max-nr=1048576
cd "buildbot/build/%(distdirname)s/mysql-test"
""" +
              "MTR_FEEDBACK_PLUGIN=1 perl mysql-test-run.pl  --verbose-restart " +
              "--force --retry=3 --max-save-core=0 --max-save-datadir=1 " + args + "\n"),
            WithProperties(
              "!= rm -Rf var/ ; scp -rp -P " + port + " " + kvm_scpopt +
              " buildbot@localhost:buildbot/build/%(distdirname)s/mysql-test/var/ . || :")
          ],
          doStepIf=doRun)

    f= factory.BuildFactory()

    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    f.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))

    f.addStep(ShellCommand(
        description=["rsyncing", "VM"],
        descriptionDone=["rsync", "VM"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+vm_img,
                 "bb01.mariadb.net::kvm/vms/vm-blank-20G.qcow2",
                 "/kvm/vms/"]))

    f.addStep(FileDownload(
        mastersrc=WithProperties("%(tarballpath)s"),
        slavedest=WithProperties("%(distname)s"),
        blocksize=524288,
        ))

    # Extract the compiler warning suppressions file from the source tarball.
    f.addStep(ShellCommand(
        description=["getting", ".supp"],
        descriptionDone=["get", ".supp"],
        command=["sh", "-c", WithProperties("""
qemu-img create -b /kvm/vms/vm-blank-20G.qcow2 -f qcow2 vm-blank-20G.qcow2
#tar zxf "%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
tar zxf "/tmp/buildcache/%(tarbuildnum)s:%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
exit 0  # best-effort, not fatal if no suppression file
""")]))

    f.addStep(Compile(
	timeout=7200,
        description=["building"],
        descriptionDone=["build"],
        logfiles={"kernel": kvm_log},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command= kvm_args +
        ["--base-image=/kvm/vms/"+vm_img, tmp_img,
        "rm -Rf buildbot && sudo mount /dev/sdb1 /mnt && sudo mkdir /mnt/buildbot && sudo chown buildbot:buildbot /mnt/buildbot && ln -s /mnt/buildbot buildbot",
        WithProperties("= scp "+kvm_scpopt+" -P "+port+" %(distname)s buildbot@localhost:buildbot/"),
        WithProperties("""
set -ex
mkdir buildbot/build
cd buildbot/build
tar zxf "../%(distname)s"
cd "%(distdirname)s"
""" + buildcmd + "\n"),
         ]))

    f.addStep(Test(
        timeout=14400,
        description=["unit", "testing"],
        descriptionDone=["unit", "test"],
        doStepIf=branch_is_5_123,
        logfiles={"kernel": kvm_log},
        env={"TERM": "vt102"},
        command=kvm_args + [tmp_img,
        WithProperties("""
set -ex
sudo mount /dev/sdb1 /mnt
cd "buildbot/build/%(distdirname)s"
make test-unit
""")]))

    f.addStep(mtr_step("emb", "Embedded",
        "--mem --embedded-server --parallel=4",
        branch_is_not_galera))

    f.addStep(mtr_step("n", "Normal (no --ps-protocol)",
        "--mem --parallel=4"))

    f.addStep(mtr_step("p", "ps-protocol",
        "--mem --parallel=4 --ps-protocol"))

    f.addStep(mtr_step("ps-embedded", "--ps --embedded",
        "--ps --embedded --mem --parallel=4"))

    f.addStep(mtr_step("xtra", "Some additional test suites",
        "--mem --suite=funcs_1,funcs_2,stress,jp,spider,spider/bg --big --parallel=2 --testcase-timeout=120"))

    return f


def getBigtest(buildcmd, vm_img, port, slavenames=kvm_slaves):
    kvm_log = "kernel_"+port+".log"
    kvm_args = ["/usr/local/bin/runvm",
                "--port="+port, "--user=buildbot",
                "--smp=4", "--cpu=qemu64",
                "--logfile="+kvm_log,
                "--memory=3584",
                "--kvm=-hdb", "--kvm=vm-blank-20G.qcow2",
                ]
    tmp_img = "vm-tmp-"+port+".qcow2"

    def mtr_step(type, info, args, doRun= True):
        return getMTR(
          test_type=type, test_info=info,
          logfiles={"kernel": kvm_log},
          mtr_subdir=".",    # Where we scp vardir to
          timeout=5000,
          env={"TERM": "vt102"},
          command=kvm_args + [tmp_img,
            WithProperties("""
set -ex
sudo mount /dev/sdb1 /mnt
sudo sysctl fs.aio-max-nr=1048576
cd "buildbot/build/%(distdirname)s/mysql-test"
""" +
              "MTR_FEEDBACK_PLUGIN=1 perl mysql-test-run.pl  --verbose-restart " +
              "--force --retry=3 --max-save-core=0 --max-save-datadir=1 " + args + "\n"),
            WithProperties(
              "!= rm -Rf var/ ; scp -rp -P " + port + " " + kvm_scpopt +
              " buildbot@localhost:buildbot/build/%(distdirname)s/mysql-test/var/ . || :")
          ],
          doStepIf=doRun)

    f= factory.BuildFactory()

    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    f.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))

    f.addStep(ShellCommand(
        description=["rsyncing", "VM"],
        descriptionDone=["rsync", "VM"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+vm_img,
                 "bb01.mariadb.net::kvm/vms/vm-blank-20G.qcow2",
                 "/kvm/vms/"]))

    f.addStep(FileDownload(
        mastersrc=WithProperties("%(tarballpath)s"),
        slavedest=WithProperties("%(distname)s"),
        blocksize=524288,
        ))

    # Extract the compiler warning suppressions file from the source tarball.
    f.addStep(ShellCommand(
        description=["getting", ".supp"],
        descriptionDone=["get", ".supp"],
        command=["sh", "-c", WithProperties("""
qemu-img create -b /kvm/vms/vm-blank-20G.qcow2 -f qcow2 vm-blank-20G.qcow2
#tar zxf "%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
tar zxf "/tmp/buildcache/%(tarbuildnum)s:%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
exit 0  # best-effort, not fatal if no suppression file
""")]))

    f.addStep(Compile(
	timeout=7200,
        description=["building"],
        descriptionDone=["build"],
        logfiles={"kernel": kvm_log},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command= kvm_args +
        ["--base-image=/kvm/vms/"+vm_img, tmp_img,
        "rm -Rf buildbot && sudo mount /dev/sdb1 /mnt && sudo mkdir /mnt/buildbot && sudo chown buildbot:buildbot /mnt/buildbot && ln -s /mnt/buildbot buildbot",
        WithProperties("= scp "+kvm_scpopt+" -P "+port+" %(distname)s buildbot@localhost:buildbot/"),
        WithProperties("""
set -ex
mkdir buildbot/build
cd buildbot/build
tar zxf "../%(distname)s"
cd "%(distdirname)s"
""" + buildcmd + "\n"),
         ]))

    f.addStep(mtr_step("emb-big", "Embedded with --big",
        "--embedded-server --big --big --parallel=2 --testcase-timeout=120",
        branch_is_not_galera))

    f.addStep(mtr_step("n-big", "Big (no --ps-protocol)",
        "--big --big --parallel=2 --testcase-timeout=120"))

    f.addStep(mtr_step("p-big", "ps-protocol big)",
        "--big --big --ps-protocol --parallel=2 --testcase-timeout=120"))

#    f.addStep(mtr_step("xtra-big", "Some additional test suites, with --big",
#        "--suite=funcs_1,funcs_2,stress,jp --big --big --parallel=2 " +
#                       "--testcase-timeout=120"))

    return f


f_kvm_fulltest= getFulltest(
    'cmake . -DBUILD_CONFIG=mysql_release -DWITH_SSL=system -DWITH_JEMALLOC=auto -DHAVE_EMBEDDED_PRIVILEGE_CONTROL=1 -DWITH_LIBARCHIVE=ON -Wno-dev && make VERBOSE=1',
    "vm-xenial-amd64-build.qcow2",
    "2271"
    )

# Somehow terrier2 does not seem to be able to shutdown cleanly the VM and
# ends up corrupting the build, causing wierd failures about missing
# my_safe_process in MTR runs. So don't use that host.

# We tried to add bb04 to the list of slaves, but it didn't work,
# see MDEV-10254 for more details
# There was bb05 here, removed (temporarily?)
bld_kvm_fulltest= {
    "name": "kvm-fulltest",
    "slavenames": ["bb01", "bb02", "bb03", "knielsen-kvm-x86", "centos56-quality2", "bb05"],
    "builddir": "kvm-fulltest",
    "factory": f_kvm_fulltest,
    "nextBuild": myNextBuild,
    "category": "main",
    }

# Omit terrier2 from the list of buildslaves. The VM image does not work
# on terrier2 for some reason.
f_kvm_fulltest2= getFulltest(
    'cmake . -DCMAKE_BUILD_TYPE=Debug -DWITH_EMBEDDED_SERVER=1 -DHAVE_EMBEDDED_PRIVILEGE_CONTROL=1 && make VERBOSE=1',
    "vm-precise-i386-fulltest.qcow2",
    "2272"
    )

# There was bb05 here, removed (temporarily?)
bld_kvm_fulltest2= {
    "name": "kvm-fulltest2",
    "slavenames": ["knielsen-kvm-x86", "centos56-quality2", "bb01", "bb02", "bb03", "bb05"],
    "builddir": "kvm-fulltest2",
    "factory": f_kvm_fulltest2,
    "nextBuild": myNextBuild,
    "category": "main",
    }

f_kvm_fulltest_big= getBigtest(
    'cmake . -DBUILD_CONFIG=mysql_release -DWITH_SSL=system -DWITH_JEMALLOC=auto -DHAVE_EMBEDDED_PRIVILEGE_CONTROL=1 -DWITH_ASAN=ON && make VERBOSE=1',
    "vm-xenial-amd64-build.qcow2",
    "2327"
    )

bld_kvm_fulltest_big= {
    "name": "kvm-fulltest-big",
    "slavenames": ["knielsen-kvm-x86", "centos56-quality2"],
    "builddir": "kvm-fulltest-big",
    "factory": f_kvm_fulltest_big,
    "nextBuild": myNextBuild,
    "category": "main",
    }

f_kvm_fulltest2_big= getBigtest(
    'cmake . -DCMAKE_BUILD_TYPE=Debug -DWITH_EMBEDDED_SERVER=1 -DHAVE_EMBEDDED_PRIVILEGE_CONTROL=1 && make VERBOSE=1',
    "vm-precise-i386-fulltest.qcow2",
    "2328"
    )

bld_kvm_fulltest2_big= {
    "name": "kvm-fulltest2-big",
    "slavenames": ["knielsen-kvm-x86", "centos56-quality2"],
    "builddir": "kvm-fulltest2-big",
    "factory": f_kvm_fulltest2_big,
    "nextBuild": myNextBuild,
    "category": "main",
    }



def getConnectorCBuilder(name, kvm_image, port, cpu):
    bin_fact = factory.BuildFactory()
    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    bin_fact.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))
    bin_fact.addStep(ShellCommand(
        description=["rsyncing", "VMs"],
        descriptionDone=["rsync", "VMs"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-build.qcow2",
                 "/kvm/vms/"]))
    bin_fact.addStep(Compile(
        description=["making", "bintar"],
        descriptionDone=["make", "bintar"],
        timeout=3600,
        logfiles={"kernel": "kernel_"+port+".log"},
        env={"TERM": "vt102"},
        command=["runvm", "--port="+port, "--user=buildbot", "--cpu="+cpu, "--smp=4", "--logfile=kernel_"+port+".log", "--base-image=/kvm/vms/"+kvm_image+"-build.qcow2", "--work-image=/dev/shm/vm-tmp-"+port+".qcow2", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("""
set -ex
cd buildbot
rm -Rf build
bzr co lp:mariadb-native-client build
cd build
cmake .
make package
echo *.tar.gz > ../bindistname.txt
#mv "$(cat ../../bindistname.txt)" ../
"""),
        WithProperties("= scp -P "+port+" "+kvm_scpopt+" 'buildbot@localhost:buildbot/build/*.tar.gz' ."),
        "= scp -P "+port+" "+kvm_scpopt+" buildbot@localhost:buildbot/bindistname.txt .",
]))
    bin_fact.addStep(SetPropertyFromCommand(
        property="bindistname",
        command=["cat", "bindistname.txt"],
        ))
    addPackageArchiveStep(bin_fact, '"%(bindistname)s"', "%(revision)s")
    return {'name': name, 'slavenames': ["knielsen-kvm-x86", "centos56-quality2"], 'builddir': name, 'factory': bin_fact,
            "nextBuild": myNextBuild,
            "category": "connectors" }


#bld_kvm_connectorc_precise_x86 = getConnectorCBuilder("kvm-connectorc-precise-x86", "vm-precise-i386", "2268", "qemu64")


#f_freebsd_amd64 = factory.BuildFactory()
#f_freebsd_amd64.addStep(bzr_checkout)
#f_freebsd_amd64.addStep(getCompileStep(["BUILD/compile-pentium64-max"],
#                                       env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
#                                            "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}))
#f_freebsd_amd64.addStep(getMTR(
#        test_type="nm",
#        test_info="Normal run, mixed-mode binlogging",
#        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --parallel=2 --force --retry=3 "]))
#
#bld_freebsd_amd64 = {'name': "freebsd-amd64",
#                     'slavename': "jakob-freebsd",
#                     'builddir': "jakob-freebsd",
#                     'factory': f_freebsd_amd64,
#                     "nextBuild": myNextBuild,
#                     "category": "experimental",
#                     }


#f_adutko3 = factory.BuildFactory()
#f_adutko3.addStep(bzr_checkout)
#f_adutko3.addStep(getCompileStep(["BUILD/compile-pentium64-valgrind-max"],
#                                  env={"AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}))
#f_adutko3.addStep(getMTR(
#        test_type="nm",
#        test_info="Normal run, mixed-mode binlogging",
#        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --parallel=2 --force --retry=3"]))
#
#bld_adutko3 = {'name': "adutko-generic",
#               'slavename': "adutko3",
#               'builddir': "adutko3",
#               'factory': f_adutko3,
#               "nextBuild": myNextBuild,
#               "category": "experimental",
#               }

#f_aps82_204 = factory.BuildFactory()
#f_aps82_204.addStep(bzr_checkout)
#f_aps82_204.addStep(getCompileStep(["BUILD/compile-pentium64-valgrind-max"],
#                                    env={"AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}))
#f_aps82_204.addStep(getMTR(
#        test_type="nm",
#        test_info="Normal run, mixed-mode binlogging",
#        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --parallel=2 --force --retry=3"]))
#
#bld_aps82_204 = {'name': "aps82-204-generic",
#                'slavename': "aps82-204",
#                'builddir': "aps82_204",
#                'factory': f_aps82_204,
#                "nextBuild": myNextBuild,
#                "category": "experimental",
#                }


f_starfs_debug = factory.BuildFactory()
f_starfs_debug.addStep(maybe_bzr_checkout)
f_starfs_debug.addStep(maybe_git_checkout)
f_starfs_debug.addStep(getCompileStep(["sh", "-c", "cmake . -DCMAKE_BUILD_TYPE=Debug && make"]))
#f_starfs_debug.addStep(getCompileStep(["cmake -DCMAKE_BUILD_TYPE=Debug ."]))
f_starfs_debug.addStep(getMTR(
        test_type="nm",
        test_info="Debug run, no --ps-protocol",
        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --parallel=2 --force --retry=3 --testcase-timeout=60  --suite-timeout=1200 --max-test-fail=100 --max-save-core=0 --max-save-datadir=1"],
        parallel=2))

f_starfs_debug.addStep(getMTR(
        test_type="pm",
        test_info="Debug run, --ps-protocol",
        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --ps-protocol --parallel=2 --force --retry=3 --testcase-timeout=60  --suite-timeout=1200 --max-test-fail=100 --max-save-core=0 --max-save-datadir=1"],
        parallel=2))

bld_starfs_debug = {'name': "bld-starfs-debug",
                'slavenames': ["starfsmenn1", "starfsmenn2"],
                'builddir': "starfsmenn1",
                'factory': f_starfs_debug,
                "nextBuild": myNextBuild,
                "category": "experimental",
                }


f_starfs_release = factory.BuildFactory()
f_starfs_release.addStep(maybe_bzr_checkout)
f_starfs_release.addStep(maybe_git_checkout)
#f_starfs_release.addStep(getCompileStep(["sh", "-c", "cmake . -DBUILD_CONFIG=mysql_release -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DENABLE_ASSEMBLER=1 -DWITH_EXTRA_CHARSETS=complex -DENABLE_THREAD_SAFE_CLIENT=1 -DWITH_BIG_TABLES=1 -DWITH_PLUGIN_ARIA=1 -DWITH_ARIA_TMP_TABLES=1 -DWITH_SSL=bundled -DWITH_MAX=AUTO -DWITH_EMBEDDED_SERVER=1 -DWITH_LIBEVENT=bundled -DPLUGIN_PLUGIN_FILE_KEY_MANAGEMENT=NO -DENABLE_LOCAL_INFILE=1 -DPLUGIN_PERFSCHEMA=NO -DCMAKE_VERBOSE_MAKEFILE=1 -DWITH_JEMALLOC=auto && make"],
#f_starfs_release.addStep(getCompileStep(["cmake -DBUILD_CONFIG=mysql_release . && make"]))
f_starfs_release.addStep(getCompileStep(["sh", "-c", "cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DWITH_EXTRA_CHARSETS=complex -DWITH_SSL=bundled -DPLUGIN_PERFSCHEMA=NO -DCMAKE_VERBOSE_MAKEFILE=1 && make -j3"]))
f_starfs_release.addStep(getMTR(
        test_type="nm",
        test_info="Non-debug run, no --ps-protocol",
        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --parallel=2 --force --retry=3  --max-test-fail=100 --max-save-core=0 --max-save-datadir=1 --testcase-timeout=60 --suite-timeout=1200"],
        timeout=14400,
        parallel=2))

f_starfs_release.addStep(getMTR(
        test_type="pm",
        test_info="Non-debug run, --ps-protocol",
        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --ps-protocol --parallel=2 --force --retry=3  --max-test-fail=100 --max-save-core=0 --max-save-datadir=1 --testcase-timeout=60 --suite-timeout=1200"],
        timeout=14400,
        parallel=2))

bld_starfs_release = {'name': "bld-starfs-release",
                'slavenames': ["starfsmenn1", "starfsmenn2"],
                'builddir': "starfsmenn2",
                'factory': f_starfs_release,
                "nextBuild": myNextBuild,
                "category": "experimental",
                }

c['builders'] = [
                bld_work_valgrind, bld_gcov,
                bld_xenial_valgrind,
		bld_compile_connectors, bld_test_handlersocket, bld_customer_data,
#                 bld_valgrind_32, bld_rel_amd64,
#                 bld_dbg_x86,
#                 bld_archivist_amd64, bld_archivist_cnc,
#                 bld_dbg2_x86,
#                 bld_sol_sparc_32,
#                 bld_toby_amd64, bld_toby_sparc32, bld_toby_sparc64,
#                 bld_linux_debug,
#                 bld_adutko_amd64, bld_adutko_alpha,
#                 bld_sanja_gentoo_amd64,
#                 bld_valgrind,
                 bld_kvm_tarbake_jaunty_x86,
#                 bld_kvm_zip_winxp_x86,
#                bld_opensolaris_511_bintar,
#                 bld_kvm_rpm_centos5_x86, bld_kvm_rpm_centos5_amd64,
                 bld_kvm_rpm_centos6_x86, bld_kvm_rpm_centos6_amd64,
#                 bld_kvm_rpm_centos7_0_x86,
#                 bld_kvm_rpm_centos7_0_x86_64,
                 bld_kvm_rpm_centos7_amd64,
                 bld_kvm_rpm_centos73_amd64,
                 bld_kvm_rpm_centos73_ppc64,
                 bld_kvm_rpm_centos73_ppc64le,
#                 bld_kvm_zyp_opensuse13_1_x86, bld_kvm_zyp_opensuse13_1_x86_64,
#                 bld_kvm_zyp_opensuse13_x86, bld_kvm_zyp_opensuse13_amd64,
                 bld_kvm_zyp_opensuse42_amd64,
                 bld_kvm_zyp_sles11_x86,
#                 bld_kvm_zyp_sles11_x86_64,
                 bld_kvm_zyp_sles11_amd64,
                 bld_kvm_zyp_sles11sp1_amd64,
#                 bld_kvm_zyp_sles12_x86_64,
                 bld_kvm_zyp_sles12_amd64,
#                 bld_kvm_rpm_fedora16_x86, bld_kvm_rpm_fedora16_amd64,
#                 bld_kvm_rpm_fedora17_x86, bld_kvm_rpm_fedora17_amd64,
#                 bld_kvm_rpm_fedora18_x86, bld_kvm_rpm_fedora18_amd64,
#                 bld_kvm_rpm_fedora19_x86, bld_kvm_rpm_fedora19_amd64,
#                 bld_kvm_rpm_fedora20_x86, bld_kvm_rpm_fedora20_amd64,
#                 bld_kvm_rpm_fedora21_x86, bld_kvm_rpm_fedora21_amd64,
#                 bld_kvm_rpm_fedora22_x86, bld_kvm_rpm_fedora22_amd64,
#                 bld_kvm_rpm_fedora23_x86, bld_kvm_rpm_fedora23_amd64,
                 bld_kvm_rpm_fedora24_x86, bld_kvm_rpm_fedora24_amd64,
                 bld_kvm_rpm_fedora25_x86, bld_kvm_rpm_fedora25_amd64,
#                 bld_kvm_rpm_opensuse12_x86, bld_kvm_rpm_opensuse12_amd64,
#                 bld_kvm_rpm_rhel6_x86, # Some kvm images are missing
#                 bld_kvm_rpm_rhel6_amd64,
#                 bld_kvm_rpm_rhel5_x86,
#                 bld_kvm_rpm_rhel5_amd64,
#                 bld_kvm_deb_debian4_amd64, bld_kvm_deb_debian4_x86,
#                 bld_kvm_deb_debian5_amd64, bld_kvm_deb_debian5_x86,
#                 bld_kvm_deb_debian6_amd64, bld_kvm_deb_debian6_x86,
                 bld_kvm_deb_wheezy_amd64, bld_kvm_deb_wheezy_x86,
                 bld_kvm_deb_jessie_amd64, bld_kvm_deb_jessie_x86,
                 bld_kvm_deb_jessie_ppc64le,
                 bld_kvm_deb_stretch_amd64, bld_kvm_deb_stretch_x86,
                 bld_kvm_deb_stretch_ppc64le,
                 bld_kvm_deb_sid_amd64, bld_kvm_deb_sid_x86,
#                 bld_kvm_deb_hardy_amd64, bld_kvm_deb_hardy_x86,
#                 bld_kvm_deb_intrepid_amd64, bld_kvm_deb_intrepid_x86,
#                 bld_kvm_deb_jaunty_amd64, bld_kvm_deb_jaunty_x86,
#                 bld_kvm_deb_karmic_amd64, bld_kvm_deb_karmic_x86,
#                 bld_kvm_deb_lucid_amd64, bld_kvm_deb_lucid_x86,
#                 bld_kvm_deb_maverick_amd64, bld_kvm_deb_maverick_x86,
#                 bld_kvm_deb_natty_amd64, bld_kvm_deb_natty_x86,
#                 bld_kvm_deb_oneiric_amd64, bld_kvm_deb_oneiric_x86,
#                 bld_kvm_deb_precise_amd64, bld_kvm_deb_precise_x86,
#                 bld_kvm_deb_quantal_amd64, bld_kvm_deb_quantal_x86,
#                 bld_kvm_deb_raring_amd64, bld_kvm_deb_raring_x86,
#                 bld_kvm_deb_saucy_amd64, bld_kvm_deb_saucy_x86,
                 bld_kvm_deb_trusty_amd64, bld_kvm_deb_trusty_x86,
                 bld_kvm_deb_trusty_ppc64le,
#                 bld_kvm_deb_utopic_amd64, bld_kvm_deb_utopic_x86,
#                 bld_kvm_deb_vivid_amd64, bld_kvm_deb_vivid_x86,
#                 bld_kvm_deb_wily_amd64, bld_kvm_deb_wily_x86,
                 bld_kvm_deb_xenial_amd64, bld_kvm_deb_xenial_x86,
                 bld_kvm_deb_xenial_ppc64le,
                 bld_kvm_deb_yakkety_amd64, bld_kvm_deb_yakkety_x86,
                 bld_kvm_deb_zesty_amd64, bld_kvm_deb_zesty_x86,
#                 bld_kvm_bintar_hardy_amd64, bld_kvm_bintar_hardy_x86,
#                 bld_kvm_bintar_precise_amd64, bld_kvm_bintar_precise_x86,
                 bld_kvm_bintar_trusty_amd64, bld_kvm_bintar_trusty_x86,
                 bld_kvm_bintar_quantal_amd64, bld_kvm_bintar_quantal_x86,
                 bld_kvm_bintar_centos5_amd64, bld_kvm_bintar_centos5_x86,
                 bld_kvm_freebsd11_amd64, bld_kvm_freebsd11_x86,
#                bld_opensolaris_511_x86,
#                 bld_mac_mini_x86_dbg,
#                 bld_fedora13_x86_dbg,
#                bld_win7_x86,	# can not run 24/7
               bld_winx64_packages,
               bld_win32_packages,
		bld_win32_debug,
		bld_winx64_debug,

#                bld_upgrade_mysql51_mariadb52_bintar,
                 bld_sol10_64,
#                 bld_sol10_sparc,
#                 bld_bsd9_64,
                 bld_kvm_dgcov_jaunty_i386,
                 bld_kvm_fulltest,
                 bld_kvm_fulltest2,
                 bld_kvm_fulltest_big,
                 bld_kvm_fulltest2_big,
#                 bld_freebsd_amd64,
#                 bld_adutko3,
#                 bld_macintosh,
                 bld_labrador,
                 bld_mac_1012_bintar,
                 bld_mac_1012_pkg,
#                 bld_aps82_204,
                 bld_win_rqg_se,
                 bld_win_rqg_debug,
                bld_kvm_qa_linux,
                bld_qa_bb_experiments,
                bld_win_jdbc,
                bld_win_connector_c,
                bld_win_connector_c_3,
                bld_freebsd_x64_connector_c,
                bld_freebsd11_x64_connector_c,
                bld_freebsd11_x86_connector_c,
                bld_linux_x64_connector_c,
                bld_linux_x86_connector_c,
                bld_centos6_i386_connector_c,
                # Current ga c/odbc version
                bld_win_connector_odbc,
                bld_linux_x64_connector_odbc,
                bld_linux_x86_connector_odbc,
                bld_centos7_x86_connector_odbc,
                bld_centos7_x64_connector_odbc,
                bld_jessie_x86_connector_odbc,
                bld_jessie_x64_connector_odbc,
                bld_generic_x86_connector_odbc,
                bld_generic_x64_connector_odbc,
                # Current "new" c/odbc version
                bld_win_connector_odbc_new,
                bld_linux_x64_connector_odbc_new,
                bld_linux_x86_connector_odbc_new,
                bld_centos7_x64_connector_odbc_new,
                bld_jessie_x86_connector_odbc_new,
                bld_jessie_x64_connector_odbc_new,
                bld_generic_x86_connector_odbc_new,
                bld_generic_x64_connector_odbc_new,
                bld_centos7_x86_connector_odbc_new,
#                bld_kvm_connectorc_precise_x86,
                bld_starfs_debug,
                bld_starfs_release,
#                bld_raspberrypi,
#                bld_power01,
                bld_p8_rhel6_bintar,
                bld_p8_rhel6_bintar_debug,
#                bld_p8_trusty_bintar,
#                bld_p8_trusty_bintar_debug,
#                bld_p8_xenial_bintar,
#                bld_p8_xenial_bintar_debug,
                bld_p8_rhel7_bintar,
                bld_p8_rhel7_bintar_debug,
                bld_p8_rhel71_bintar,
                bld_p8_rhel71_bintar_debug,
#                bld_p8_trusty_deb,
#                bld_p8_xenial_deb,
                bld_p8_rhel6_rpm,
                bld_p8_rhel7_rpm,
                bld_p8_rhel71_rpm,
                bld_p8_suse12_rpm,
#               bld_ibmz_rhel6_bintar,
#               bld_ibmz_rhel6_rpm,
#               bld_ibmz_sles11_bintar,
#               bld_ibmz_sles11_rpm,

                # galera package builders
                #gal_bld_kvm_rpm_centos5_x86, gal_bld_kvm_rpm_centos5_amd64,
                gal_bld_kvm_rpm_centos6_x86, gal_bld_kvm_rpm_centos6_amd64,
                #gal_bld_kvm_rpm_centos7_0_x86_64,
                gal_bld_kvm_rpm_centos7_amd64,
                gal_bld_kvm_rpm_centos73_amd64,
                gal_bld_kvm_rpm_centos73_ppc64,
                gal_bld_kvm_rpm_centos73_ppc64le,
                #gal_bld_kvm_rpm_fedora19_x86, gal_bld_kvm_rpm_fedora19_amd64,
                #gal_bld_kvm_rpm_fedora20_x86, gal_bld_kvm_rpm_fedora20_amd64,
                #gal_bld_kvm_rpm_fedora21_x86, gal_bld_kvm_rpm_fedora21_amd64,
                #gal_bld_kvm_rpm_fedora22_x86, gal_bld_kvm_rpm_fedora22_amd64,
                #gal_bld_kvm_rpm_fedora23_x86, gal_bld_kvm_rpm_fedora23_amd64,
                gal_bld_kvm_rpm_fedora24_x86, gal_bld_kvm_rpm_fedora24_amd64,
                gal_bld_kvm_rpm_fedora25_x86, gal_bld_kvm_rpm_fedora25_amd64,
                #gal_bld_kvm_rpm_rhel5_x86, gal_bld_kvm_rpm_rhel5_amd64,
                #gal_bld_kvm_deb_debian6_amd64, gal_bld_kvm_deb_debian6_x86,
                gal_bld_kvm_deb_wheezy_amd64, gal_bld_kvm_deb_wheezy_x86,
                gal_bld_kvm_deb_jessie_amd64, gal_bld_kvm_deb_jessie_x86,
                gal_bld_kvm_deb_jessie_ppc64le,
                gal_bld_kvm_deb_stretch_amd64, gal_bld_kvm_deb_stretch_x86,
                gal_bld_kvm_deb_stretch_ppc64le,
                gal_bld_kvm_deb_sid_amd64, gal_bld_kvm_deb_sid_x86,
                #gal_bld_kvm_deb_lucid_amd64, gal_bld_kvm_deb_lucid_x86,
                gal_bld_kvm_deb_precise_amd64, gal_bld_kvm_deb_precise_x86,
                gal_bld_kvm_deb_trusty_amd64, gal_bld_kvm_deb_trusty_x86,
                gal_bld_kvm_deb_trusty_ppc64le,
                #gal_bld_kvm_deb_utopic_amd64, gal_bld_kvm_deb_utopic_x86,
                #gal_bld_kvm_deb_vivid_amd64, gal_bld_kvm_deb_vivid_x86,
                #gal_bld_kvm_deb_wily_amd64, gal_bld_kvm_deb_wily_x86,
                gal_bld_kvm_deb_xenial_amd64, gal_bld_kvm_deb_xenial_x86,
                gal_bld_kvm_deb_xenial_ppc64le,
                gal_bld_kvm_deb_yakkety_amd64, gal_bld_kvm_deb_yakkety_x86,
                gal_bld_kvm_deb_zesty_amd64, gal_bld_kvm_deb_zesty_x86,
                #gal_bld_kvm_bintar_quantal_amd64, gal_bld_kvm_bintar_quantal_x86,
                #gal_bld_kvm_bintar_centos5_amd64, gal_bld_kvm_bintar_centos5_x86,
                #gal_bld_kvm_zyp_opensuse13_x86, gal_bld_kvm_zyp_opensuse13_amd64,
                gal_bld_kvm_zyp_opensuse42_amd64,
                gal_bld_kvm_zyp_sles11_x86, gal_bld_kvm_zyp_sles11_amd64,
                gal_bld_kvm_zyp_sles12_amd64, gal_bld_kvm_zyp_sles11sp1_amd64,
                # Power8
                gal_bld_p8_rhel6_rpm, gal_bld_p8_rhel7_rpm,
                gal_bld_p8_rhel71_rpm,
                #gal_bld_p8_trusty_deb,
                gal_bld_p8_suse12_rpm,
                #gal_bld_p8_xenial_deb,

                ]


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8010, allowForce=True))

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8011, allowForce=False,
    change_hook_dialects={ 'github' : True },
    change_hook_auth=["file:changehook.passwd"]))

from buildbot.status import words
irc = words.IRC("irc.freenode.net", "mariabuildbot",
                channels=["maria"],
                password=configDict["cfg"]["ircPassword"],
                notify_events={
                  "exception": 1,
                  "successToFailure": 1,
                  "failureToSuccess": 1,
                },
                allowForce=True,
                )
# Disable it until we fix it to only notify about main trees.
#c["status"].append(irc)


from buildbot.status import mail
c['status'].append(mail.MailNotifier(fromaddr="buildbot-reports@hasky.askmonty.org",
                                      extraRecipients=["maria-buildbot-reports@lists.askmonty.org"],
                                      sendToInterestedUsers=False))

# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "MariaDB"
#c['projectURL'] = "https://launchpad.net/maria"
c['projectURL'] = "http://mariadb.org/jira"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

#c['buildbotURL'] = "http://askmonty.org/buildbot/"
c['buildbotURL'] = "http://buildbot.askmonty.org/buildbot/"

c['buildHorizon'] = 250
c['logHorizon'] = 200
c['buildCacheSize'] = 5000
c['changeCacheSize'] = 10000
