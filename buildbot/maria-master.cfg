##, -*- python -*-
# ex: set syntax=python:

#-------------------------------------------------------------------------------
# To reload buildbot:
#  1) check that this file does not have any syntax errors with:
#       sudo -u buildbot PYTHONPATH=/usr/local/buildbot/lib/python python -c 'exec open("maria-master.cfg", "r")'
#     (no output = no syntax errors)
#  2) reload with:
#       sudo /etc/init.d/buildmaster reload
#  3) check the reload process:
#       sudo less /var/lib/buildbot/maria/twistd.log
#     - or -
#       sudo tail -f /var/lib/buildbot/maria/twistd.log
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
#  Notice: Once per day this file is auto-commited into the mariadb.org-tools
#          project on GitHub if it has been modified. As a safety feature,
#          in case someone is currently making changes to the file, commits
#          will _not_ take place if the file was modified less than two hours
#          before the cron job runs.
#
#          The cron job runs every morning at 0300
#
#          The auto-commit script does a "bzr pull" prior to checking if there
#          are uncommited changes that need to be commited; but because of the
#          way the script works, the version of this file currently in
#          production trumps all other versions when it comes to deciding what
#          to auto-commit and push, even if the changes on GitHub are more
#          recent.
#
#          With that in mind, if you are modifing this file, you are encouraged
#          follow the following procedure:
#
#              First:  Branch the mariadb.org-tools project from GitHub, if you
#                      haven't already, and prototype and stage your changes
#                      there first. You can commit your changes locally, but
#                      don't push your changes yet.
#
#              Second: When your changes are ready, do a last pull from
#                      GitHub and a diff of the production file, just to
#                      make sure there are no conflicts with your changes or
#                      that you are not overwriting someone else's more recent
#                      production changes.
#
#              Third:  Assuming you are not erasing someone else's changes,
#                      copy your version of the file to the production
#                      location and reload buildbot.
#
#              Fourth: Test and verify that all is well with your changes after
#                      they are in production.
#
#              Fifth:  Commit your changes in your local branch of
#                      mariadb.org-tools, if you haven't already, with a meaningful
#                      commit message; and push your changes up to GitHub.
#-------------------------------------------------------------------------------

# Master configuration file for MariaDB buildbot.
# Copyright (C) 2017  MariaDB
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# On our Ubuntu/Debian VMs we use debconf-set-selections with a seed file
# to auto-populate the answers to the questions that the .deb packages ask.
# 'rootpass' - the default password for root user is set during the same
# process.

from buildbot.changes.filter import ChangeFilter

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# We load the slave and database passwords from an external file, so
# that the rest of the configuration can be public.
configDict= { "cfg": { } }
execfile("/etc/buildbot/maria-master-private.cfg", configDict, { })

c['db_url'] = configDict["cfg"]["db_url"]

#-------------------------------------------------------------------------------
# Default Memory for KVM builders
#-------------------------------------------------------------------------------
memory_def="6144"
#-------------------------------------------------------------------------------

####### BUILDSLAVES

def mkSlave(name, **kwargs):
    return BuildSlave(name, configDict["cfg"]["slavePasswords"][name], **kwargs)

from buildbot.buildslave import BuildSlave
c['slaves'] = [mkSlave("valgrind", max_builds=1)
              ,mkSlave("work-opensuse-amd64", max_builds=1)
              ,mkSlave("sanja-mac-x86", max_builds=1)
              ,mkSlave("knielsen-kvm-x86", max_builds=2)
              ,mkSlave("adutko-centos5-amd64", max_builds=1)
              ,mkSlave("mariadb-brs", max_builds=1)
              ,mkSlave("adutko-ultrasparc3", max_builds=1)
              ,mkSlave("centos56-quality2", max_builds=2)
              ,mkSlave("haidong-fedora13-x86", max_builds=1)
              ,mkSlave("solaris10-x86", max_builds=1)
              ,mkSlave("jakob-freebsd", max_builds=1)
              ,mkSlave("adutko3", max_builds=1)
              ,mkSlave("wlads-box",max_builds=4)
              ,mkSlave("terrier2", max_builds=1)
              ,mkSlave("wizard-box", max_builds=1)
              ,mkSlave("wizard-box2", max_builds=1)
              ,mkSlave("bbwin2", max_builds=1)
              ,mkSlave("bbwin3", max_builds=3)
              ,mkSlave("bb-win32", max_builds=4)
              ,mkSlave("bb-win-azure", max_builds=4)
              ,mkSlave("bb-win-azure-2", max_builds=4)
              ,mkSlave("bc1-win", max_builds=4)
              ,mkSlave("win-connectors", max_builds=4)
              ,mkSlave("aps82-204", max_builds=1)
              ,mkSlave("bsd9", max_builds=1)
              ,mkSlave("labrador", max_builds=2)
              ,mkSlave("db-mac-1012", max_builds=1)
              ,mkSlave("starfsmenn1", max_builds=1)
              ,mkSlave("starfsmenn2", max_builds=1)
              ,mkSlave("bb01", max_builds=4)
              ,mkSlave("bb02", max_builds=4)
              ,mkSlave("bb03", max_builds=4)
              ,mkSlave("bb05", max_builds=8)
              ,mkSlave("aidi", max_builds=30)
              ,mkSlave("p801", max_builds=4)
              ,mkSlave("bc01", max_builds=4)
              ,mkSlave("power8-vlp01", max_builds=1)
              ,mkSlave("power8-vlp03", max_builds=1)
              ,mkSlave("power8-vlp04", max_builds=1)
              ,mkSlave("power8-vlp05", max_builds=1)
              ,mkSlave("power8-vlp06", max_builds=1)
              ,mkSlave("p8-rhel6-bb", max_builds=1)
               ]

# Build slaves that have a kvm new enough to understand compat:1.1 qemu images.
kvm11_slaves=["bb01", "bb02", "bb03", "bb05", "aidi"]

# All kvm slaves (kvm11_slaves + [ "more", "slaves" ])
kvm_slaves=kvm11_slaves

# Build slaves for connectors
connector_slaves=["bc01"]

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

# Get changes from Launchpad branch subscription emails.
# This requires that buildbot@askmonty.org be subscribed to each branch to be tracked.
from buildbot.changes import mail

bzrBranches = {
    "lp:~maria-captains/maria/maria-10.0-mwl253" : "maria-10.0-mwl253",
    "lp:~maria-captains/maria/10.0-show-explain" : "10.0-show-explain",
    "lp:~maria-captains/maria/5.5" : "5.5",
    "lp:~maria-captains/maria/5.6" : "5.6",
    "lp:~maria-captains/maria/trunk" : "trunk",
    "lp:~maria-captains/maria/5.5-serg" : "5.5-serg",
    "lp:~maria-captains/maria/5.5-wlad" : "5.5-wlad",
    "lp:~maria-captains/maria/5.5-knielsen" : "5.5-knielsen",
    "lp:~maria-captains/maria/5.5-release" : "5.5-release",
    "lp:~maria-captains/maria/5.5-hf" : "5.5-hf",
    "lp:~maria-captains/maria/5.5-noga-hf" : "5.5-noga-hf",
    "lp:~maria-captains/maria/5.5-jani" : "5.5-jani",
    "lp:~maria-captains/maria/maria-5.5-galera" : "maria-5.5-galera",
    "lp:~maria-captains/maria/maria-10.0-galera" : "maria-10.0-galera",
    "lp:~maria-captains/maria/maria-5.5-monty" : "maria-5.5-monty",
    "lp:~maria-captains/maria/10.0" : "10.0",
    "lp:~maria-captains/maria/10.0-monty" : "10.0-monty",
    "lp:~maria-captains/maria/10.0-serg" : "10.0-serg",
    "lp:~maria-captains/maria/10.0-connect" : "10.0-connect",
    "lp:~maria-captains/maria/10.0-release" : "10.0-release",
    "lp:~maria-captains/maria/10.0-bar" : "10.0-bar",
    "lp:~maria-captains/maria/10-hf" : "10-hf",
    "lp:~maria-captains/maria/10.0-knielsen" : "10.0-knielsen",
    "lp:~maria-captains/maria/10.0-mdev26" : "10.0-mdev26",
    "lp:~maria-captains/maria/maria-10.0-mwl253" : "maria-10.0-mwl253",
    "lp:~maria-captains/maria/10.0-show-explain" : "10.0-show-explain",
    "lp:~maria-captains/maria/10.0-spider" : "10.0-spider",
    "lp:~maria-captains/maria/5.5-svoj" : "5.5-svoj",
    "lp:~maria-captains/maria/10.0-mroonga" : "10.0-mroonga",
    "lp:~maria-captains/maria/10.0-FusionIO" : "10.0-FusionIO",
    "lp:~maria-captains/maria/10.0-Galera-FusionIO" : "10.0-Galera-FusionIO",
    "lp:~maria-captains/maria/10.0-elenst" : "10.0-elenst",
    "lp:~maria-captains/maria/5.5-elenst" : "5.5-elenst",
    "lp:~maria-captains/maria/10.0-mdev6657-try2" : "10.0-mdev6657-try2",
    "lp:~maria-captains/maria/10.0-csc8034-r1" : "10.0-csc8034-r1",
    "lp:~maria-captains/maria/10.0-custombld" : "10.0-custombld",
    "lp:~maria-captains/maria/10.0.15-mdev6634-r2" : "10.0.15-mdev6634-r2",
    }

bzrBranches_all = dict(bzrBranches)

mailSource = mail.BzrLaunchpadEmailMaildirSource("/var/lib/buildbot/Maildir",
                                                 branchMap=bzrBranches_all)
c['change_source'] = [mailSource]

gitBranches = {
    "https://github.com/MariaDB/server" :
      (
        "10.3",
        "10.2",
        "10.1",
        "10.0",
        "5.5",
        "10.0-galera",
        "5.5-galera",
        "10.2-spider",
        "bb-*", # yes, wildcards are ok
        "hf-*", # hotfix branches
      ),
    "https://github.com/Buggynours/MariaDB" : # this is Olivier Bertrand
      (
        "ob-*",
      ),
    "https://github.com/oerdnj/MariaDB-server" : # this is Ondrej Sury
      (
        "os-*",
      ),
    "https://github.com/Kentoku/MariaDB" : # this is Kentoku Shiba
      (
        "ks-*",
      ),
    "https://github.com/ottok/mariadb" : # Otto, new debian packaging
      (
        "ok-*",
      ),
    "https://github.com/ottok/mariadb-10.0" : # Otto, mirror of official debian packaging
      (
        "jessie",
        "jessie-*",
      ),
    "https://github.com/f4rnham/server" : # Martin Kaluznik, MDEV-7502
      (
        "bb-*",
      ),
    "git@github.com:mariadb-corporation/MariaDBEnterprise" :
      (
        "10.1e",
        "10.0e",
        "hf-*",
        "bb-*",
        "5.5e",
        "10.0e-galera",
        "5.5e-galera",
        "10.0.30-MDEV-11958",
      ),
     "https://github.com/MariaDB/mariadb-connector-c":
      (
        "master",
        "connector_c_2.2",
        "connector_c_3.0",
        "bb-*",
      ),
     "https://github.com/MariaDB/mariadb-connector-j":
      (
        "master",
      ),
     "https://github.com/MariaDB/mariadb-connector-odbc":
      (
        "odbc-2.0",
        "odbc-3.0",
        "master"
      ),
     "https://github.com/MariaDB/galera": # Nirbhay: mariadb-3.x-* is for specific galera bugs/features.
      (
        "mariadb-3.x",
        "mariadb-3.x-*",
      )
    }


# bzr/git branch filter
import fnmatch
def fnmatch_any(s, list_of_patterns):
    return any(fnmatch.fnmatch(s, p) for p in list_of_patterns)

class BranchFilter(ChangeFilter):
    def __init__(self, on_launchpad = {}, on_github = {}):
        self.bzr_branches = on_launchpad
        self.git_branches = on_github

    def filter_change(self, change):
        repo = getattr(change, 'repository', '?')
        branch = getattr(change, 'branch', '?')
        if re.match('(https://|git@)github.com', repo):
            # git branch on github
            return fnmatch_any(branch, self.git_branches.get(repo, ()))
        else:
            # bzr branch on launchpad
            return branch == self.bzr_branches.get('lp:' + repo)

    def __repr__(self):
        return "<%s>" % (self.__class__.__name__,)

# Some branches are more important than others...
def myNextBuild(bldr, requests):
  best_r= None
  best_prio= None
  for r in requests:
    if r.source is not None:
      b= r.source.branch
    else:
      b= r.properties.get("branch")
    # Put here the name of the tree you want to temporarily prioritize over everything
    if b in ["current-hottest-tree"]:
        prio= 2
    elif fnmatch.fnmatch(b, 'bb-*-release'):
        prio= 2
    elif b in ["5.5", "10.0", "10.1", "10.2", "10.3",
               "10.0-galera", "5.5-galera", "10.2-spider", "bb-10.3-temporal"]:
        prio= 1
    elif fnmatch.fnmatch(b, 'hf-*'): # HotFix branches
        prio= 1
    else:
        prio= 0
    if best_r is None or prio > best_prio:
        best_r= r
        best_prio= prio
  return best_r

# Some builders only run in main trees.
mainTreesList10_2Plus = ["10.3", "10.2", "bb-10.2-release", "bb-10.3-release",
                         "bb-10.2-compatibility", "10.2-spider"
                         ]
mainTreesList10_1Plus = ["10.1", "10.1e", "bb-10.1-release",
                         "bb-10.1-serg"
                         ] + mainTreesList10_2Plus
mainTreesList10_0Plus = ["10.0", "10.0e", "bb-10.0-release",
                         "10.0e-galera", "10.0-galera", "jessie", "jessie-*"
                         ] + mainTreesList10_1Plus
mainTreesList = ["bb-5.5-release", "5.5", "5.5e",
                 "trunk", "5.5e-galera", "5.5-galera", "bb-5.5-serg"
                 ] + mainTreesList10_0Plus
def isMainTree(step):
  return step.getProperty("branch") in mainTreesList
def isMainTree10_2Plus(step):
  return step.getProperty("branch") in mainTreesList10_2Plus
def isMainTree10_1Plus(step):
  return step.getProperty("branch") in mainTreesList10_1Plus
def isMainTree10_0Plus(step):
  return step.getProperty("branch") in mainTreesList10_0Plus

# In 5.[123] we use OurDelta legacy bakery scripts.
# In 5.5+ we have the necessary stuff directly in the source tree.
# And 5.5 uses CMake while older use autotools
def branch_is_5_123(step):
  if re.search("5\\.[123]", step.getProperty("branch")):
    return True
  else:
    return False

def branch_is_10_x(step):
  if re.search("10\\.[0-9]", step.getProperty("branch")):
    return True
  elif re.search("jessie", step.getProperty("branch")):
    return True
  else:
    return False

def branch_is_10_1_or_later(step):
  if re.search("10\\.[1-9]", step.getProperty("branch")):
    return True
  else:
    return False

def branch_is_10_2_or_later(step):
  if re.search("10\\.[2-9]", step.getProperty("branch")):
    return True
  else:
    return False

def branch_is_10_3_or_later(step):
  if re.search("10\\.[3-9]", step.getProperty("branch")):
    return True
  else:
    return False

def branch_is_enterprise(step):
  return re.search("5\\.5e", step.getProperty("branch")) or re.search("10\\.[0-9]e", step.getProperty("branch"))

def branch_has_previous_minor_versions(step):
  if re.search("10\\.4", step.getProperty("branch")):
    return False
  else:
    return True

def branch_is_5_5_or_later(step):
  return not branch_is_5_123(step)

def branch_is_not_10_1(step):
  return not re.search("10\\.1", step.getProperty("branch"))

def branch_is_not_10_2(step):
  return not re.search("10\\.2", step.getProperty("branch"))

def branch_is_not_10_3(step):
  return not re.search("10\\.3", step.getProperty("branch"))

def branch_is_not_galera(step):
  return not re.search("galera", step.getProperty("branch"))

def branch_is_not_connector(step):
  return not re.search("mariadb-connector", step.getProperty("branch"))


# Trees for Debian Packaging quality assurance
debpkgBranches= ["ok-*", "jessie", "jessie-*", "os-"]

def debpkg_branch(step):
  return fnmatch_any(step.getProperty("branch"), debpkgBranches)

def rpm_test_branch(step):
  return fnmatch.fnmatch(step.getProperty("branch"), "*-rpm-*")

# Some additional new images are maintained to build Galera package.
def getGaleraBuildImage(kvm_image) :
  imagelist = ("vm-sid-amd64",
               "vm-sid-i386",
               "vm-centos5-amd64",
               "vm-centos5-i386",
               "vm-sles11sp1-amd64",)
  found = any(kvm_image in image for image in imagelist)
  if found:
      kvm_build_image=kvm_image + "-galera"
  else:
      kvm_build_image=kvm_image + "-build"
  return kvm_build_image


####### SCHEDULERS

myMainBuilders = [
    "win32-debug",
    "winx64-debug",
    "labrador",
    ]

myPower8Builders = [
     "p8-rhel6-bintar"
    ,"p8-rhel6-bintar-debug"
    ,"p8-rhel7-bintar"
    ,"p8-rhel7-bintar-debug"
    ,"p8-rhel71-bintar"
    ,"p8-rhel71-bintar-debug"
    ,"p8-rhel6-rpm"
    ,"p8-rhel7-rpm"
    ,"p8-rhel71-rpm"
    ,"p8-suse12-rpm"
    ]

myIBMzBuilders = [
    "ibmz-rhel6-bintar"
    ,"ibmz-rhel6-rpm"
    ,"ibmz-sles11-bintar"
    ,"ibmz-sles11-rpm"
    ]

myNonSystemdBuilders = [
    "kvm-deb-wheezy-amd64"
    ,"kvm-deb-wheezy-x86"
    ,"kvm-deb-trusty-ppc64le"
    ,"kvm-deb-trusty-amd64"
    ,"kvm-deb-trusty-x86"
    ,"kvm-rpm-centos6-amd64"
    ,"kvm-rpm-centos6-x86"
    ,"kvm-zyp-sles11-amd64"
    ,"kvm-zyp-sles11-x86"
    ,"kvm-zyp-sles114-amd64"
    ,"kvm-zyp-sles114-x86"
    ,"kvm-zyp-sles12-amd64"
    ]

default_branch_filter = BranchFilter(on_launchpad=bzrBranches,
                                     on_github=gitBranches)
from buildbot.scheduler import AnyBranchScheduler, Triggerable
c['schedulers'] = []
c['schedulers'].append(AnyBranchScheduler(
    name="mariadb",
    change_filter=default_branch_filter,
    treeStableTimer=60,
    builderNames=myMainBuilders))

# Power 8 builders only support 5.5 and 10.0
# We need a BranchFilter so we don't get random stuff from GitHub.
c['schedulers'].append(AnyBranchScheduler(
    name="mariadb-power8",
    change_filter=BranchFilter(on_launchpad={"lp:~maria-captains/maria/5.5" : "5.5",
                                             "lp:~maria-captains/maria/10.0" : "10.0"},
                               on_github={"https://github.com/MariaDB/server" : ("10.3","10.2","10.1","10.0","5.5","5.5-galera","10.0-galera","bb-10.2-mdev10813","10.2-spider","bb-10.1-jplindst","bb-10.1-galera"),
                                          "git@github.com:mariadb-corporation/MariaDBEnterprise" : ("10.1e","10.0e","5.5e","10.0e-galera","5.5e-galera")}),
    treeStableTimer=60,
    builderNames=myPower8Builders))

# dgcov script only supports bzr
c['schedulers'].append(AnyBranchScheduler(
    name="mariadb-bzronly",
    change_filter=BranchFilter(on_launchpad=bzrBranches),
    treeStableTimer=60,
    builderNames=["kvm-dgcov-jaunty-i386"]))

c['schedulers'].append(AnyBranchScheduler(
    name="jdbc",
    branches= "https://github.com/MariaDB/mariadb-connector-j.git",
    treeStableTimer=60,
    builderNames=["win-jdbc"
                  ]))

c['schedulers'].append(AnyBranchScheduler(
    name="connector_odbc",
    change_filter=BranchFilter(on_github={"https://github.com/MariaDB/mariadb-connector-odbc" : ("odbc-2.0")}),
    treeStableTimer=60,
    builderNames=["win_connector_odbc"
                  ]))
c['schedulers'].append(AnyBranchScheduler(
    name="connector_odbc_linux",
    change_filter=BranchFilter(on_github={"https://github.com/MariaDB/mariadb-connector-odbc" : ("odbc-2.0")}),
    treeStableTimer=60,
    builderNames=["linux_x64-connector-odbc", "linux_x86-connector-odbc", "centos7_x86-connector-odbc", "centos7_x64-connector-odbc", "jessie_x86-connector-odbc", "jessie_x64-connector-odbc", "generic_x64-connector-odbc",
                  "generic_x86-connector-odbc"
                  ]))

c['schedulers'].append(AnyBranchScheduler(
    name="connector-c",
    change_filter=BranchFilter(on_github={"https://github.com/MariaDB/mariadb-connector-c" : ("connector_c_2.3")}),
    treeStableTimer=60,
    builderNames=["win-connector_c", "freebsd_x64-connector_c", "freebsd11_x64-connector_c", "freebsd11_x86-connector_c", "linux_x64-connector_c", "linux_x86-connector_c", "centos6_i386-connector_c"
                  ]))

c['schedulers'].append(AnyBranchScheduler(
    name="connector-c-3",
    change_filter=BranchFilter(on_github={"https://github.com/MariaDB/mariadb-connector-c" : ("master", "connector_c_3.0", "bb-*")}),
    treeStableTimer=60,
    builderNames=["win-connector_c_3", "linux_x64-connector_c", "linux_x86-connector_c", "centos6_i386-connector_c", "freebsd11_x64-connector_c", "freebsd11_x86-connector_c"
                  ]))

#
# A scheduler for testing with customer data
#

c['schedulers'].append(AnyBranchScheduler(
    name="test-customer-data",
    treeStableTimer=60,
    change_filter=BranchFilter(on_launchpad={"lp:~maria-captains/maria/5.5" : "5.5",
                                             "lp:~maria-captains/maria/10.0" : "10.0"},
                               on_github={"git@github.com:mariadb-corporation/MariaDBEnterprise" : ("10.1e", "10.0e","5.5e",)}),
    builderNames=["test-customer-data"]
))



#
# A scheduler for the builder that compiles Net::HandlerSocket and tests handlersocket
#

c['schedulers'].append(AnyBranchScheduler(
    name="test-handlersocket",
    treeStableTimer=60,
    change_filter=BranchFilter(on_launchpad={"lp:~maria-captains/maria/5.5" : "5.5",
                                             "lp:~maria-captains/maria/10.0" : "10.0"}),
    builderNames=["test-handlersocket"]
))

# A scheduler for creating tarballs used by non-bzr builders.
c['schedulers'].append(AnyBranchScheduler(
    name="tarbake",
    change_filter=default_branch_filter,
    treeStableTimer=60,
    properties= {"bakebranch": "lp:~maria-captains/ourdelta/ourdelta-montyprogram-fixes"},
    builderNames=["kvm-tarbake-jaunty-x86"]))

# A scheduler for running those of the kvm-based builders that are run in
# all trees.
c['schedulers'].append(Triggerable(
        name="kvm-sched-alltrees",
        builderNames=[
                      "kvm-fulltest",
                      "kvm-fulltest2",
                      "winx64-packages",
                      "win32-packages",
                      "kvm-deb-wheezy-amd64",
                      "kvm-deb-trusty-amd64",
                      "kvm-deb-trusty-ppc64le",
                      "kvm-bintar-trusty-x86",
                      "kvm-bintar-trusty-amd64",
                      "kvm-bintar-quantal-x86",
                      "kvm-bintar-centos5-amd64",
                      "kvm-bintar-quantal-amd64",
                      "kvm-rpm-centos6-amd64",
                      "kvm-rpm-centos7-amd64",
                      "kvm-rpm-centos73-amd64",
                      "kvm-rpm-centos73-ppc64",
                      "kvm-rpm-centos73-ppc64le",
                      "kvm-rpm-centos74-amd64",
                      ]))
# A scheduler for running those of the kvm-based builders that are run only
# in main trees.
c['schedulers'].append(Triggerable(
        name="kvm-sched-mainonly",
        builderNames=[
                      "work-amd64-valgrind",
                      "mac-1012-bintar",
                      "mac-1012-pkg",
                      "bld-starfs-debug", "bld-starfs-release",
                      "kvm-bintar-centos5-x86", 
                      "kvm-freebsd11-x86", "kvm-freebsd11-amd64",
                      "kvm-rpm-centos6-x86", 
                      "kvm-zyp-sles114-x86", "kvm-zyp-sles114-amd64",
                      "kvm-zyp-sles12-amd64",
                      "kvm-deb-wheezy-x86",
                      "kvm-deb-trusty-x86",
                      "kvm-fulltest2-big",
                      "sol10-64",
                      ]))

c['schedulers'].append(Triggerable(
        name="kvm-sched-enterprise-only",
        builderNames=[
                      "kvm-zyp-sles11-x86", "kvm-zyp-sles11-amd64",
                      ]))

# A scheduler for running those of the kvm-based builders that are run only
# in main trees, and only in 10.2 or later.
c['schedulers'].append(Triggerable(
        name="kvm-sched-mainonly-10.2+",
        # Fedora 27 (and up) has MariaDB 10.2, so no need to build prior
        builderNames=[
                      "kvm-rpm-fedora27-amd64",
                      ]))

# A scheduler for running those of the kvm-based builders that are run only
# in main trees, and only in 10.1 or later.
c['schedulers'].append(Triggerable(
        name="kvm-sched-mainonly-10.1+",
        # Fedora 24 has MariaDB 10.1, so no need to build lower versions
        builderNames=[
                      "kvm-rpm-fedora25-x86", "kvm-rpm-fedora25-amd64",
                      "kvm-rpm-fedora26-amd64",
                      "kvm-deb-sid-amd64", "kvm-deb-sid-x86",
                      "kvm-deb-stretch-amd64", "kvm-deb-stretch-x86",
                      "kvm-deb-stretch-ppc64le",
                      "kvm-deb-zesty-amd64", "kvm-deb-zesty-x86",
                      "kvm-deb-artful-amd64", "kvm-deb-artful-x86",
                      ]))

c['schedulers'].append(Triggerable(
        name="kvm-sched-mainonly-10.0+",
        # Debian SID has MariaDB 10.0 native, so our 5.5 3rd-party builds
        # do not work.
	# Ubuntu Utopic has Boost 1.55, with which the old OQGRAPH does not build.
        # And the official repo has MariaDB 5.5, so there is no critical need
        # to build it
        builderNames=[
                      "kvm-deb-jessie-amd64", "kvm-deb-jessie-x86",
                      "kvm-deb-jessie-ppc64le",
                      "kvm-deb-xenial-amd64", "kvm-deb-xenial-x86",
                      "kvm-deb-xenial-ppc64le",
                      "kvm-fulltest-big",
                      "kvm-zyp-opensuse42-amd64",
                      ]))

# Created on 2017-01-22 by Elena
# to have xenial built for non-main 10+ trees instead of precise,
# which is only built for main 5.5-10.1 trees
c['schedulers'].append(Triggerable(
        name="kvm-sched-devtrees-10.0+",
        builderNames=[
                      "kvm-deb-xenial-x86",
                      ]))

# Created on 2017-11-18 by Elena
# to have stretch built for non-main 10.1+ trees instead of sid,
# which does not build for 5.5/10.0, and is experimental anyway
c['schedulers'].append(Triggerable(
        name="kvm-sched-devtrees-10.1+",
        builderNames=[
                      "kvm-deb-stretch-amd64",
                      ]))

execfile("/etc/buildbot/builders/qa/qa_schedulers.py");

#
# A scheduler for building Galera packages
#
myGaleraBuilders = [
                    "kvm-rpm-centos6-x86-gal", "kvm-rpm-centos6-amd64-gal",
                    "kvm-rpm-centos7-amd64-gal",
                    "kvm-rpm-centos73-amd64-gal",
                    "kvm-rpm-centos73-ppc64-gal",
                    "kvm-rpm-centos73-ppc64le-gal",
                    "kvm-rpm-centos74-amd64-gal",
                    "kvm-rpm-fedora25-x86-gal", "kvm-rpm-fedora25-amd64-gal",
                    "kvm-rpm-fedora26-amd64-gal",
                    "kvm-rpm-fedora27-amd64-gal",

                    "kvm-deb-precise-amd64-gal", "kvm-deb-precise-x86-gal",
                    "kvm-deb-trusty-amd64-gal", "kvm-deb-trusty-x86-gal",
                    "kvm-deb-trusty-ppc64le-gal",
                    "kvm-deb-xenial-amd64-gal", "kvm-deb-xenial-x86-gal",
                    "kvm-deb-xenial-ppc64le-gal",
                    "kvm-deb-zesty-amd64-gal", "kvm-deb-zesty-x86-gal",
                    "kvm-deb-artful-amd64-gal", "kvm-deb-artful-x86-gal",
                    "kvm-deb-wheezy-amd64-gal", "kvm-deb-wheezy-x86-gal",
                    "kvm-deb-jessie-amd64-gal", "kvm-deb-jessie-x86-gal",
                    "kvm-deb-jessie-ppc64le-gal",
                    "kvm-deb-stretch-amd64-gal", "kvm-deb-stretch-x86-gal",
                    "kvm-deb-stretch-ppc64le-gal",
                    "kvm-deb-sid-amd64-gal", "kvm-deb-sid-x86-gal",

                    "kvm-zyp-opensuse42-amd64-gal",
                    "kvm-zyp-sles11-x86-gal", "kvm-zyp-sles11-amd64-gal",
                    "kvm-zyp-sles114-x86-gal", "kvm-zyp-sles114-amd64-gal",
                    "kvm-zyp-sles12-amd64-gal", "kvm-zyp-sles11sp1-amd64-gal",

                    # Power8
                    "p8-rhel6-rpm-gal", "p8-rhel7-rpm-gal",
                    "p8-rhel71-rpm-gal",
                    "p8-suse12-rpm-gal",
                   ]


c['schedulers'].append(AnyBranchScheduler(
    name="galera",
    treeStableTimer=60,
    change_filter=BranchFilter(on_github=
      {
        "https://github.com/MariaDB/galera":
        (
          "mariadb-3.x",
          "mariadb-3.x-*",
        )
      }),
    builderNames=myGaleraBuilders))

#
# a scheduler for testing debian packaging: all deb builders, nothing else
#

c['schedulers'].append(Triggerable(
        name="kvm-sched-debpkg-trees",
        builderNames=[
                      "kvm-deb-wheezy-amd64",  "kvm-deb-wheezy-x86",
                      "kvm-deb-trusty-amd64",  "kvm-deb-trusty-x86",
                      "kvm-deb-trusty-ppc64le",
                      "kvm-deb-stretch-amd64", "kvm-deb-stretch-x86",
                      "kvm-deb-stretch-ppc64le",
                      "kvm-deb-sid-amd64",     "kvm-deb-sid-x86",
                      "kvm-deb-jessie-amd64",  "kvm-deb-jessie-x86",
                      "kvm-deb-jessie-ppc64le",
                      "kvm-deb-xenial-amd64",   "kvm-deb-xenial-x86",
                      "kvm-deb-xenial-ppc64le",
                      "kvm-deb-zesty-amd64",   "kvm-deb-zesty-x86",
                      "kvm-deb-artful-amd64",   "kvm-deb-artful-x86",
                      ]))

c['schedulers'].append(Triggerable(
        name="kvm-sched-systemd-trees",
        builderNames=[
                      "kvm-deb-wheezy-amd64",
                      "kvm-deb-stretch-amd64", "kvm-deb-stretch-x86",
                      "kvm-deb-stretch-ppc64le",
                      "kvm-deb-jessie-amd64",  "kvm-deb-jessie-x86",
                      "kvm-deb-jessie-ppc64le",
                      "kvm-deb-xenial-amd64",   "kvm-deb-xenial-x86",
                      "kvm-deb-xenial-ppc64le",
                      "kvm-deb-zesty-amd64",   "kvm-deb-zesty-x86",
                      "kvm-deb-artful-amd64",   "kvm-deb-artful-x86",
                      "kvm-rpm-centos6-x86",
                      "kvm-rpm-centos7-amd64",
                      "kvm-rpm-centos73-amd64",
                      "kvm-rpm-centos73-ppc64",
                      "kvm-rpm-centos73-ppc64le",
                      "kvm-rpm-centos74-amd64",
                      "kvm-rpm-fedora25-amd64", "kvm-rpm-fedora25-x86",
                      "kvm-rpm-fedora26-amd64",
                      "kvm-rpm-fedora27-amd64",
                      "kvm-zyp-opensuse42-amd64"
                      ]))


c['schedulers'].append(Triggerable(
        name="kvm-sched-rpm-test-trees",
        builderNames=[
                      "kvm-rpm-centos6-amd64",
                      "kvm-rpm-centos6-x86",
                      "kvm-rpm-centos7-amd64",
                      "kvm-rpm-centos73-amd64",
                      "kvm-rpm-centos73-ppc64",
                      "kvm-rpm-centos73-ppc64le",
                      "kvm-rpm-centos74-amd64",
                      "kvm-rpm-fedora25-amd64",
                      "kvm-rpm-fedora25-x86",
                      "kvm-rpm-fedora26-amd64",
                      "kvm-rpm-fedora27-amd64",
                      "kvm-zyp-opensuse42-amd64",
                      "kvm-zyp-sles11-amd64",
                      "kvm-zyp-sles11-x86",
                      "kvm-zyp-sles114-amd64",
                      "kvm-zyp-sles114-x86",
                      "kvm-zyp-sles12-amd64"
                      ]))


# setup the force scheduler (added for buildbot 0.8.8)
from buildbot.schedulers.forcesched import ForceScheduler

c['schedulers'].append(ForceScheduler(
                        name="force",
                        builderNames=[
                          "bld-starfs-debug"
                          ,"bld-starfs-release"
                          ,"compile-connectors"
                          ,"gcov"
                          ,"kvm-bintar-centos5-amd64"
                          ,"kvm-bintar-centos5-x86"
                          ,"kvm-bintar-quantal-amd64"
                          ,"kvm-bintar-quantal-x86"
                          ,"kvm-bintar-trusty-amd64"
                          ,"kvm-bintar-trusty-x86"
                          ,"kvm-freebsd11-amd64"
                          ,"kvm-freebsd11-x86"
                          ,"kvm-deb-precise-amd64-gal"
                          ,"kvm-deb-precise-x86-gal"
                          ,"kvm-deb-sid-amd64"
                          ,"kvm-deb-sid-amd64-gal"
                          ,"kvm-deb-sid-x86"
                          ,"kvm-deb-sid-x86-gal"
                          ,"kvm-deb-stretch-amd64"
                          ,"kvm-deb-stretch-amd64-gal"
                          ,"kvm-deb-stretch-x86"
                          ,"kvm-deb-stretch-x86-gal"
                          ,"kvm-deb-stretch-ppc64le"
                          ,"kvm-deb-stretch-ppc64le-gal"
                          ,"kvm-deb-trusty-amd64"
                          ,"kvm-deb-trusty-amd64-gal"
                          ,"kvm-deb-trusty-x86"
                          ,"kvm-deb-trusty-x86-gal"
                          ,"kvm-deb-trusty-ppc64le"
                          ,"kvm-deb-trusty-ppc64le-gal"
                          ,"kvm-deb-xenial-amd64"
                          ,"kvm-deb-xenial-amd64-gal"
                          ,"kvm-deb-xenial-x86"
                          ,"kvm-deb-xenial-x86-gal"
                          ,"kvm-deb-xenial-ppc64le"
                          ,"kvm-deb-xenial-ppc64le-gal"
                          ,"kvm-deb-zesty-amd64"
                          ,"kvm-deb-zesty-amd64-gal"
                          ,"kvm-deb-zesty-x86"
                          ,"kvm-deb-zesty-x86-gal"
                          ,"kvm-deb-artful-amd64"
                          ,"kvm-deb-artful-amd64-gal"
                          ,"kvm-deb-artful-x86"
                          ,"kvm-deb-artful-x86-gal"
                          ,"kvm-deb-wheezy-amd64"
                          ,"kvm-deb-wheezy-amd64-gal"
                          ,"kvm-deb-wheezy-x86"
                          ,"kvm-deb-wheezy-x86-gal"
                          ,"kvm-deb-jessie-amd64"
                          ,"kvm-deb-jessie-amd64-gal"
                          ,"kvm-deb-jessie-x86"
                          ,"kvm-deb-jessie-x86-gal"
                          ,"kvm-deb-jessie-ppc64le"
                          ,"kvm-deb-jessie-ppc64le-gal"
                          ,"kvm-dgcov-jaunty-i386"
                          ,"kvm-fulltest"
                          ,"kvm-fulltest-big"
                          ,"kvm-fulltest2"
                          ,"kvm-fulltest2-big"
                          ,"kvm-rpm-centos6-amd64"
                          ,"kvm-rpm-centos6-amd64-gal"
                          ,"kvm-rpm-centos6-x86"
                          ,"kvm-rpm-centos6-x86-gal"
                          ,"kvm-rpm-centos7-amd64"
                          ,"kvm-rpm-centos7-amd64-gal"
                          ,"kvm-rpm-centos73-amd64"
                          ,"kvm-rpm-centos73-amd64-gal"
                          ,"kvm-rpm-centos73-ppc64"
                          ,"kvm-rpm-centos73-ppc64-gal"
                          ,"kvm-rpm-centos73-ppc64le"
                          ,"kvm-rpm-centos73-ppc64le-gal"
                          ,"kvm-rpm-centos74-amd64"
                          ,"kvm-rpm-centos74-amd64-gal"
                          ,"kvm-rpm-fedora25-amd64"
                          ,"kvm-rpm-fedora25-amd64-gal"
                          ,"kvm-rpm-fedora25-x86"
                          ,"kvm-rpm-fedora25-x86-gal"
                          ,"kvm-rpm-fedora26-amd64"
                          ,"kvm-rpm-fedora26-amd64-gal"
                          ,"kvm-rpm-fedora27-amd64"
                          ,"kvm-rpm-fedora27-amd64-gal"
                          ,"kvm-tarbake-jaunty-x86"
                          ,"kvm-zyp-opensuse42-amd64"
                          ,"kvm-zyp-opensuse42-amd64-gal"
# As of 2017-01-12, we've decided to stop building SLES11 packages
# but let's keep it for the "force" scheduler
                          ,"kvm-zyp-sles11-amd64"
                          ,"kvm-zyp-sles11sp1-amd64"
                          ,"kvm-zyp-sles11-amd64-gal"
                          ,"kvm-zyp-sles11sp1-amd64-gal"
                          ,"kvm-zyp-sles11-x86"
                          ,"kvm-zyp-sles11-x86-gal"
                          ,"kvm-zyp-sles114-x86"
                          ,"kvm-zyp-sles114-x86-gal"
                          ,"kvm-zyp-sles114-amd64"
                          ,"kvm-zyp-sles114-amd64-gal"
                          ,"kvm-zyp-sles12-amd64"
                          ,"kvm-zyp-sles12-amd64-gal"
                          ,"labrador"
                          ,"mac-1012-bintar"
                          ,"mac-1012-pkg"
                          ,"freebsd_x64-connector_c"
                          ,"freebsd11_x64-connector_c"
                          ,"freebsd11_x86-connector_c"
                          ,"linux_x64-connector_c"
                          ,"linux_x86-connector_c"
                          ,"centos6_i386-connector_c"
                          ,"linux_x64-connector-odbc"
                          ,"linux_x86-connector-odbc"
                          ,"centos7_x86-connector-odbc"
                          ,"centos7_x64-connector-odbc"
                          ,"jessie_x86-connector-odbc"
                          ,"jessie_x64-connector-odbc"
                          ,"generic_x86-connector-odbc"
                          ,"generic_x64-connector-odbc"
                          ,"linux_x64-connector-odbc-new"
                          ,"linux_x86-connector-odbc-new"
                          ,"centos7_x86-connector-odbc-new"
                          ,"centos7_x64-connector-odbc-new"
                          ,"jessie_x86-connector-odbc-new"
                          ,"jessie_x64-connector-odbc-new"
                          ,"generic_x86-connector-odbc-new"
                          ,"generic_x64-connector-odbc-new"
                          ,"p8-rhel6-bintar"
                          ,"p8-rhel6-bintar-debug"
                          ,"p8-rhel6-rpm"
                          ,"p8-rhel6-rpm-gal"
                          ,"p8-rhel71-bintar"
                          ,"p8-rhel71-bintar-debug"
                          ,"p8-rhel71-rpm"
                          ,"p8-rhel71-rpm-gal"
                          ,"p8-rhel7-bintar"
                          ,"p8-rhel7-bintar-debug"
                          ,"p8-rhel7-rpm"
                          ,"p8-rhel7-rpm-gal"
                          ,"p8-suse12-rpm"
                          ,"p8-suse12-rpm-gal"
                          ,"sol10-64"
                          ,"test-customer-data"
                          ,"test-handlersocket"
                          ,"win32-debug"
                          ,"winx64-debug"
                          ,"win32-packages"
                          ,"winx64-packages"
                          ,"win-connector_c"
                          ,"win-connector_c_3"
                          ,"win_connector_odbc"
                          ,"win_connector_odbc_new"
                          ,"win-jdbc"
                          ,"work-amd64-valgrind"
                          ,"xenial-amd64-valgrind"
                          ,"qa-win-debug"
                          ,"qa-win-rel"
                          ]))


# Prioritize the builders that trigger other builds.
# This avoids getting into a situation where we have free slave resources
# waiting for a triggering build to finish.
# We don't do much else, as we want to avoid starving some builders;
# it is usually more important to prioritize by branch than by builder.
# Note that this relies on Python sort being a stable sort, so default
# order from Buildbot is kept. This is guaranteed from Python 2.2.

from twisted.python import log

def oldprioritizeBuilders(buildmaster, builders):
    def builder_prio_sort_key(b):
        n= b.name
        if n == "kvm-tarbake-jaunty-x86":
            return 0
        else:
            return 1
    builders.sort(key=builder_prio_sort_key)
    return builders

from twisted.internet import defer
@defer.inlineCallbacks
def prioritizeBuilders(buildmaster, builders):

    # For tarbake priority is 0, which will be the highest.
    # For the rest priority is the oldest request time,
    # the earlier time, the higher priority.
    # Builders which don't have requests will return None
    # which will go last
    def builder_prio_sort_key(b):
        if b.name == "kvm-tarbake-jaunty-x86":
            return 0
        else:
            return b.getOldestRequestTime()

    def xform(bldr):
        d = defer.maybeDeferred(lambda: builder_prio_sort_key(bldr))
	d.addCallback(lambda prio: (prio, bldr))
        return d

    xformed = yield defer.gatherResults(
       [xform(bldr) for bldr in builders])

    # The value is 0 if it is a tarbake, we put it first.
    # None goes last, as it does in the default sorter.
    # Real values are compared
    def tweakedcmp(a, b):
        if a[0] == 0 or b[0] is None:
            return -1
        if b[0] == 0 or a[0] is None:
            return 1
        return cmp(a, b)
    xformed.sort(cmp=tweakedcmp)

    rv = [xf[1] for xf in xformed]
    log.msg("Prioritized builders", rv)
    defer.returnValue(rv)


c['prioritizeBuilders'] = prioritizeBuilders

####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['bots']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

import re
from buildbot.process import factory
from buildbot.steps.source import Bzr
from buildbot.steps.source import Git
from buildbot.steps.shell import ShellCommand, Compile, Test, SetPropertyFromCommand
from buildbot.process.mtrlogobserver import MTR, MtrLogObserver, EqConnectionPool
from buildbot.steps.transfer import FileUpload, FileDownload, DirectoryUpload
from buildbot.process.properties import WithProperties, Property
from buildbot.steps.trigger import Trigger

gccWarningPattern= "^(.*?):([0-9]+):(?:[0-9]+:)? [Ww]arning: (.*)$"
vsWarningPattern= "^(?:\s*>[0-9]+)?\s*([^)]*?)\\(([0-9]+)\\)\s*:\s*warning\s*[-_a-zA-Z0-9]+\s*:\s*(.*)$"

def getCompileStep(cmd, subdir="", **kwargs):
    return Compile(command=cmd,
                   warningPattern=gccWarningPattern,
                   warningExtractor=Compile.warnExtractFromRegexpGroups,
                   suppressionFile=WithProperties(subdir + "support-files/compiler_warnings.supp"),
                   **kwargs
                   )

# The private config file instantiates an instance of EqConnectionPool("MySQLdb", ...)
# with the correct database account password etc.
connection_pool = configDict["cfg"]["connectionPool"]

def getMTR(**kwargs):
    return MTR(
        dbpool=connection_pool,
        warningPattern="MTR's internal check of the test case '.*' failed|Failing test\(s\):.*|\*\*\*Warnings generated in error logs.*|Pre-MTR warning:.*",
        **kwargs)

def on_github(step):
  return re.match('(https://|git@)github.com', step.getProperty('repository'))

def not_on_github(step):
  return not on_github(step)

maybe_git_checkout = Git(repourl=Property('repository'),
                         mode="copy",
                         retry=(10,3),
                         timeout = 6*3600,
                         doStepIf=on_github,
                         )

# Have a nice fat checkout timeout.
# Bzr branching can be _really_ slow, especially on modest 'net connections.
maybe_bzr_checkout = Bzr(repourl=WithProperties('lp:%(repository)s'),
                         mode="clobber",
                         forceSharedRepo=True,
                         timeout = 6*3600,
                         doStepIf=not_on_github,
                         )

valgf = factory.BuildFactory()
valgf.addStep(maybe_bzr_checkout)
valgf.addStep(maybe_git_checkout)
valgf.addStep(ShellCommand(
        description=["cleanup"],
        descriptionDone=["cleanup"],
        command=["sh", "-c", WithProperties("""
rm -rf /dev/shm/var_auto_*
PATH=/mnt/data/buildot/valgrind-3.12/bin:$PATH
valgrind --version
""")]))

# Removed -DWITH_SSL=bundled from the line below to allow 10.2 to build
valgf.addStep(getCompileStep(["sh", "-c", "cmake . -DCMAKE_BUILD_TYPE=Debug -DWITH_VALGRIND=1 &&  make -j5"],
                          env={"EXTRA_FLAGS": "-O3 -fno-omit-frame-pointer -Wno-uninitialized -fno-strict-aliasing",
                               "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}))

# To keep execution time reasonable, only run all default suites for the main trees.
# For development trees, let's run only main now (can add something else later)

valgf.addStep(getMTR(
        doStepIf=isMainTree,
        test_type="nm",
        test_info="Valgrind run, no --ps-protocol, default suites",
        timeout=9600,  # Longer than mtr timeout, which defaults to 9000 for Valgrind.
        env={"MTR_FEEDBACK_PLUGIN": "1"},
#        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl --skip-test=binlog_encryption\. --verbose-restart --mem --parallel=4 --valgrind --valgrind-option=--show-reachable=yes --valgrind-option=--gen-suppressions=all --force --retry=3  --max-test-fail=100 --max-save-core=0 --max-save-datadir=1"],
        command=["sh", "-c", WithProperties("""
export PATH=/mnt/data/buildot/valgrind-3.12/bin:$PATH
cd mysql-test
perl mysql-test-run.pl --verbose-restart --mem --parallel=4 --valgrind --valgrind-option=--show-reachable=yes --valgrind-option=--gen-suppressions=all --force --max-test-fail=100 --max-save-core=0 --max-save-datadir=1
""")],
        parallel=4))

bld_work_valgrind = {'name': "work-amd64-valgrind",
                'slavename': "work-opensuse-amd64",
                'builddir': "work-opensuse-amd64",
                'factory': valgf,
                "nextBuild": myNextBuild,
                "category": "main",
                }

# mac mini 2GB, 10.5

test_mac = getMTR(
    test_type="nm",
    test_info="Normal run, no --ps-protocol",
    env={"MTR_FEEDBACK_PLUGIN": "1"},
    command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3  --max-save-core=0 --max-save-datadir=1"],
    doStepIf=branch_is_5_5_or_later)

# raspberrypi

test_raspberrypi = getMTR(
    test_type="nm",
    test_info="Normal run, no --ps-protocol",
    env={"MTR_FEEDBACK_PLUGIN": "1"},
    command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3  --max-save-core=0 --max-save-datadir=1"])

f_dbg_raspberrypi = factory.BuildFactory()
f_dbg_raspberrypi.addStep(maybe_bzr_checkout)
f_dbg_raspberrypi.addStep(maybe_git_checkout)
f_dbg_raspberrypi.addStep(
     getCompileStep(["sh", "-c", "cmake . -DBUILD_CONFIG=mysql_release -DWITH_SSL=system && make"],
     env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
          "CXX": "g++",
          "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"},
     doStepIf=branch_is_5_5_or_later)
)
f_dbg_raspberrypi.addStep(test_raspberrypi)

bld_raspberrypi = {"name": "raspberrypi",
                 "slavename": "raspberrypi",
                 "builddir": "raspberrypi",
                 "factory": f_dbg_raspberrypi,
                 "nextBuild": myNextBuild,
                 "category": "experimental",
                 }

# The trees for which we save binary packages.
savedPackageBranches= ["5.5", "10.0", "10.1", "10.2", "10.3",
                       "connector_c_2.3", "connector_c_3.0",
                       "connector_c_2.2", "odbc-2.0", "odbc-3.0", "2.1", "master",
                       "10.0-galera", "5.5-galera", "ok-*", "jessie", "jessie-*",
                       "10.1e", "10.0e", "5.5e", "10.0e-galera", "5.5e-galera",
                       "hf-*", "bb-*-release", "bb-10.2-compatibility",
                       "bb-MDEV-10863", "bb-10.0-MDEV-10863",
                       "bb-10.0-MDEV-10644", "bb-10.0-monty", "bb-10.2-mariarocks",
                       "bb-10.1-xtrabackup", "10.3-sequence", "bb-10.3-sequence",
                       "bb-10.2-spider", "bb-10.0-MDEV-11958", "10.0.30-MDEV-11958",
                       "bb-10.1.20-claudio", "bb-10.3-temporal", "bb-10.2-marko",
                       # Nirbhay : Galera branches
                       "mariadb-3.x", "mariadb-3.x-*",]

def in_savedPackageBranches(step):
    return fnmatch_any(step.getProperty("branch"), savedPackageBranches)

def do_step_always(step):
    return True

def in_systemdBuilders(step):
    return branch_is_10_1_or_later(step) and not fnmatch_any(step.getProperty("buildername"), myNonSystemdBuilders)

# Add build steps that will archive binary packages (or source tarball).
# Relies on external cron job to periodically remove old files.
# The packages are saved under the build number of the tarbake step, so it is
# easy to locate all packages for a given release.
#
# The `sources' argument can contain multiple file names separated by spaces
# (it is interpolated directly into a shell `mv' command); and WithProperties
# expansion is performed.
def addPackageArchiveStep(f, sources, tarbuildnum, do_step_if=do_step_always):
    f.addStep(ShellCommand(
        name="archive",
        description=["archiving"],
        descriptionDone=["archive"],
        doStepIf=(lambda(step): in_savedPackageBranches(step) and do_step_if(step)),
        command=["sh", "-c", WithProperties("""
set -ex
rm -Rf "./%(buildername)s"
mkdir -p "%(buildername)s"
""" + 'cp -rp ' + sources + ' "%(buildername)s/"\n' + """
cd "%(buildername)s"
find . -type f \! -name md5sums.txt|xargs md5sum > md5sums.txt
""")]))
    f.addStep(DirectoryUpload(
        doStepIf=(lambda(step): in_savedPackageBranches(step) and do_step_if(step)),
        slavesrc=WithProperties("%(buildername)s"),
        masterdest=WithProperties("/ds413/archive/pack/%(branch)s/build-" +
          tarbuildnum + "/%(buildername)s"),
        blocksize=524288,
        compress="gz"))

# A similar funtion to addPackageArchiveStep, but for use with uploading builds
# from builders that are not building from tarbake tarballs
# Places builds under /ds413/archive/builds/
def addPackageUploadStep(f, sources, do_step_if=do_step_always):
    f.addStep(ShellCommand(
        description=["archiving"],
        descriptionDone=["archive"],
        doStepIf=(lambda(step): in_savedPackageBranches(step) and do_step_if(step)),
        command=["sh", "-c", WithProperties("""
set -ex
rm -Rf "./%(revision)s"
mkdir -vp "%(revision)s"
chmod -v 755 "%(revision)s"
""" + 'cp -rvp ' + sources + ' "%(revision)s/"\n' + """
cd "%(revision)s"
if [ -e "`which md5sum`" ];then find . -type f \! -name md5sums.txt|xargs md5sum > md5sums.txt;fi
find . -type f|xargs chmod 644
""")]))
    f.addStep(DirectoryUpload(
        doStepIf=(lambda(step): in_savedPackageBranches(step) and do_step_if(step)),
        slavesrc=WithProperties("%(revision)s"),
        masterdest=WithProperties("/ds413/archive/builds/%(branch)s/%(revision)s/%(buildername)s"),
        blocksize=524288,
        compress="gz"))

def addPackageUploadStepWin(f, sources, do_step_if=do_step_always):
    f.addStep(DirectoryUpload(
        doStepIf=(lambda(step): in_savedPackageBranches(step) and do_step_if(step)),
        slavesrc=WithProperties("%(revision)s"),
        masterdest=WithProperties("/ds413/archive/builds/%(branch)s/%(revision)s/%(buildername)s"),
        blocksize=524288,
        compress="gz"))

# scp options to work-around ssh warnings as we ssh into many different
# VMs with different host keys.
kvm_scpopt = "-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

f_kvm_tarbake_jaunty_x86= factory.BuildFactory()

f_kvm_tarbake_jaunty_x86.addStep(Compile(
        description=["making", "dist"],
        descriptionDone=["make", "dist"],
        timeout = 3600,
        logfiles={"kernel": "kernel_2223.log"},
        env={"TERM": "vt102"},
        command=["runvm", "--port=2223", "--memory="+memory_def, "--user=buildbot", "-cpu=qemu64", "--smp=4", "--logfile=kernel_2223.log", "/kvm/vms/vm-lucid-amd64-tarbake.qcow2",
        WithProperties("""
set -ex
rm -fv distdirname.txt bakery.txt mariadb-*.tar.gz bakery-*.tar.gz
git init git
case "%(branch)s" in
*5\\.[123]*)
  cd bzr
  rm -Rf build
  bzr co "%(bakebranch:-lp:~maria-captains/ourdelta/ourdelta-montyprogram-fixes)s" build
  cd build
  bakery/preheat.sh
  echo bakery-[0-9]* > bakery.txt
  tar zcf $(cat bakery.txt).tar.gz $(cat bakery.txt)/
  cd $(cat bakery.txt)/
  bzr branch --no-tree "lp:~maria-captains/maria/%(branch)s" local-branch
  bakery/tarbake51.sh %(revision)s local-branch
  cd ..
  mv -v bakery.txt bakery-*.tar.gz ~/
  ;;
*)
  URL="%(repository)s"
  case "$URL" in
  https://github.com/* | git@github.com* )
    cd ~/git
    REMOTE=`git remote -v|grep "$URL.*fetch"|head -n 1|cut -f1`
    if [ -z "$REMOTE" ]; then
      REPO=${URL#*github.com[:/]}
      REMOTE=${REPO/\//-}
      git remote add $REMOTE $URL
    fi
    git fetch --prune $REMOTE
    git checkout --force "%(revision)s"
    echo "Another attempt to solve the problem with the polluted submodule"
    ls -la libmariadb/ || true
    git submodule deinit -f . || true
    ls -la libmariadb/ || true
    echo "... and since git on our tarbake machine is so old, it might not have deinit, so removing contents manually"
    rm -rf libmariadb
    mkdir libmariadb
    git clean -d -f -f -q -x
    git reset --hard
    ls -la libmariadb/ || true
    ;;
  *)
    time bzr co "-r%(revision)s" "lp:$URL" build
    cd build
    ;;
  esac
  mkdir mkdist
  cd mkdist
  cmake ..
  make dist
  touch ~/bakery.txt ~/bakery-dummy.tar.gz
  ;;
esac
basename mariadb-*.tar.gz .tar.gz > ~/distdirname.txt
mv -v "$(cat ~/distdirname.txt).tar.gz" ~/
"""),
        "= scp -v -P 2223 buildbot@localhost:distdirname.txt .",
        "= scp -v -P 2223 buildbot@localhost:bakery.txt .",
        "= scp -v -P 2223 'buildbot@localhost:mariadb-*.tar.gz' .",
        "= scp -v -P 2223 'buildbot@localhost:bakery-*.tar.gz' .",
        ],
        ))
f_kvm_tarbake_jaunty_x86.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["cat", "distdirname.txt"],
        ))
f_kvm_tarbake_jaunty_x86.addStep(SetPropertyFromCommand(
        property="bakery",
        command=["cat", "bakery.txt"],
        ))
addPackageArchiveStep(f_kvm_tarbake_jaunty_x86, '"%(distdirname)s.tar.gz"', "%(buildnumber)s")
f_kvm_tarbake_jaunty_x86.addStep(FileUpload(slavesrc=WithProperties("%(distdirname)s.tar.gz"),
                              masterdest=WithProperties("/var/lib/buildbot/OQ-tarballs/%(buildnumber)s:%(distdirname)s.tar.gz"),
                              blocksize=524288,
                              ))
f_kvm_tarbake_jaunty_x86.addStep(FileUpload(slavesrc=WithProperties("%(bakery)s.tar.gz"),
                              masterdest=WithProperties("/var/lib/buildbot/OQ-bakeries/%(buildnumber)s:%(bakery)s.tar.gz"),
                              blocksize=524288,
                              doStepIf=branch_is_5_123))
myTriggerProperties= {
    "tarballpath": WithProperties("/var/lib/buildbot/OQ-tarballs/%(buildnumber)s:%(distdirname)s.tar.gz"),
    "bakerypath": WithProperties("/var/lib/buildbot/OQ-bakeries/%(buildnumber)s:%(bakery)s.tar.gz"),
    "distname": WithProperties("%(distdirname)s.tar.gz"),
    "tarbuildnum": WithProperties("%(buildnumber)s"),
    }

f_kvm_tarbake_jaunty_x86.addStep(Trigger(
        schedulerNames=["kvm-sched-mainonly"],
        doStepIf=isMainTree,
        waitForFinish=False,
        updateSourceStamp=True,
        set_properties=myTriggerProperties,
        copy_properties=[ "distdirname", "bakery" ]))
f_kvm_tarbake_jaunty_x86.addStep(Trigger(
        schedulerNames=["kvm-sched-enterprise-only"],
        doStepIf=(lambda(step): branch_is_enterprise(step)),
        waitForFinish=False,
        updateSourceStamp=True,
        set_properties=myTriggerProperties,
        copy_properties=[ "distdirname", "bakery" ]))
f_kvm_tarbake_jaunty_x86.addStep(Trigger(
        schedulerNames=["kvm-sched-mainonly-10.2+"],
        doStepIf=isMainTree10_2Plus,
        waitForFinish=False,
        updateSourceStamp=True,
        set_properties=myTriggerProperties,
        copy_properties=[ "distdirname", "bakery" ]))
f_kvm_tarbake_jaunty_x86.addStep(Trigger(
        schedulerNames=["kvm-sched-mainonly-10.1+"],
        doStepIf=isMainTree10_1Plus,
        waitForFinish=False,
        updateSourceStamp=True,
        set_properties=myTriggerProperties,
        copy_properties=[ "distdirname", "bakery" ]))
f_kvm_tarbake_jaunty_x86.addStep(Trigger(
        schedulerNames=["kvm-sched-mainonly-10.0+"],
        doStepIf=isMainTree10_0Plus,
        waitForFinish=False,
        updateSourceStamp=True,
        set_properties=myTriggerProperties,
        copy_properties=[ "distdirname", "bakery" ]))
# Added by Elena on 2017-01-22, see comments in scheduler definition
f_kvm_tarbake_jaunty_x86.addStep(Trigger(
        schedulerNames=["kvm-sched-devtrees-10.0+"],
        doStepIf=(lambda(step): branch_is_10_x(step) and not isMainTree(step)),
        waitForFinish=False,
        updateSourceStamp=True,
        set_properties=myTriggerProperties,
        copy_properties=[ "distdirname", "bakery" ]))
# Added by Elena on 2017-11-18, see comments in scheduler definition
f_kvm_tarbake_jaunty_x86.addStep(Trigger(
        schedulerNames=["kvm-sched-devtrees-10.1+"],
        doStepIf=(lambda(step): branch_is_10_1_or_later(step) and not isMainTree(step)),
        waitForFinish=False,
        updateSourceStamp=True,
        set_properties=myTriggerProperties,
        copy_properties=[ "distdirname", "bakery" ]))
f_kvm_tarbake_jaunty_x86.addStep(Trigger(
        schedulerNames=["kvm-sched-alltrees"],
        doStepIf=(lambda(step): not debpkg_branch(step) and not rpm_test_branch(step)),
        waitForFinish=False,
        updateSourceStamp=True,
        set_properties=myTriggerProperties,
        copy_properties=[ "distdirname", "bakery" ]))
f_kvm_tarbake_jaunty_x86.addStep(Trigger(
        schedulerNames=["kvm-sched-debpkg-trees"],
        doStepIf=debpkg_branch,
        waitForFinish=False,
        updateSourceStamp=True,
        set_properties=myTriggerProperties,
        copy_properties=[ "distdirname", "bakery" ]))

f_kvm_tarbake_jaunty_x86.addStep(Trigger(
        schedulerNames=["kvm-sched-rpm-test-trees"],
        doStepIf=rpm_test_branch,
        waitForFinish=False,
        updateSourceStamp=True,
        set_properties=myTriggerProperties,
        copy_properties=[ "distdirname", "bakery" ]))

# kvm-sched-qa-trees and isTargetQA are defined in qa_schedulers.py
f_kvm_tarbake_jaunty_x86.addStep(Trigger(
        schedulerNames=["kvm-sched-qa-trees"],
        doStepIf=isTargetQA,
        waitForFinish=False,
        updateSourceStamp=True,
        set_properties=myTriggerProperties,
        copy_properties=[ "distdirname", "bakery" ]))

bld_kvm_tarbake_jaunty_x86 = {"name": "kvm-tarbake-jaunty-x86",
                              "slavenames": kvm11_slaves,
                              "builddir": "kvm-tarbake-jaunty-x86",
                              "factory": f_kvm_tarbake_jaunty_x86,
                              "nextBuild": myNextBuild,
                              "category": "main",
                             }

def DownloadSourceTarball():
    return ShellCommand(
             name="rsync_src",
             description=["rsyncing source tarball"],
             descriptionDone=["rsynced source tarball"],
             haltOnFailure=True,
             command=["sh", "-xc", WithProperties("""
  d=/tmp/buildcache
  f="%(tarbuildnum)s:%(distname)s"
  mkdir -p $d
  find $d -type f -mtime +2 | xargs -r rm -v
  flock "$d/$f" rsync -v -c --stats "hasky.askmonty.org::OQ-tarballs/$f" "$d/$f"
""")])

def ScpSourceIntoVM(port):
  return WithProperties("= scp -P " + port + " " + kvm_scpopt +
                        " /tmp/buildcache/%(tarbuildnum)s:%(distname)s buildbot@localhost:buildbot/%(distname)s")

# kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch come from the caller as is
# upgrade_from: text description of the "old" installation.
#               For MariaDB, Galera, Percona, and (Oracle) MySQL it should take the form "MySQL X.Y".
#               For packages provided by the distro it can be anything, as long as it understandable
#               ( it will show in the test description)
# old_packages: space-separated list of packages from the "old" version to be explicitly installed
# new_packages: space-separated list of packages under test to be installed or upgraded


# The builder requires DownloadSourceTarball, so we have to put it here
# rather than with another valgrind bulder
# Attention! xenial valgrind builder uses port=2331
execfile("/etc/buildbot/builders/bld_xenial_valgrind.py");


from buildbot.status.builder import SKIPPED

def getRpmInstallStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
                    test_name, **kwargs):

    return Test(
        name=test_name,
        description=["testing", test_name],
        descriptionDone=["test", test_name],
        logfiles={"kernel": "kernel_"+port+".log"},
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2"] + args + ["vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" "+kvm_scpopt+" rpms buildbot@localhost:buildbot/",
        "sudo rm -rf /tmp/VERSION",
        WithProperties("sh -c \"echo '%(branch)s' | sed -e \\\"s/.*\\\\(5\\\\.[1-356]\\\\|10\\\\.[01]\\\\).*/\\\\1/\\\"\" > /tmp/VERSION"),
        WithProperties("""
set -ex
df -kT
cd buildbot
case "%(branch)s" in
*mdev10416*)
  sudo cat /etc/sysconfig/selinux | grep SELINUX || true
  sudo sh -c \"PATH=$PATH:/usr/sbin getenforce || true\"
  sudo sh -c \"PATH=$PATH:/usr/sbin setenforce Enforcing || true\"
  sudo sh -c \"PATH=$PATH:/usr/sbin getenforce || true\"
  ;;
esac
rpm -qa | { grep -iE 'maria|mysql|galera' || true; }
sudo yum makecache
sudo yum search mysql | { grep "^mysql" || true; }
sudo yum search maria | { grep "^maria" || true; }
sudo yum search percona | { grep percona || true; }
case "%(branch)s" in
*10.[1-9]*)

  case "%(branch)s" in
    *galera4*)
      sudo sh -c "echo '[galera]
name=galera
baseurl=http://yum.mariadb.org/galera4/repo/rpm/""" + dist_arch + """
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1' > /etc/yum.repos.d/galera.repo"
      sudo cat /etc/yum.repos.d/galera.repo

      sudo yum -y --nogpgcheck install rpms/*.rpm
    ;;
    *)
      sudo sh -c "echo '[galera]
name=galera
baseurl=http://yum.mariadb.org/galera/repo/rpm/""" + dist_arch + """
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1' > /etc/yum.repos.d/galera.repo"
      sudo cat /etc/yum.repos.d/galera.repo

      sudo yum -y --nogpgcheck install rpms/*.rpm
    ;;
  esac

  case "%(systemdCapability)s" in
yes)
  # Service is installed
  ls -l /usr/lib/systemd/system/mariadb.service
  # RPMs do not start it automatically on clean install
  sudo systemctl start mariadb

  echo "---- Check permissions - all of the following should fail ----"
  ! systemctl --no-ask-password stop mariadb
  ! systemctl --no-ask-password condrestart mariadb
  ! systemctl --no-ask-password start mariadb
  ! systemctl --no-ask-password enable mariadb
  ! systemctl --no-ask-password set-environment MYSQLD_OPTS="--unknown-option"
  ! systemctl --no-ask-password unset-environment MYSQLD_OPTS
  ! systemctl --no-ask-password restart mariadb

  echo "---- Now use proper permissions ---"
  # mariadb.service and its synonyms
  systemctl status mariadb.service --no-pager
  systemctl status mariadb.service --no-pager | grep Loaded | grep mariadb.service
  systemctl status mariadb --no-pager
  systemctl status mariadb --no-pager | grep Loaded | grep mariadb.service
  systemctl status mysql --no-pager
  systemctl status mysql --no-pager | grep Loaded | grep mariadb.service
  systemctl status mysqld --no-pager
  systemctl status mysqld --no-pager | grep Loaded | grep mariadb.service

  sudo systemctl stop mariadb
  !  ps -ef | grep mysqld | grep -v grep
  sleep 5
  ## condrestart part 1: does nothing when server is not running
  #sudo systemctl condrestart mariadb
  #!  ps -ef | grep mysqld | grep -v grep
  sudo systemctl start mariadb
  ps -ef | grep mysqld | grep -v grep
  # is-enabled, disable, enable
  systemctl is-enabled mariadb
  # MDEV-8956
  #sudo systemctl disable mariadb
  #! systemctl is-enabled mariadb
  #sudo systemctl enable mariadb
  #systemctl is-enabled mariadb
  # set-environment: add an unknown option
  sudo systemctl set-environment MYSQLD_OPTS="--unknown-option"
  # condrestart part 2: attempts to restart when server is running
  ! sudo systemctl condrestart mariadb
  # unset-environment
  sudo systemctl unset-environment MYSQLD_OPTS
  # Restart
  sudo systemctl restart mariadb
  sudo systemctl set-environment MYSQLD_OPTS="--unknown-option"
  ! sudo systemctl restart mariadb
  sudo systemctl unset-environment MYSQLD_OPTS
  # Status shows proper text
  systemctl status mariadb --no-pager | grep 'MariaDB server is down'
  sudo systemctl start mariadb
  systemctl status mariadb --no-pager | grep 'Taking your SQL requests now'
  # See the journal
  sudo systemctl -l status mariadb.service --no-pager
  ! journalctl -lxn 100 | grep mysqld
  sudo journalctl -lxn 100 --no-pager | grep mysqld
  # Init.d script
  ls -l /etc/init.d/mysql
  ls -l /etc/systemd/system/mariadb.service.d/migrated-from-my.cnf-settings.conf
  # It does not do the same as systemctl now
  # /etc/init.d/mysql status
    ;;
no)
    echo "Steps related to systemd will be skipped"
    sudo /etc/init.d/mysql restart
    ;;
*)
    echo "It should never happen, check your configuration (systemdCapability property is not set or is set to a wrong value)"
    ;;
  esac

case "%(branch)s" in
*10.[12]e*)
  sudo mysql -uroot -e 'drop database if exists test; create database test; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t;'
  ;;
*)
  mysql --version
  mysql -uroot -e 'drop database if exists test; create database test; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t;'
  ;;
esac

  sudo yum -y install galera
  galera_path=`echo /usr/lib*/galera/libgalera_smm.so`

case "%(branch)s" in
*10.[12]e*)
  sudo mysql -uroot -e 'set global wsrep_provider="'$galera_path'"; set global wsrep_cluster_address="gcomm://";show status like "wsrep%%"'
  ;;
*)
  mysql -uroot -e 'set global wsrep_provider="'$galera_path'"; set global wsrep_cluster_address="gcomm://";show status like "wsrep%%"'
  ;;
esac

  ;;
*galera*)
  sudo sh -c "echo '[galera]
name=galera
baseurl=http://yum.mariadb.org/galera/repo/rpm/""" + dist_arch + """
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1' > /etc/yum.repos.d/galera.repo"
  sudo cat /etc/yum.repos.d/galera.repo

  sudo sh -c "echo '[mariadb]
name=MariaDB
baseurl=http://yum.mariadb.org/$(cat /tmp/VERSION)/""" + dist_arch + """
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1' > /etc/yum.repos.d/MariaDB.repo"
  sudo cat /etc/yum.repos.d/MariaDB.repo

  sudo yum -y --nogpgcheck install rpms/*.rpm
  sudo /etc/init.d/mysql restart
  galera_path=`echo /usr/lib*/galera/libgalera_smm.so`
  mysql -uroot -e 'use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t;set global wsrep_provider="'$galera_path'"; set global wsrep_cluster_address="gcomm://";show status like "wsrep%%"'
  ;;
*)
  sudo yum -y --nogpgcheck install rpms/*.rpm
  sudo /etc/init.d/mysql restart
  mysql -e "use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t"
  ;;
esac
#case "%(systemdCapability)s" in
#yes)
#  echo "Server shutdown is not necessary with systemd"
#  ;;
#no)
#  echo "Stopping the server because otherwise the VM might hang"
#  sudo /etc/init.d/mysql stop
#  ;;
#esac
echo "All done"
""")],
        **kwargs)

def getRpmUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
                    action, upgrade_from, old_packages, new_packages,
                    extra_opts="", force_upgrade=0, manual_restart=0, **kwargs):

    test_name = action

    if action == "install":
        test_name = test_name + " over " + upgrade_from
    else:
        test_name = test_name + " from " + upgrade_from

    if extra_opts != "":
        test_name = test_name + " with " + extra_opts

    # On sles11sp1 createrepo is not available, cannot run the test
    # on sles12, some problem with disk while installing createrepo, cannot run the test
    if distro == "sles11sp1" or distro == "sles114" or distro == "sles12":
        return Test(
            description=["testing", test_name],
            descriptionDone=["test", test_name],
            logfiles={"kernel": "kernel_"+port+".log"},
            env={"TERM": "vt102"},
            command=["echo", "\"Test won't be run\""],
            doStepIf=False,
            hideStepIf=True
        )

    pm_extra_options_old = " -y"
    pm_extra_options_new = extra_opts
    pm = "yum"
    pm_clean = "clean all"
    pm_nogpg = "--nogpgcheck"
    pm_repo_location = "yum.repos.d"
    # repo is the contents of the repo file we'll create to install the "old" version
    # (unless it's installed from a default distribution repo)
    repo = ""
    # old_mysql_ver_num is an numeric representation of the version, e.g. 57 etc.,
    # to make sure the comparison to higher versions works OK.
    # It will be used in the shell part for MySQL and Percona password tricks
    old_mysql_ver_num = "0"
    # If we use some workarounds during the test, we'll print warnings about it
    print_warnings = ""

    if action == "install" or action == "upgrade" or action == "update":
        pm_extra_options_new = pm_extra_options_new + " -y"

    if dist_name == "fedora":
        mysql_repo_subdir = "fc"
        if int(dist_num) >= 22:
            pm = "dnf"
    elif dist_name == "rhel" or dist_name == "centos":
        mysql_repo_subdir = "el"
    elif dist_name == "sles" or dist_name == "opensuse":
        mysql_repo_subdir = "sles"
        pm = "zypper --non-interactive"
        pm_clean = "clean --all"
        pm_nogpg = "--no-gpg-checks"
        pm_repo_location = "zypp/repos.d"
        # Workaround for MDEV-9796 (MariaDB not being installable on SUSE)
        # When it's fixed, this setting should happen under condition
        # if new_packages == "":
        if new_packages == "" or action == "install":
            pm_extra_options_new = pm_extra_options_new + " --from local"
            print_warnings = print_warnings + "\necho \"warning: --from <repo> workaround for MDEV-9796 was used while installing new packages\n\""
    else:
        # Nothing good will come out of it
        mysql_repo_subdir = ""

    m = re.search("(MySQL|Percona|MariaDB) ([0-9]+)\.([0-9]+)",upgrade_from)
    if m:
        old_name = m.group(1)
        old_ver_major = m.group(2)
        old_ver_minor = m.group(3)
        old_ver = old_ver_major + "." + old_ver_minor

        if old_name == "MariaDB" or old_name == "Galera":
            repo = "[mariadb]\n" \
                "name=MariaDB\n" \
                "baseurl=http://yum.mariadb.org/" + old_ver + "/" + dist_arch + "\n"\
                "gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB\n" \
                "enabled=1\n" \
                "gpgcheck=0"
            if dist_name == "sles" or dist_name == "opensuse":
                # Workaround for MDEV-9796 (MariaDB not being installable on SUSE)
                pm_extra_options_old = pm_extra_options_old + " --from mariadb"
                print_warnings = print_warnings + "\necho \"warning: --from <repo> workaround for MDEV-9796 was used while installing old packages\n\""

        elif old_name == "MySQL":
            repo = "[mysql-community]\n" \
                "name=MySQL Community Server\n" \
                "baseurl=http://repo.mysql.com/yum/mysql-" + old_ver + "-community/" + mysql_repo_subdir + "/" + dist_num + "/\$basearch/\n" \
                "enabled=1\n" \
                "gpgcheck=0"
            old_mysql_ver_num = old_ver_major + old_ver_minor
            if dist_name == "sles" and int(dist_num) == 11:
                # Workaround: some problem with wildcards on SLES11, maybe this will help
                # it's not a workaround for MariaDB bugs, so we don't print warnings here
                pm_extra_options_old = pm_extra_options_old + " --from mysql-community"

        elif old_name == "Percona":
            repo = "[percona-release]\n" \
                "name=Percona repository\n" \
                "baseurl=http://repo.percona.com/release/" + dist_num + "/RPMS/\$basearch/\n" \
                "enabled=1\n" \
                "gpgcheck=0"
            old_mysql_ver_num = old_ver_major + old_ver_minor

        else:
            repo = ""

    if extra_opts:
        print_warnings = print_warnings + "\necho \"warning: extra options were used: " + extra_opts + "\n\""

    if force_upgrade:
        force_upgrade = " env FORCE_UPGRADE=" + str(force_upgrade) + " "
        print_warnings = print_warnings + "\necho \"warning: FORCE_UPGRADE was used\n\""
    else:
        force_upgrade = ""

    # Workaround for MDEV-9797 (server does not get restarted after upgrade from Galera) and other similar issues,
    # whenever the caller asks for explicit restart
    restart_command = "\necho \"No server restart was requested, it is supposed to be restarted automatically\"\n"
    if manual_restart:
        print_warnings = print_warnings + "\necho \"warning: manual restart was requested, it is a workaround for some bug\"\n"
        restart_command =  "\nsudo /etc/init.d/mysql restart\n"

    return Test(
        description=["testing", test_name],
        descriptionDone=["test", test_name],
        logfiles={"kernel": "kernel_"+port+".log"},
        hideStepIf=(lambda results, s: results==SKIPPED),
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2"] + args + ["vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" "+kvm_scpopt+" rpms buildbot@localhost:buildbot/",
        WithProperties("""
set -ex
cd buildbot

echo "See if any MySQL, MariaDB, Galera or Percona has already been installed"
rpm -qa | { grep -iE 'maria|mysql|galera|percona' || true; }

echo "Remove all unwanted repos in case there are any on the VM image"
ls /etc/yum.repos.d/* | grep -iE '(maria|galera|mysql|percona)' | xargs -r sudo rm -f

echo "Create repo from which the old version will be installed (or empty repo for upgrades from distro)"
sudo sh -c "echo '""" + repo + """' > /etc/""" + pm_repo_location + """/from.repo"
sudo cat /etc/""" + pm_repo_location + """/from.repo
sudo """ + pm + """ """ + pm_clean + """

echo "Install the old version"
sudo """ + pm + """ install """ + pm_extra_options_old + """ """ + old_packages + """
sudo rm -f /etc/""" + pm_repo_location + """/from.repo

echo "Check that we got some packages after installation of the old version"
rpm -qa | grep -iE 'maria|mysql|galera|percona'

echo "See which init scripts or systemd services were installed with the old version"
ls -l /etc/systemd/system/* /run/systemd/system/* /usr/lib/systemd/system/* /etc/init.d/* | grep -iE 'maria|mysql|galera|percona' || true

echo "Try to use systemd; if no service available, try to use init script"
start_cmd=`ls /usr/lib/systemd/system/ | grep "service$" | grep -iE 'maria|mysql|galera|percona'` || true
if [ -n "$start_cmd" ]; then
    # In case there were more than one
    start_cmd=`echo $start_cmd | awk '{ print $1 }'`
    start_cmd="systemctl start $start_cmd"
else
    start_cmd=`ls /etc/init.d/ | grep -iE 'maria|mysql|galera|percona'` || true
    if [ -n "$start_cmd" ]; then
        start_cmd=`echo $start_cmd | awk '{print $1}'`
        start_cmd="/etc/init.d/$start_cmd start"
    else
        echo "ERROR: could not find a start script for the previous version, exiting"
        exit 1
    fi
fi

sudo $start_cmd

echo "For MySQL|Percona 5.7 and higher, we need to do some extra steps to deal with passwords"

if [ """ + old_mysql_ver_num + """ -ge 57 ]; then
    pass=`sudo grep 'temporary password' /var/log/mysqld.log | sed -e "s/.* \\([^ ]*\\)$/\\1/"`
    if [ -n "$pass" ]; then
        pass_options_old="--connect-expired-password -p$pass"
    fi
    mysql -uroot $pass_options_old -e "alter user root@localhost identified by 'My-test1'"
    pass_options_old="--connect-expired-password -pMy-test1"
    pass_options_new="-pMy-test1"
fi

mysql -uroot $pass_options_old -e "select @@version, @@version_comment"

echo "Install createrepo to make a proper local repository out of our RPMs"
# Hack: patterns-openSUSE-minimal_base-conflicts does not allow createrepo to be installed on openSUSE 13
packages_to_remove=`rpm -qa | grep "patterns-openSUSE-minimal_base-conflicts" | xargs`
if [ -n "$packages_to_remove" ]
then
    sudo """ + pm + """ remove -y $packages_to_remove
fi
sudo """ + pm + """ install -y createrepo
sudo rm -f /etc/""" + pm_repo_location + """/createrepo.repo

echo "Create the local repository"
sudo createrepo .

echo "Add local repo"

sudo sh -c "echo '[local]
name=MariaDB New Release
baseurl=file:///home/buildbot/buildbot
enabled=1
gpgcheck=0' > /etc/""" + pm_repo_location + """/local.repo"
sudo cat /etc/""" + pm_repo_location + """/local.repo

# Find out which version we are installing by parsing an RPM name. It should be more reliable
# than using a branch name from the branch property

full_ver=`ls rpms/MariaDB-*-common.rpm | sed -e "s/rpms\/MariaDB-\\([0-9]*\.[0-9]*\.[0-9]*\\)-.*/\\1/"`
major_ver=`echo $full_ver | sed -e "s/\.[0-9]*$//"`
major_ver_num=`echo $major_ver | sed -e "s/\.//"`
echo "New version is: Full version = $full_ver, major version = $major_ver, numeric representation = $major_ver_num"

if [ $major_ver_num -ge 101 ]; then
    echo "For 10.1 and higher we need the galera library, add the galera repo"
    case "%(branch)s" in
      *galera4*)
        sudo sh -c "echo '[galera]
name=galera
baseurl=http://yum.mariadb.org/galera4/repo/rpm/""" + dist_arch + """
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1' > /etc/""" + pm_repo_location + """/galera.repo"
        sudo cat /etc/""" + pm_repo_location + """/galera.repo
        ;;
      *)
    sudo sh -c "echo '[galera]
name=galera
baseurl=http://yum.mariadb.org/galera/repo/rpm/""" + dist_arch + """
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1' > /etc/""" + pm_repo_location + """/galera.repo"
    sudo cat /etc/""" + pm_repo_location + """/galera.repo
        ;;
    esac
fi

echo "Install the new version $full_ver"
sudo """ + force_upgrade + pm + """ """ + pm_nogpg + """ """ + action + """ """ + pm_extra_options_new + """ """ + new_packages + """

# We don't want next commands to fail because we want to see the full picture.
# We'll make it fail later if it does not on its own.

echo "See which packages we have after upgrade"
rpm -qa | grep -iE 'maria|mysql|galera|percona' || true

echo "See which init scripts or systemd services were installed with the new version"
ls -l /etc/systemd/system/* /run/systemd/system/* /usr/lib/systemd/system/* /etc/init.d/* | grep -iE 'maria|mysql|galera|percona' || true

echo "See whether mysqld is running"
ps -ef | grep mysqld | grep -v grep || true

echo "See which version of mysqld is running"
mysql -uroot $pass_options_new -e "select @@version, @@version_comment" || true

# There are some workarounds which have to restart the server in order to proceed
""" + restart_command + """

# Now if we reached this point, actual checks

echo "Check that at least some of packages are new"
rpm -qa | grep MariaDB | grep $full_ver

echo "Check that mysqld is running now"
ps -ef | grep mysqld | grep -v grep

echo "Check that it can be connected to and see the version"
mysql -uroot $pass_options_new -e "select @@version, @@version_comment"

echo "Check that the current version is running now"
echo "(which means that not only has the server been upgraded, but it has also been restarted)"
mysql -uroot $pass_options_new --skip-column-names -e "select @@version" | grep $full_ver

echo "RPMs do not run mysql_upgrade automatically, so run it manually"
sudo mysql_upgrade -uroot $pass_options_new | tee /tmp/upgrade.output
# If it didn't go well, it should have failed above, but just in case, check for OK:
grep "^OK" /tmp/upgrade.output

# Print warnings that we collected during test preparation
""" + print_warnings + """

""")],
        **kwargs)


#-------------------------------
# Minor upgrade for RPM packages
#-------------------------------

def getRpmMinorUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, arch,
    test_mode, **kwargs):

    return Test(
        name="minor-upgrade-"+test_mode,
        warningPattern="Upgrade warning:.*",
        description=["testing", "minor", "upgrade"],
        descriptionDone=["minor", "upgrade", "for", test_mode],
        logfiles={"kernel": "kernel_"+port+".log"},
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2"] + args + ["vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" "+kvm_scpopt+" rpms buildbot@localhost:buildbot/",
        WithProperties("""
set -xv

test_mode="""+test_mode+"""

case %(branch)s in
*galera*)
  if [[ "$test_mode" == "all" ]] ; then
    echo "Upgrade warning: the test in 'all' mode is not executed for galera branches"
    exit
  fi
  ;;
*10.3*)
  if [[ "$test_mode" != "server" ]] ; then
    echo "Upgrade warning: the test in 'all' or 'deps' mode is not executed for non-stable branches"
    exit
  fi
  ;;
esac

arch=""" + arch + """
distro=""" + distro + """
repo_dist_arch=$distro-$arch

echo "Architecture and distribution based on VM name: $repo_dist_arch"

echo "Test properties"
echo "  Systemd capability %(systemdCapability)s"
echo "  Major version %(majorVersion)s"

cd buildbot

#===============
# This test can be performed in three modes:
# - 'server' -- only mariadb-server is installed (with whatever dependencies it pulls) and upgraded.
# - 'all'    -- all provided packages are installed and upgraded
# - 'deps'   -- only a limited set of main packages is installed and upgraded,
#               to make sure upgrade does not require new dependencies
#===============

echo "Current test mode: $test_mode"

#============
# Environment 
#============

rpm -qa | grep -iE 'maria|mysql|galera'
cat /etc/*release
uname -a
df -kT

#========================================
# Check whether a previous version exists
#========================================

if ! wget http://yum.mariadb.org/%(majorVersion)s/$repo_dist_arch/repodata -O repodata.list
then
  echo "Upgrade warning: could not find the 'repodata' folder for a previous version in MariaDB repo, skipping the test"
  exit
fi

#===============================================
# Define the list of packages to install/upgrade
#===============================================

case "%(branch)s" in
*galera*)
  server_package="MariaDB-Galera-server"
  test_package="mariadb-Galera-test"
  ;;
*)
  server_package="MariaDB-server"
  test_package="MariaDB-test"
  ;;
esac

case $test_mode in
all|deps)
  primary_xml=`grep 'primary.xml.gz' repodata.list | sed -e 's/.*href="\(.*-primary.xml\)\.gz\".*/\\1/'`
  wget http://yum.mariadb.org/%(majorVersion)s/$repo_dist_arch/repodata/$primary_xml.gz
  if [[ $? != 0 ]] ; then
    echo "ERROR: Couldn't download primary.xml.gz from the repository"
    exit 1
  fi
  gunzip $primary_xml.gz
  package_list=`grep -A 1 '<package type="rpm"' $primary_xml | grep MariaDB | grep -vi galera | sed -e 's/<name>//' | sed -e 's/<\/name>//' | xargs`
  
  if [[ "$test_mode" == "deps" ]] ; then
    package_list=`echo $package_list | xargs -n1 | grep -iE "$server_package|$test_package|MariaDB-client|MariaDB-common|MariaDB-compat" | xargs`
  fi
  
  if [[ $arch == ppc* ]] ; then
    package_list=`echo $package_list | xargs -n1 | sed -e 's/MariaDB-compat//gi' | xargs`
  fi
  ;;
server)  
  package_list="$server_package MariaDB-client"
  ;;
*)
  echo "ERROR: unknown test mode: $test_mode"
  exit 1
esac

echo "Package_list: $package_list"

#======================================================================
# Prepare yum/zypper configuration for installation of the last release
#======================================================================

if which zypper ; then
  package_manager=zypper
  repo_location=/etc/zypp/repos.d
  install_command="zypper --no-refresh --no-gpg-checks install --from mariadb -y"
  cleanup_command="zypper clean --all"

  # Since there is no reasonable "upgrade" command in zypper which would
  # pick up RPM files needed to upgrade existing packages, we have to use "install".
  # However, if we run "install *.rpm", it will install all packages, regardless
  # the test mode, and we will get a lot of differences in contents after upgrade
  # (more plugins, etc.). So, instead for each package that we are going to install,
  # we'll also find an RPM file which provides it, and will use its name in
  # in the "upgrade" (second install) command

  
  if [[ "$test_mode" == "all" ]] ; then
    rpms_for_upgrade="rpms/*.rpm"
    # Due to MDEV-14671, we have to restart the server after upgrade
    extra_restart_after_upgrade="yes"
  else 
    rpms_for_upgrade=""
    for p in $package_list ; do
      for f in rpms/*.rpm ; do
        if rpm -qp $f --provides | grep -i "^$p =" ; then
          rpms_for_upgrade="$rpms_for_upgrade $f"
          break
        fi
      done
    done
  fi

  upgrade_command="zypper --no-refresh --no-gpg-checks install -y $rpms_for_upgrade"

elif which yum ; then
  package_manager=yum
  repo_location=/etc/yum.repos.d
  install_command="yum -y --nogpgcheck install"
  cleanup_command="yum clean all"
  upgrade_command="yum -y --nogpgcheck upgrade rpms/*.rpm"
else
  echo "ERROR: could not find package manager"
  exit 1
fi

ls $repo_location/* | grep -iE '(maria|galera)' | xargs -r sudo rm -f

sudo sh -c "echo '[mariadb]
name=MariaDB
baseurl=http://yum.mariadb.org/%(majorVersion)s/$repo_dist_arch
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1' > $repo_location/MariaDB.repo"

sudo sh -c "$cleanup_command"

#=========================
# Install previous release
#=========================

sudo sh -c "$install_command $package_list"
if [[ $? -ne 0 ]] ; then
  echo "ERROR: Installation of a previous release failed, see the output above"
  exit 1
fi

#==========================================================================
# Start the server, check that it is functioning and create some structures
#==========================================================================

sudo /etc/init.d/mysql start
if [[ $? -ne 0 ]] ; then
  echo "ERROR: Server startup failed"
  sudo cat /var/log/messages | grep -iE 'mysqld|mariadb'
  sudo cat /var/lib/mysql/*.err
  exit 1
fi

# All the commands below should succeed

set -e

mysql -uroot -e "CREATE DATABASE db"
mysql -uroot -e "CREATE TABLE db.t_innodb(a1 SERIAL, c1 CHAR(8)) ENGINE=InnoDB; INSERT INTO db.t_innodb VALUES (1,'foo'),(2,'bar')"
mysql -uroot -e "CREATE TABLE db.t_myisam(a2 SERIAL, c2 CHAR(8)) ENGINE=MyISAM; INSERT INTO db.t_myisam VALUES (1,'foo'),(2,'bar')"
mysql -uroot -e "CREATE TABLE db.t_aria(a3 SERIAL, c3 CHAR(8)) ENGINE=Aria; INSERT INTO db.t_aria VALUES (1,'foo'),(2,'bar')"
mysql -uroot -e "CREATE TABLE db.t_memory(a4 SERIAL, c4 CHAR(8)) ENGINE=MEMORY; INSERT INTO db.t_memory VALUES (1,'foo'),(2,'bar')"
mysql -uroot -e "CREATE ALGORITHM=MERGE VIEW db.v_merge AS SELECT * FROM db.t_innodb, db.t_myisam, db.t_aria"
mysql -uroot -e "CREATE ALGORITHM=TEMPTABLE VIEW db.v_temptable AS SELECT * FROM db.t_innodb, db.t_myisam, db.t_aria"
mysql -uroot -e "CREATE PROCEDURE db.p() SELECT * FROM db.v_merge"
mysql -uroot -e "CREATE FUNCTION db.f() RETURNS INT DETERMINISTIC RETURN 1"

set +e

#====================================================================================
# Store information about server version and available plugins/engines before upgrade
#====================================================================================

mysql -uroot --skip-column-names -e "select @@version" | awk -F'-' '{ print $1 }' > /tmp/version.old
mysql -uroot --skip-column-names -e "select engine, support, transactions, savepoints from information_schema.engines" | sort > /tmp/engines.old

case "%(majorVersion)s" in
5.5)
  mysql -uroot --skip-column-names -e "show plugins" | sort > /tmp/plugins.old
  ;;
10.[0-9])
  mysql -uroot --skip-column-names -e "select plugin_name, plugin_status, plugin_type, plugin_library, plugin_license from information_schema.all_plugins order by plugin_name, plugin_library" > /tmp/plugins.old
  ;;
*)
  echo "ERROR: unknown major version: %(majorVersion)s"
  exit 1
  ;;
esac


#======================================================================
# Prepare yum/zypper configuration for installation of the new packages
#======================================================================

if [[ "$test_mode" == "deps" ]] ; then
  sudo mv $repo_location/MariaDB.repo /tmp
  sudo rm -rf $repo_location/*
  sudo mv /tmp/MariaDB.repo $repo_location/
  sudo sh -c "$cleanup_command"
fi

#=========================
# Install the new packages
#=========================

sudo sh -c "$upgrade_command"

#===================================================
# Check that no old packages have left after upgrade
#===================================================

# The check is only performed for all-package-upgrade, because
# for selective ones some implicitly installed packages might not be upgraded

if [[ "$test_mode" == "all" ]] ; then
  rpm -qa | grep -iE 'mysql|maria' | grep `cat /tmp/version.old`
  if [[ $? -eq 0 ]] ; then
    echo "ERROR: Old packages have been found after upgrade"
    exit 1
  fi
fi

#==============================
# Optionally restart the server
#==============================

if [ -n "$extra_restart_after_upgrade" ] ; then
  echo "Due to MDEV-14671, we have to restart the server after upgrade"
  sudo /etc/init.d/mysql restart
fi

#=====================================================================================
# Run mysql_upgrade for non-GA branches (minor upgrades in GA branches shouldn't need it)
#=====================================================================================

case "%(majorVersion)s" in
10.3)
  mysql_upgrade -uroot
  ;;
*)
  ;;
esac

#=====================================================================================
# Check that the server is functioning and previously created structures are available
#=====================================================================================

# All the commands below should succeed

set -e

mysql -uroot -e "select @@version, @@version_comment"

mysql -uroot -e "SHOW TABLES IN db"
mysql -uroot -e "SELECT * FROM db.t_innodb; INSERT INTO db.t_innodb VALUES (3,'foo'),(4,'bar')"
mysql -uroot -e "SELECT * FROM db.t_myisam; INSERT INTO db.t_myisam VALUES (3,'foo'),(4,'bar')"
mysql -uroot -e "SELECT * FROM db.t_aria; INSERT INTO db.t_aria VALUES (3,'foo'),(4,'bar')"
mysql -uroot -e "SELECT * FROM db.t_memory; INSERT INTO db.t_memory VALUES (1,'foo'),(2,'bar')"
mysql -uroot -e "SELECT COUNT(*) FROM db.v_merge"
mysql -uroot -e "SELECT COUNT(*) FROM db.v_temptable"
mysql -uroot -e "CALL db.p()"
mysql -uroot -e "SELECT db.f()"

set +e

#===================================================================================
# Store information about server version and available plugins/engines after upgrade
#===================================================================================

set -e

mysql -uroot --skip-column-names -e "select @@version" | awk -F'-' '{ print $1 }' > /tmp/version.new
mysql -uroot --skip-column-names -e "select engine, support, transactions, savepoints from information_schema.engines" | sort > /tmp/engines.new

case "%(majorVersion)s" in
5.5)
  mysql -uroot --skip-column-names -e "show plugins" | sort > /tmp/plugins.new
  ;;
10.[0-9])
  mysql -uroot --skip-column-names -e "select plugin_name, plugin_status, plugin_type, plugin_library, plugin_license from information_schema.all_plugins order by plugin_name, plugin_library" > /tmp/plugins.new
  ;;
esac

case "%(systemdCapability)s" in
yes)
  ls -l /usr/lib/systemd/system/mariadb.service
  ls -l /etc/systemd/system/mariadb.service.d/migrated-from-my.cnf-settings.conf
  ls -l /etc/init.d/mysql
  systemctl status mariadb.service --no-pager
  systemctl status mariadb --no-pager
  systemctl status mysql --no-pager
  systemctl status mysqld --no-pager
  systemctl is-enabled mariadb
  ;;
no)
  echo "Steps related to systemd will be skipped"
  ;;
*)
  echo "ERROR: It should never happen, check your configuration (systemdCapability property is not set or is set to a wrong value)"
  exit 1
  ;;
esac

set +e

case "%(branch)s" in
*10.[3]*)
  echo "Until 10.3 is GA, the list of plugins/engines might be unstable, skipping the check"
  ;;
*)
  diff -u /tmp/engines.old /tmp/engines.new
  if [[ $? -ne 0 ]] ; then
    echo "ERROR: the lists of engines in the old and new installations differ"
    exit 1
  fi
  diff -u /tmp/plugins.old /tmp/plugins.new
  if [[ $? -ne 0 ]] ; then
    echo "ERROR: the lists of available plugins in the old and new installations differ"
    exit 1
  fi
  ;;
esac

diff -u /tmp/version.old /tmp/version.new
if [[ $? -eq 0 ]] ; then
  echo "ERROR: server version has not changed after upgrade"
  echo "It can be a false positive if we forgot to bump version after release,"
  echo "or if it is a development tree is based on an old version"
  exit 1
fi

""")],
        **kwargs)


def getRpmTestStep(args, kvm_scpopt, port, **kwargs):

    return getMTR(
            description=["running", "default", "MTR", "suites"],
            descriptionDone=["default", "MTR", "suites"],
            test_type="nm",
            test_info="Normal run, no --ps-protocol",
            logfiles={"kernel": "kernel_"+port+".log", "syslog": "daemon.log"},
            mtr_subdir=".",    # Where we scp vardir to
            command=["runvm"] + args + ["--logfile=kernel_"+port+".log", "vm-tmp-"+port+".qcow2",
        WithProperties("""
set -ex
cd /usr/share/mysql-test

if ! rpm -qa | grep -i mariadb-server
then
  echo "Pre-MTR warning: MariaDB server was not installed, skipping the tests"
  exit
fi

# Check whether FEEDBACK plugin is currently usable
if wget --no-check-certificate --timeout=20 --tries=1 https://mariadb.org/feedback_plugin -O /tmp/feedback_page
then
  feedback_plugin=1
  echo "Feedback page okay, enabling the plugin"
else
  feedback_plugin=0
  echo "Pre-MTR warning"": Feedback page is not okay, disabling the plugin"
fi
rm -f /tmp/feedback_page

if sudo yum install -y perl-Env
then
  echo "Installed Env.pm"
fi

tcmalloc=
if [[ "$TCMALLOC" == "YES" ]] ; then
  if sudo yum install -y gperftools-libs
  then
    tcmalloc=`rpm -ql gperftools-libs | grep libtcmalloc.so | head -1`
  fi
fi

LD_PRELOAD=$tcmalloc MTR_FEEDBACK_PLUGIN=$feedback_plugin perl mysql-test-run.pl  --verbose-restart --vardir="$(readlink -f /dev/shm/var)" --parallel=4 --force --retry=3 --max-save-core=0 --max-save-datadir=1
"""),
        WithProperties(
              "!= rm -Rf var/ ; scp -rp -P " + port + " " + kvm_scpopt +
              " buildbot@localhost:/dev/shm/var/ . || :")],
        **kwargs)


def getRpmBuilder(name, kvm_image, port, cpu, arch, slaves=kvm_slaves, ramdisk=True, catg="main"):
    distro = name.split('-')[2]
    arch= name.split('-')[3]
    m = re.search("^([A-Za-z]+)([0-9]*)",distro)
    if m:
        dist_name = m.group(1)
        dist_num = m.group(2)

    if distro in ['fedora25', 'fedora26', 'fedora27']:
        jemalloc_option=' -DWITH_JEMALLOC=system'
    else:
        jemalloc_option=''
    args = ["--port="+port, "--memory="+memory_def, "--user=buildbot", "--smp=4", "--cpu="+cpu, "--startup-timeout=600", "--logfile=kernel_"+port+".log"]
    if ramdisk:
        args = args + ["--work-image=/dev/shm/vm-tmp-"+port+".qcow2"]
    rpm_fact = factory.BuildFactory()
    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    rpm_fact.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))
    rpm_fact.addStep(ShellCommand(
        description=["rsyncing", "VMs"],
        descriptionDone=["rsync", "VMs"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-build.qcow2",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-install.qcow2",
                 "/kvm/vms/"]))
    rpm_fact.addStep(DownloadSourceTarball())
    rpm_fact.addStep(FileDownload(
        mastersrc=WithProperties("%(bakerypath)s"),
        slavedest=WithProperties("%(bakery)s.tar.gz"),
        blocksize=524288,
        doStepIf=branch_is_5_123))
    rpm_fact.addStep(FileDownload(
        mastersrc=WithProperties("/ds413/rpm/mariadb-shared-5.3-"+arch+".rpm"),
        slavedest=WithProperties("MariaDB-shared-5.3."+name+".rpm"),
        blocksize=524288,
        doStepIf=branch_is_5_5_or_later))
    rpm_fact.addStep(FileDownload(
        mastersrc=WithProperties("/ds413/rpm/mariadb-shared-10.1-"+name+".rpm"),
        slavedest=WithProperties("MariaDB-shared-10.1."+name+".rpm"),
        blocksize=524288,
        doStepIf=branch_is_10_2_or_later))
    rpm_fact.addStep(ShellCommand(
        description=["getting", ".supp"],
        descriptionDone=["get", ".supp"],
        command=["sh", "-c", WithProperties("""
rm -f compiler_warnings.supp
#tar zxf "%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
tar zxf "/tmp/buildcache/%(tarbuildnum)s:%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
exit 0  # best-effort, not fatal if no suppression file
""")]))

    rpm_fact.addStep(Compile(
        description=["making", "rpms"],
        descriptionDone=["make", "rpms"],
        timeout=7200,
        logfiles={"kernel": "kernel_"+port+".log"},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-build.qcow2"] + args + ["vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        ScpSourceIntoVM(port),
        WithProperties("= case '%(branch)s' in *5\\.[123]*) from=%(bakery)s.tar.gz ;; *) from=MariaDB-shared-*."+name+".rpm ;; esac;  scp -P "+port+" "+kvm_scpopt+" $from buildbot@localhost:buildbot/ "),
        WithProperties("""
set -ex
if [ -e ~/openssl-devel-*.rpm ]; then
  case "%(branch)s" in
    *10.2*)
      sudo rpm -ivh ~/openssl-devel-*.rpm
    ;;
    *)
      sudo rpm -ivh ~/compat-openssl10-devel-*.rpm
    ;;
  esac
fi
cd buildbot
mkdir padding_for_CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX
cd padding_for_CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX
# - - - - - - - - - -
# MDEV-11258
case "%(branch)s" in
"10.1e"|"10.2e")
  if [ -d $HOME/local/bin ] ; then
    export PATH="$HOME/local/bin:$PATH"
  fi
  ;;
esac
# - - - - - - - - - -
mkdir rpms srpms
case "%(branch)s" in
*5\\.[123]*)
  tar zxf ../%(bakery)s.tar.gz
  cd %(bakery)s
  sudo RPM_SKIP_SIGN=1 bakery/autobake51-centos.sh ../../%(distname)s
  sudo mv /usr/src/redhat/RPMS/*/*.rpm ../rpms/
  sudo mv /usr/src/redhat/SRPMS/*.rpm ../srpms/
  ;;
*)
  mv ../MariaDB-shared-*.rpm .
  tar zxf "../%(distname)s"
  cd "%(distdirname)s"
  cmake .  -DBUILD_CONFIG=mysql_release -DRPM=""" + distro + jemalloc_option + """
  umask 022
  make -j4 package VERBOSE=1
  mv *.rpm ../rpms/
  ;;
esac
"""),
        "= rm -Rf rpms srpms && mkdir rpms srpms",
        "= scp -r -P "+port+" "+kvm_scpopt+" buildbot@localhost:buildbot/padding_for_CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX/*rpms .",
    ]))
    addPackageArchiveStep(rpm_fact, "rpms srpms", "%(tarbuildnum)s")
    dist_arch= name.split('-')[2] + "-" + name.split('-')[3]

    rpm_fact.addStep(SetPropertyFromCommand(property="systemdCapability", command="echo no"))
    rpm_fact.addStep(SetPropertyFromCommand(
        doStepIf=(lambda(step): in_systemdBuilders(step)),
        property="systemdCapability",
        command="echo yes"))

    rpm_fact.addStep(SetPropertyFromCommand(
        name="major_version",
        hideStepIf=(lambda results, s: results==SKIPPED),
        property="majorVersion",
        command=WithProperties("sh -c \"echo '%(branch)s' | sed -e \\\"s/.*\\\\(5\\\\.5\\\\|10\\\\.[0-9]\\\\).*/\\\\1/\\\"\"")))
    rpm_fact.addStep(SetPropertyFromCommand(
        name="needs_galera",
        hideStepIf=(lambda results, s: results==SKIPPED),
        property="needsGalera",
        command=WithProperties("case \"%(branch)s\" in *galera* | *5.5-hf* | *10.[1-9]*) echo yes ;; esac")))

    rpm_fact.addStep(
        getRpmInstallStep(kvm_image, args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            test_name="install"
        )
    )

    # MDEV-14253 Test with tcmalloc
    # Tests are run in one of two variations: with tcmalloc or without it.
    # For now, the test on centos73-amd64 will be run with tcmalloc,
    # all other systems will run without. It is reflected in doStepIf
    # In any case the test uses the temporary VM image created by the previous installation step

    rpm_fact.addStep(
        getRpmTestStep(args, kvm_scpopt, port,
          name="mtr-tcmllc",
          doStepIf=(lambda(step): dist_arch == "centos73-amd64"),
          env={"TERM": "vt102", "TCMALLOC": "YES"}
        )
    )
    rpm_fact.addStep(
        getRpmTestStep(args, kvm_scpopt, port,
          name="mtr",
          doStepIf=(lambda(step): dist_arch != "centos73-amd64"),
          env={"TERM": "vt102"}
        )
    )
    
    # Additional steps for installing and testing CentOS 7.3 packages on CentOS 7.4

    rpm_fact.addStep(
        getRpmInstallStep("vm-centos74-amd64", args, kvm_scpopt, port, distro, dist_name, dist_num, dist_arch,
            test_name="install_centos_mix",
            doStepIf=(lambda(step): dist_arch == "centos73-amd64")
        )
    )

    # The test will use the temporary VM image created by the previous installation step,
    # so it should be run under the same conditions as the previous step.
    rpm_fact.addStep(
        getRpmTestStep(args, kvm_scpopt, port,
            name="mtr_centos_mix",
            doStepIf=(lambda(step): dist_arch == "centos73-amd64"),
            env={"TERM": "vt102"}
        )
    )


#-----------------------------------
# RPM packages (yum): minor upgrades
#-----------------------------------

    rpm_fact.addStep(
        getRpmMinorUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, arch,
            test_mode="server"
        )
    )

    rpm_fact.addStep(
        getRpmMinorUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, arch,
            test_mode="all"
        )
    )

    rpm_fact.addStep(
        getRpmMinorUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, arch,
            test_mode="deps"
        )
    )

##### End of minor upgrade steps

#####
# DO NOT REMOVE 
# unless MDEV-9584 is closed as "won't fix".
#
# MDEV-9584, MDEV-9766 - Relaxed rules for yum upgrade
# The file implements additional steps which can only be enabled
# on branches containing fixes for MDEV-9584 and related bugs
# (still stalled/open, as of 2017-11-11).
# There are numerous steps, so probably they shouldn't be enabled
# on all branches

# execfile("/etc/buildbot/builders/rpm_fact_extra_steps.py");
#####

    return {'name': name, 'slavenames': slaves, 'builddir': name, 'factory': rpm_fact,
            "nextBuild": myNextBuild,
            "category": catg}

bld_kvm_rpm_centos6_x86 = getRpmBuilder("kvm-rpm-centos6-x86", "vm-centos6-i386",
                                        "2261", "qemu64", "i386", ramdisk=False)
bld_kvm_rpm_centos6_amd64 = getRpmBuilder("kvm-rpm-centos6-amd64", "vm-centos6-amd64",
                                        "2262", "qemu64", "x86_64", ramdisk=False)

bld_kvm_rpm_centos7_amd64 = getRpmBuilder("kvm-rpm-centos7-amd64", "vm-centos7-amd64",
                                        "2302", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False, catg="main")

bld_kvm_rpm_centos73_amd64 = getRpmBuilder("kvm-rpm-centos73-amd64", "vm-centos73-amd64",
                                        "2347", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False, catg="main")

bld_kvm_rpm_centos73_ppc64 = getRpmBuilder("kvm-rpm-centos73-ppc64", "vm-centos73-ppc64",
                                        "2348", "POWER8", "ppc64", slaves=["p801"], ramdisk=False, catg="experimental")

bld_kvm_rpm_centos73_ppc64le = getRpmBuilder("kvm-rpm-centos73-ppc64le", "vm-centos73-ppc64le",
                                        "2349", "POWER8", "ppc64le", slaves=["p801"], ramdisk=False, catg="experimental")

bld_kvm_rpm_centos74_amd64 = getRpmBuilder("kvm-rpm-centos74-amd64", "vm-centos74-amd64",
                                        "2355", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False, catg="main")

bld_kvm_rpm_fedora25_x86 = getRpmBuilder("kvm-rpm-fedora25-x86", "vm-fedora25-i386",
                                        "2337", "qemu64", "i386", ramdisk=False)
bld_kvm_rpm_fedora25_amd64 = getRpmBuilder("kvm-rpm-fedora25-amd64", "vm-fedora25-amd64",
                                        "2338", "qemu64", "x86_64", ramdisk=False)

bld_kvm_rpm_fedora26_amd64 = getRpmBuilder("kvm-rpm-fedora26-amd64", "vm-fedora26-amd64",
                                        "2354", "qemu64", "x86_64", ramdisk=False)

bld_kvm_rpm_fedora27_amd64 = getRpmBuilder("kvm-rpm-fedora27-amd64", "vm-fedora27-amd64",
                                        "2359", "qemu64", "x86_64", ramdisk=False)

def getGalRpmBuilder(name, kvm_image, port, cpu, arch, slaves=kvm_slaves, ramdisk=True):

    kvm_build_image = getGaleraBuildImage(kvm_image)

    distro = name.split('-')[2]
    args = ["--port="+port, "--memory="+memory_def, "--user=buildbot", "--smp=4", "--cpu="+cpu, "--startup-timeout=600", "--logfile=kernel_"+port+".log"]
    if ramdisk:
        args = args + ["--work-image=/dev/shm/vm-tmp-"+port+".qcow2"]
    rpm_fact = factory.BuildFactory()
    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    rpm_fact.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))
    rpm_fact.addStep(ShellCommand(
        description=["rsyncing", "VMs"],
        descriptionDone=["rsync", "VMs"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+kvm_build_image+".qcow2",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-install.qcow2",
                 "/kvm/vms/"]))
    rpm_fact.addStep(Compile(
        description=["making", "rpms"],
        descriptionDone=["make", "rpms"],
        timeout=7200,
        logfiles={"kernel": "kernel_"+port+".log"},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_build_image+".qcow2"] + args + ["vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("""
set -ex
# Install openssl-devel and asio-devel, if present
if [ -e ~/openssl-devel-*.rpm ]; then
  sudo rpm -ivh ~/openssl-devel-*.rpm ~/asio-devel-*.rpm
fi
# Nirbhay: Use system boost
case `hostname` in centos6*) sudo rm -rf /usr/local/src/boost_1_49_0/ ;; esac
cd buildbot
mkdir rpms srpms
git clone -b %(branch)s "https://github.com/MariaDB/galera.git" build
cd build
./scripts/build.sh -p
cp `find *.rpm -maxdepth 1 -type f` ../rpms
"""),
        "= rm -Rf rpms srpms && mkdir rpms srpms",
        "= scp -r -P "+port+" "+kvm_scpopt+" buildbot@localhost:buildbot/*rpms .",
    ]))
    addPackageUploadStep(rpm_fact, 'rpms')
    rpm_fact.addStep(Test(
        description=["testing", "install"],
        descriptionDone=["test", "install"],
        logfiles={"kernel": "kernel_"+port+".log"},
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2"] + args + ["vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" "+kvm_scpopt+" rpms buildbot@localhost:buildbot/",
        WithProperties("""
set -ex
cd buildbot
sudo yum -y --nogpgcheck install rpms/*.rpm
garbd --version
""")]))

    return {'name': name, 'slavenames': slaves, 'builddir': name, 'factory': rpm_fact,
            "nextBuild": myNextBuild,
            "category": "galera"}

gal_bld_kvm_rpm_centos6_x86 = getGalRpmBuilder("kvm-rpm-centos6-x86-gal", "vm-centos6-i386",
                                        "3002", "qemu64", "i386", ramdisk=False)
gal_bld_kvm_rpm_centos6_amd64 = getGalRpmBuilder("kvm-rpm-centos6-amd64-gal", "vm-centos6-amd64",
                                        "3003", "qemu64", "x86_64", ramdisk=False)

gal_bld_kvm_rpm_centos7_amd64 = getGalRpmBuilder("kvm-rpm-centos7-amd64-gal", "vm-centos7-amd64",
                                        "3004", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)

gal_bld_kvm_rpm_centos73_amd64 = getGalRpmBuilder("kvm-rpm-centos73-amd64-gal", "vm-centos73-amd64",
                                        "3056", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)

gal_bld_kvm_rpm_centos73_ppc64 = getGalRpmBuilder("kvm-rpm-centos73-ppc64-gal", "vm-centos73-ppc64",
                                        "3057", "POWER8", "ppc64", slaves=["p801"], ramdisk=False)

gal_bld_kvm_rpm_centos73_ppc64le = getGalRpmBuilder("kvm-rpm-centos73-ppc64le-gal", "vm-centos73-ppc64le",
                                        "3058", "POWER8", "ppc64le", slaves=["p801"], ramdisk=False)

gal_bld_kvm_rpm_centos74_amd64 = getGalRpmBuilder("kvm-rpm-centos74-amd64-gal", "vm-centos74-amd64",
                                        "3064", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)

gal_bld_kvm_rpm_fedora25_x86 = getGalRpmBuilder("kvm-rpm-fedora25-x86-gal", "vm-fedora25-i386",
                                        "3051", "qemu64", "i386", ramdisk=False)
gal_bld_kvm_rpm_fedora25_amd64 = getGalRpmBuilder("kvm-rpm-fedora25-amd64-gal", "vm-fedora25-amd64",
                                        "3052", "qemu64", "x86_64", ramdisk=False)

gal_bld_kvm_rpm_fedora26_amd64 = getGalRpmBuilder("kvm-rpm-fedora26-amd64-gal", "vm-fedora26-amd64",
                                        "3063", "qemu64", "x86_64", ramdisk=False)

gal_bld_kvm_rpm_fedora27_amd64 = getGalRpmBuilder("kvm-rpm-fedora27-amd64-gal", "vm-fedora27-amd64",
                                        "3067", "qemu64", "x86_64", ramdisk=False)

#-------------------------------------------------------------------------------
# SUSE and openSUSE package factory
#-------------------------------------------------------------------------------
def getZypBuilder(name, kvm_image, port, cpu, arch, slaves=kvm_slaves, ramdisk=True, catg="main"):
    distro = name.split('-')[2]
    arch= name.split('-')[3]
    m = re.search("^([A-Za-z]+)([0-9]*)",distro)
    if m:
        dist_name = m.group(1)
        dist_num = m.group(2)

    kvm_build_image = kvm_image + "-build.qcow2"

    kvm_install_image = kvm_image + "-install.qcow2"

    args = ["--port="+port, "--memory="+memory_def, "--user=buildbot", "--smp=4", "--cpu="+cpu, "--startup-timeout=600", "--logfile=kernel_"+port+".log"]
    if ramdisk:
        args = args + ["--work-image=/dev/shm/vm-tmp-"+port+".qcow2"]
    zyp_fact = factory.BuildFactory()
    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    zyp_fact.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))
    zyp_fact.addStep(ShellCommand(
        description=["rsyncing", "VMs"],
        descriptionDone=["rsync", "VMs"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+kvm_build_image,
                 "bb01.mariadb.net::kvm/vms/"+kvm_install_image,
                 "/kvm/vms/"]))
    zyp_fact.addStep(DownloadSourceTarball())
    zyp_fact.addStep(FileDownload(
        mastersrc=WithProperties("%(bakerypath)s"),
        slavedest=WithProperties("%(bakery)s.tar.gz"),
        blocksize=524288,
        doStepIf=branch_is_5_123))
    zyp_fact.addStep(ShellCommand(
        description=["getting", ".supp"],
        descriptionDone=["get", ".supp"],
        command=["sh", "-c", WithProperties("""
rm -f compiler_warnings.supp
#tar zxf "%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
tar zxf "/tmp/buildcache/%(tarbuildnum)s:%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
exit 0  # best-effort, not fatal if no suppression file
""")]))
    zyp_fact.addStep(Compile(
        description=["making", "rpms"],
        descriptionDone=["make", "rpms"],
        timeout=7200,
        logfiles={"kernel": "kernel_"+port+".log"},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_build_image] + args + ["vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        ScpSourceIntoVM(port),
        WithProperties("""
set -ex
cd buildbot
mkdir build
cd build
mkdir rpms srpms
case "%(branch)s" in
*5\\.[123]*)
  tar zxf ../%(bakery)s.tar.gz
  cd %(bakery)s
  sudo RPM_SKIP_SIGN=1 bakery/autobake51-centos.sh ../../%(distname)s
  sudo mv /usr/src/redhat/RPMS/*/*.rpm ../rpms/
  sudo mv /usr/src/redhat/SRPMS/*.rpm ../srpms/
  ;;
*)
  tar zxf "../%(distname)s"
  cd "%(distdirname)s"
  cmake .  -DBUILD_CONFIG=mysql_release -DRPM=""" + distro + """
  umask 022
  make -j4 package VERBOSE=1
  mv *.rpm ../rpms/
  ;;
esac
"""),
        "= rm -Rf rpms srpms && mkdir rpms srpms",
        "= scp -r -P "+port+" "+kvm_scpopt+" buildbot@localhost:buildbot/build/*rpms .",
    ]))
    addPackageArchiveStep(zyp_fact, "rpms srpms", "%(tarbuildnum)s")
    dist_arch= name.split('-')[2] + "-" + name.split('-')[3]

    zyp_fact.addStep(SetPropertyFromCommand(property="systemdCapability", command="echo no"))
    zyp_fact.addStep(SetPropertyFromCommand(
        doStepIf=(lambda(step): in_systemdBuilders(step)),
        property="systemdCapability",
        command="echo yes"))

    zyp_fact.addStep(SetPropertyFromCommand(
        name="major_version",
        hideStepIf=(lambda results, s: results==SKIPPED),
        property="majorVersion",
        command=WithProperties("sh -c \"echo '%(branch)s' | sed -e \\\"s/.*\\\\(5\\\\.5\\\\|10\\\\.[0-9]\\\\).*/\\\\1/\\\"\"")))
    zyp_fact.addStep(SetPropertyFromCommand(
        name="needs_galera",
        hideStepIf=(lambda results, s: results==SKIPPED),
        property="needsGalera",
        command=WithProperties("case \"%(branch)s\" in *galera* | *5.5-hf* | *10.[1-9]*) echo yes ;; esac")))

    zyp_fact.addStep(Test(
        name="install",
        description=["testing", "install"],
        descriptionDone=["test", "install"],
        warningPattern=".*Install warning:.*",
        logfiles={"kernel": "kernel_"+port+".log"},
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_install_image] + args + ["vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" "+kvm_scpopt+" rpms buildbot@localhost:buildbot/",
        "sudo rm -rf /tmp/VERSION",
        WithProperties("sh -c \"echo '%(branch)s' | sed -e \\\"s/.*\\\\(5\\\\.[1-356]\\\\|10\\\\.[01]\\\\).*/\\\\1/\\\"\" > /tmp/VERSION"),
        WithProperties("""
set -ex
df -kT
cd buildbot
case "%(branch)s" in
*mdev10416*)
  sudo cat /etc/sysconfig/selinux | grep SELINUX || true
  sudo sh -c \"PATH=$PATH:/usr/sbin getenforce || true\"
  sudo sh -c \"PATH=$PATH:/usr/sbin setenforce Enforcing || true\"
  sudo sh -c \"PATH=$PATH:/usr/sbin getenforce || true\"
  ;;
esac
rpm -qa | { grep -iE 'maria|mysql|galera' || true; }
case "%(branch)s" in
*10.[1-9]*)

  case "%(branch)s" in
    *galera4*)
      sudo sh -c "echo '[galera]
name=galera
baseurl=http://yum.mariadb.org/galera4/repo/rpm/""" + dist_arch + """
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1' > /etc/zypp/repos.d/galera.repo"
      ;;
    *)
      sudo sh -c "echo '[galera]
name=galera
baseurl=http://yum.mariadb.org/galera/repo/rpm/""" + dist_arch + """
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1' > /etc/zypp/repos.d/galera.repo"
      ;;
  esac

  sudo cat /etc/zypp/repos.d/galera.repo

  sudo zypper --no-refresh --no-gpg-checks install -y rpms/*.rpm
  sudo /etc/init.d/mysql restart
  galera_path=`echo /usr/lib*/galera/libgalera_smm.so`

case "%(branch)s" in
*10.[12]e*)
  sudo mysql -uroot -e 'create database test; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t;set global wsrep_provider="'$galera_path'"; set global wsrep_cluster_address="gcomm://";show status like "wsrep%%"'
  ;;
*)
  mysql -uroot -e 'use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t;set global wsrep_provider="'$galera_path'"; set global wsrep_cluster_address="gcomm://";show status like "wsrep%%"'
  ;;
esac

  ;;
*galera*)
  sudo sh -c "echo '[galera]
name=galera
baseurl=http://yum.mariadb.org/galera/repo/rpm/""" + dist_arch + """
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1' > /etc/zypp/repos.d/galera.repo"
  sudo cat /etc/zypp/repos.d/galera.repo

  sudo sh -c "echo '[mariadb]
name=MariaDB
baseurl=http://yum.mariadb.org/$(cat /tmp/VERSION)/""" + dist_arch + """
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1' > /etc/zypp/repos.d/MariaDB.repo"
  sudo cat /etc/zypp/repos.d/MariaDB.repo

  sudo zypper --no-refresh --no-gpg-checks install -y rpms/*.rpm
  sudo /etc/init.d/mysql restart
  galera_path=`echo /usr/lib*/galera/libgalera_smm.so`
  mysql -uroot -e 'use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t;set global wsrep_provider="'$galera_path'"; set global wsrep_cluster_address="gcomm://";show status like "wsrep%%"'
  ;;
*)
  sudo zypper --no-refresh --no-gpg-checks install -y rpms/*.rpm
  case "%(systemdCapability)s" in
yes)
  # Service is installed
  ls -l /usr/lib/systemd/system/mariadb.service
  # RPMs do not start server automatically on clean install
  sudo systemctl start mariadb

  echo "---- Check permissions - all of the following should fail ----"
  ! systemctl --no-ask-password stop mariadb
  ! systemctl --no-ask-password condrestart mariadb
  ! systemctl --no-ask-password start mariadb
  ! systemctl --no-ask-password enable mariadb
  ! systemctl --no-ask-password set-environment MYSQLD_OPTS="--unknown-option"
  ! systemctl --no-ask-password unset-environment MYSQLD_OPTS
  ! systemctl --no-ask-password restart mariadb

  echo "---- Now use proper permissions ---"
  # mariadb.service and its synonyms
  systemctl status mariadb.service --no-pager
  systemctl status mariadb.service --no-pager | grep Loaded | grep mariadb.service
  systemctl status mariadb --no-pager
  systemctl status mariadb --no-pager | grep Loaded | grep mariadb.service
  systemctl status mysql --no-pager
  systemctl status mysql --no-pager | grep Loaded | grep mariadb.service
  systemctl status mysqld --no-pager
  systemctl status mysqld --no-pager | grep Loaded | grep mariadb.service

  sudo systemctl stop mariadb
  !  ps -ef | grep mysqld | grep -v grep
  sleep 5
  # condrestart part 1: does nothing when server is not running
  ##sudo systemctl condrestart mariadb
  #!  ps -ef | grep mysqld | grep -v grep
  # start works under root
  sudo systemctl start mariadb
  ps -ef | grep mysqld | grep -v grep
  # is-enabled, disable, enable
  systemctl is-enabled mariadb
  # MDEV-8956
  #sudo systemctl disable mariadb
  #! systemctl is-enabled mariadb
  #sudo systemctl enable mariadb
  #systemctl is-enabled mariadb
  # set-environment: add an unknown option
  sudo systemctl set-environment MYSQLD_OPTS="--unknown-option"
  # condrestart part 2: attempts to restart when server is running
  ! sudo systemctl condrestart mariadb
  # unset-environment
  sudo systemctl unset-environment MYSQLD_OPTS
  # Restart
  sudo systemctl restart mariadb
  sudo systemctl set-environment MYSQLD_OPTS="--unknown-option"
  ! sudo systemctl restart mariadb
  sudo systemctl unset-environment MYSQLD_OPTS
  # Status shows proper text
  systemctl status mariadb --no-pager | grep 'MariaDB server is down'
  sudo systemctl start mariadb
  systemctl status mariadb --no-pager | grep 'Taking your SQL requests now'
  # See the journal
  sudo systemctl -l status mariadb.service --no-pager
  ! journalctl -lxn 100 | grep mysqld
  sudo journalctl -lxn 100 --no-pager | grep mysqld
  # Init.d script
  ls -l /etc/init.d/mysql
  ls -l /etc/systemd/system/mariadb.service.d/migrated-from-my.cnf-settings.conf
  # It does not do the same as systemctl now
  # /etc/init.d/mysql status
    ;;
no)
    echo "Steps related to systemd will be skipped"
    sudo service mysql restart
    ;;
*)
    echo "It should never happen, check your configuration (systemdCapability property is not set or is set to a wrong value)"
    ;;
  esac
  mysql -e "select @@version, @@version_comment"
  mysql -e "use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t"
  ;;
esac
""")]))

#############################
##### New step: MTR tests

    zyp_fact.addStep(
        getRpmTestStep(args, kvm_scpopt, port,
          name="mtr",
          env={"TERM": "vt102"}
        )
    )

#--------------------------------------
# RPM packages (zypper): minor upgrades
#--------------------------------------

    zyp_fact.addStep(
        getRpmMinorUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, arch,
            test_mode="server"
        )
    )

    zyp_fact.addStep(
        getRpmMinorUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, arch,
            test_mode="all"
        )
    )

    zyp_fact.addStep(
        getRpmMinorUpgradeStep(kvm_image, args, kvm_scpopt, port, distro, arch,
            test_mode="deps"
        )
    )

##### End of minor upgrade steps

#####
# DO NOT REMOVE 
# unless MDEV-9584 is closed as "won't fix".
#
# MDEV-9584, MDEV-9766 - Relaxed rules for yum upgrade
# The file implements additional steps which can only be enabled
# on branches containing fixes for MDEV-9584 and related bugs
# (still stalled/open, as of 2017-11-11).
# There are numerous steps, so probably they shouldn't be enabled
# on all branches

# execfile("/etc/buildbot/builders/rpm_fact_extra_steps.py");
#####

    return {'name': name, 'slavenames': slaves, 'builddir': name, 'factory': zyp_fact,
            "nextBuild": myNextBuild,
            "category": catg}


#-------------------------------------------------------------------------------
# SUSE and openSUSE builders
#-------------------------------------------------------------------------------

bld_kvm_zyp_opensuse42_amd64 = getZypBuilder("kvm-zyp-opensuse42-amd64", "vm-opensuse42-amd64",
                                        "2340", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)

bld_kvm_zyp_sles11_x86 = getZypBuilder("kvm-zyp-sles11-x86", "vm-sles11-x86",
                                        "2307", "qemu64", "i386", slaves=kvm11_slaves, ramdisk=False)

bld_kvm_zyp_sles11_amd64 = getZypBuilder("kvm-zyp-sles11-amd64", "vm-sles11-amd64",
                                        "2308", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)

bld_kvm_zyp_sles11sp1_amd64 = getZypBuilder("kvm-zyp-sles11sp1-amd64", "vm-sles11sp1-amd64",
                                        "2312", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)

bld_kvm_zyp_sles114_amd64 = getZypBuilder("kvm-zyp-sles114-amd64", "vm-sles114-amd64",
                                        "2352", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)
bld_kvm_zyp_sles114_x86 = getZypBuilder("kvm-zyp-sles114-x86", "vm-sles114-i386",
                                        "2353", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)

bld_kvm_zyp_sles12_amd64 = getZypBuilder("kvm-zyp-sles12-amd64", "vm-sles12-amd64",
                                        "2309", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)
#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
# SmartOS builders
#-------------------------------------------------------------------------------
# initial builder will use port 2358


#-------------------------------------------------------------------------------
# SUSE and openSUSE package factory for Galera
#-------------------------------------------------------------------------------
def getGalZypBuilder(name, kvm_image, port, cpu, arch, slaves=kvm_slaves, ramdisk=True, catg="galera"):
    distro = name.split('-')[2]

    kvm_build_image = getGaleraBuildImage(kvm_image) + ".qcow2"
    kvm_install_image = kvm_image + "-install.qcow2"

    args = ["--port="+port, "--memory="+memory_def, "--user=buildbot", "--smp=4", "--cpu="+cpu, "--startup-timeout=600", "--logfile=kernel_"+port+".log"]
    if ramdisk:
        args = args + ["--work-image=/dev/shm/vm-tmp-"+port+".qcow2"]
    zyp_fact = factory.BuildFactory()
    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    zyp_fact.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))
    zyp_fact.addStep(ShellCommand(
        description=["rsyncing", "VMs"],
        descriptionDone=["rsync", "VMs"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+kvm_build_image,
                 "bb01.mariadb.net::kvm/vms/"+kvm_install_image,
                 "/kvm/vms/"]))
    zyp_fact.addStep(Compile(
        description=["making", "rpms"],
        descriptionDone=["make", "rpms"],
        timeout=7200,
        logfiles={"kernel": "kernel_"+port+".log"},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_build_image] + args + ["vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("""
set -ex
cd buildbot
mkdir rpms srpms
git clone -b %(branch)s "https://github.com/MariaDB/galera.git" build
cd build
./scripts/build.sh -p
cp `find *.rpm -maxdepth 1 -type f` ../rpms
"""),
        "= rm -Rf rpms srpms && mkdir rpms srpms",
        "= scp -r -P "+port+" "+kvm_scpopt+" buildbot@localhost:buildbot/*rpms .",
    ]))
    addPackageUploadStep(zyp_fact, 'rpms')
    zyp_fact.addStep(Test(
        description=["testing", "install"],
        descriptionDone=["test", "install"],
        logfiles={"kernel": "kernel_"+port+".log"},
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_install_image] + args + ["vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" "+kvm_scpopt+" rpms buildbot@localhost:buildbot/",
        WithProperties("""
set -ex
cd buildbot
sudo zypper --no-refresh --no-gpg-checks install -y rpms/*.rpm
garbd --version
""")]))
    return {'name': name, 'slavenames': slaves, 'builddir': name, 'factory': zyp_fact,
            "nextBuild": myNextBuild,
            "category": catg}

#-------------------------------------------------------------------------------
# SUSE and openSUSE builders for Galera
#-------------------------------------------------------------------------------
gal_bld_kvm_zyp_opensuse42_amd64 = getGalZypBuilder("kvm-zyp-opensuse42-amd64-gal", "vm-opensuse42-amd64",
                                     "3054", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)
gal_bld_kvm_zyp_sles11_x86       = getGalZypBuilder("kvm-zyp-sles11-x86-gal", "vm-sles11-x86",
                                     "3013", "qemu64", "i386", slaves=kvm11_slaves, ramdisk=False)
gal_bld_kvm_zyp_sles11_amd64     = getGalZypBuilder("kvm-zyp-sles11-amd64-gal", "vm-sles11-amd64",
                                     "3014", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)
gal_bld_kvm_zyp_sles114_x86       = getGalZypBuilder("kvm-zyp-sles114-x86-gal", "vm-sles114-i386",
                                     "3061", "qemu64", "i386", slaves=kvm11_slaves, ramdisk=False)
gal_bld_kvm_zyp_sles114_amd64     = getGalZypBuilder("kvm-zyp-sles114-amd64-gal", "vm-sles114-amd64",
                                     "3062", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)
gal_bld_kvm_zyp_sles12_amd64     = getGalZypBuilder("kvm-zyp-sles12-amd64-gal", "vm-sles12-amd64",
                                     "3015", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)
gal_bld_kvm_zyp_sles11sp1_amd64  = getGalZypBuilder("kvm-zyp-sles11sp1-amd64-gal", "vm-sles11sp1-amd64",
                                     "3016", "qemu64", "x86_64", slaves=kvm11_slaves, ramdisk=False)

#-------------------------------------------------------------------------------

# The class Test seems to not have a direct way to completely disable
# warning parsing in logs. So use this impossible-to-match regexp
# instead.

impossibleRe = r"\Z.\A"


#-----------------------------------------------------
# Upgrade from pre-installed versions for deb packages
#-----------------------------------------------------

def getDebUpgradeStep(kvm_image, kvm_image_variant, args, kvm_scpopt, port, 
                    dist_name, version_name, arch, upgrade_from,
                    **kwargs):

    return Test(
        description=["testing", "upgrade", "from", upgrade_from],
        descriptionDone=["upgrade", "from", upgrade_from],
        logfiles={"kernel": "kernel_"+port+".log", "syslog": "daemon.log"},
        warningPattern="Upgrade warning:.*",
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-"+kvm_image_variant+".qcow2"] + args + ["--logfile=kernel_"+port+".log", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" "+kvm_scpopt+" debs buildbot@localhost:buildbot/",
        WithProperties("""
set -ex
cd buildbot

dpkg -l | grep -iE 'maria|mysql|galera' || true

old_ver=`dpkg -l | grep -iE 'mysql-server-|mariadb-server-' | head -1 | awk '{print $2}' | sed -e "s/.*\(mysql\|mariadb\)-server-\(5\.[567]\|10\.[0-9]\).*/\\1-\\2/"`
# version_arch is "trusty-ppc64le" etc.
version_arch="""+version_name+"-"+arch+"""
dist_name="""+dist_name+"""
version_name="""+version_name+"""

GALERA=`case '%(branch)s' in *galera* | *5.5-hf*) echo galera- ;; esac`
packages_to_install="mariadb-${GALERA}server mariadb-client libmariadbclient18"

case "$old_ver-%(majorVersion)s" in

mysql-5.7-10.[0-1])
  echo "Upgrade warning: cannot downgrade from InnoDB 5.7 to 5.6"
  exit
  ;;
mysql-5.[67]-5.5)
  echo "Upgrade warning: cannot downgrade from InnoDB $old_ver to 5.5"
  exit
  ;;
mariadb-10.[0-9]-5.5)
  echo "Upgrade warning: Downgrade from $old_ver to 5.5 is not expected to work"
  exit
  ;;
mariadb-10.[0-9]-10.[0-9])
  if [[ "$old_ver" > "mariadb-%(majorVersion)s" ]] ; then
    echo "Upgrade warning: Downgrade from $old_ver to %(majorVersion)s is not expected to work"
    exit
  fi
  if [[ "$old_ver" == "mariadb-%(majorVersion)s" ]]
  then
    # 3rd column is the package version, e.g. 10.1.23-9+deb9u1 vs 10.1.23+maria-1~stretch
    if ! dpkg -l | grep -i mariadb-server- | head -1 | awk '{print $3}' | grep maria
    then
      echo "Upgrade warning: MDEV-11979 - cannot upgrade from Debian packages to MariaDB packages of the same major version"
      exit
    fi
  fi
  ;;
mysql-5.5-5.5)
  if [[ "$version_arch" == "trusty-ppc64le" ]] ; then
    echo "Upgrade warning: MDEV-14369 - Server upgrade from MySQL 5.5 to MariaDB 5.5 on trusty ppc64le does not work"
    exit
  fi
  ;;
mysql-5.5-10.[0-9])
  if [[ "$version_arch" == "trusty-ppc64le" ]] ; then
    echo "Upgrade warning: MDEV-14384 - cannot upgrade the client on trusty-ppc64le from MySQL 5.5 to MariaDB 10.x, only upgrading the server and libmariadbclient18"
    packages_to_install="mariadb-server libmariadbclient18"
  fi
  ;;
*)
  echo "Upgrade from MySQL $old_ver to MariaDB %(majorVersion)s will be attempted"
  ;;
esac

if [ "%(needsGalera)s" == "yes" ]
then
  case "%(branch)s" in
    *galera4*)
      if ! wget http://yum.mariadb.org/galera4/repo/deb/dists/"""+version_name+"""
      # Override the location of the library for versions which don't have their own
      then
        if [ "$dist_name" == "debian" ] ; then
          sudo sh -c "echo 'deb http://yum.mariadb.org/galera4/repo/deb stretch main' > /etc/apt/sources.list.d/galera-test-repo.list"
        else
          sudo sh -c "echo 'deb http://yum.mariadb.org/galera4/repo/deb xenial main' > /etc/apt/sources.list.d/galera-test-repo.list"
        fi
      else
        sudo sh -c "echo 'deb http://yum.mariadb.org/galera4/repo/deb """+version_name+""" main' > /etc/apt/sources.list.d/galera-test-repo.list"
      fi
      ;;
    *)
  if ! wget http://yum.mariadb.org/galera/repo/deb/dists/"""+version_name+"""
  # Override the location of the library for versions which don't have their own
  then
    if [ "$dist_name" == "debian" ] ; then
      sudo sh -c "echo 'deb http://yum.mariadb.org/galera/repo/deb stretch main' > /etc/apt/sources.list.d/galera-test-repo.list"
    else
      sudo sh -c "echo 'deb http://yum.mariadb.org/galera/repo/deb xenial main' > /etc/apt/sources.list.d/galera-test-repo.list"
    fi
  else
    sudo sh -c "echo 'deb http://yum.mariadb.org/galera/repo/deb """+version_name+""" main' > /etc/apt/sources.list.d/galera-test-repo.list"
  fi
      ;;
  esac

fi

chmod -cR go+r debs
# Sometimes apt-get update fails because the repo is being updated.
for i in 1 2 3 4 5 6 7 8 9 10 ; do
  if sudo apt-get update ; then
    break
  fi
  echo "Upgrade warning: apt-get update failed, retrying ($i)"
  sleep 10
done

# On some of VMs the password might be not pre-created as expected. Also, 
if mysql -uroot -e "set password = password('rootpass')" ; then
  echo "The password has now been set"
# Or, Debian packages local root might be using unix_socket plugin.
# Change it to the normal password authentication
elif sudo mysql -uroot -e "update mysql.user set plugin = ''; flush privileges; set password = password('rootpass')" ; then
  echo "The error above does not mean a test failure, it's one of expected outcomes"
  echo "Unix socket authentication has been unset"
else
  echo "Errors above do not mean a test failure, it's one of expected outcomes"
fi


mysql -uroot -prootpass -e "use mytest; select * from t"
mysql -uroot -prootpass -e "use mytest; drop table if exists upgrade_test; create table upgrade_test (pk int primary key auto_increment, c char(64), v varchar(2048), d date, t time, dt datetime, ts timestamp) engine=InnoDB; begin; insert into upgrade_test values (null, 'test', 'test', date(now()), time(now()), now(), now());  insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; insert into upgrade_test select null, 'test', 'test', date(now()), time(now()), now(), now() from upgrade_test; commit" --force
mysql -uroot -prootpass --skip-column-names -e "select @@version" | awk -F'-' '{ print $1 }' > /tmp/version.old
mysql -uroot -prootpass -e "CREATE DATABASE autoinc; CREATE TABLE autoinc.t_autoinc(a SERIAL) ENGINE=InnoDB SELECT 42 a"
mysql -uroot -prootpass -e "CREATE TABLE autoinc.t_autoinc2(a SERIAL) ENGINE=InnoDB; BEGIN; INSERT INTO autoinc.t_autoinc2 VALUES (NULL),(NULL); ROLLBACK; SHOW CREATE TABLE autoinc.t_autoinc2 \G"

sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated -y $packages_to_install"

mysql -uroot -prootpass --skip-column-names -e "INSERT INTO autoinc.t_autoinc SET a=NULL;  SELECT COUNT(*) Expect_2 FROM autoinc.t_autoinc WHERE a>=42"
echo "Prior to MDEV-6076, the next SELECT would return 1. After MDEV-6076, it should be 3"
mysql -uroot -prootpass --skip-column-names -e "INSERT INTO autoinc.t_autoinc2 VALUES (NULL); SELECT * FROM autoinc.t_autoinc2"

mysql -uroot -prootpass -e "select @@version, @@version_comment"
mysql -uroot -prootpass --skip-column-names -e "select @@version" | awk -F'-' '{ print $1 }' > /tmp/version.new

echo "The next line must show a difference between versions, otherwise it's a failure"
echo "It can be a false positive if we forgot to bump version after release,"
echo "or if the tree is based on an old version"
! diff -u  /tmp/version.old  /tmp/version.new

sudo cat /var/lib/mysql/mysql_upgrade_info | awk -F'-' '{ print $1 }' > /tmp/version.upgrade
# mysql_upgrade is run automatically in deb packages
# TODO: something weird goes on with mysql_upgrade, to be checked later
#diff -u /tmp/version.new /tmp/version.upgrade
cat /tmp/version.new
cat /tmp/version.upgrade
case "%(systemdCapability)s" in
yes)
  ls -l /lib/systemd/system/mariadb.service
  ls -l /etc/systemd/system/mariadb.service.d/migrated-from-my.cnf-settings.conf
  ls -l /etc/init.d/mysql
  systemctl --no-pager status mariadb.service
  systemctl --no-pager status mariadb
  systemctl --no-pager status mysql
  systemctl --no-pager status mysqld
  systemctl --no-pager is-enabled mariadb
  sudo systemctl --no-pager restart mariadb
  systemctl --no-pager status mariadb
  sudo journalctl -lxn 100 --no-pager | grep mysqld
  # It does not do the same as systemctl now
  # /etc/init.d/mysql status
  ;;
no)
  echo "Steps related to systemd will be skipped"
  ;;
*)
  echo "It should never happen, check your configuration (systemdCapability property is not set or is set to a wrong value)"
  ;;
esac

mysql -uroot -prootpass -e "use mytest; select * from t; select count(*) from upgrade_test"
perl -MDBD::mysql -e print

"""),
        "! rm -f daemon.log; (sudo cat /var/log/daemon.log || sudo cat /var/log/syslog) >daemon.log",
        "!= rm -f daemon.log; scp -P "+port+" "+kvm_scpopt+" buildbot@localhost:daemon.log ."],
        **kwargs)


#-------------------------------
# Minor upgrade for deb packages
#-------------------------------

def getDebMinorUpgradeStep(kvm_image, args, kvm_scpopt, port, dist_name, version_name, arch,
    test_mode, **kwargs):

    return Test(
        name="minor-upgrade-"+test_mode,
        warningPattern="Upgrade warning:.*",
        description=["testing", "minor", "upgrade"],
        descriptionDone=["minor", "upgrade", "for", test_mode],
        logfiles={"kernel": "kernel_"+port+".log", "syslog": "daemon.log"},
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2"] + args + ["--logfile=kernel_"+port+".log", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" "+kvm_scpopt+" debs buildbot@localhost:buildbot/",
        WithProperties("""

set -xv

test_mode="""+test_mode+"""

case "%(branch)s" in
*galera*)
  if [[ "$test_mode" == "all" ]] ; then
    echo "Upgrade warning: the test in 'all' mode is not executed for galera branches"
    exit
  fi
  ;;
*10.3*)
  if [[ "$test_mode" != "server" ]] ; then
    echo "Upgrade warning: the test in 'all' or 'deps' mode is not executed for non-stable branches"
    exit
  fi
  ;;
esac

arch="""+arch+"""
if [[ "$arch" == "ppc64le" ]] ; then
  arch=ppc64el
elif [[ "$arch" == "x86" ]] ; then
  arch=i386
fi
dist_name="""+dist_name+"""
version_name="""+version_name+"""

echo "Architecture, distribution and version based on VM name: $arch $dist_name $version_name"

echo "Test properties"
echo "  Systemd capability %(systemdCapability)s"
echo "  Major version %(majorVersion)s"

#===============
# This test can be performed in three modes:
# - 'server' -- only mariadb-server is installed (with whatever dependencies it pulls) and upgraded.
# - 'all'    -- all provided packages are installed and upgraded
# - 'deps'   -- only a limited set of main packages is installed and upgraded,
#               to make sure upgrade does not require new dependencies
#===============

echo "Current test mode: $test_mode"

#============
# Environment 
#============

dpkg -l | grep -iE 'maria|mysql|galera'
lsb_release -a
uname -a
df -kT

#========================================
# Check whether a previous version exists
#========================================

if ! wget http://mirror2.hs-esslingen.de/mariadb/repo/%(majorVersion)s/"""+dist_name+"""/dists/"""+version_name+"""/main/binary-$arch/Packages
then
  echo "Upgrade warning: could not find the 'Packages' file for a previous version in MariaDB repo, skipping the test"
  exit
fi

#===============================================
# Define the list of packages to install/upgrade
#===============================================

case "%(branch)s" in
*galera*)
  server_package="mariadb-galera-server"
  test_package="mariadb-galera-test"
  ;;
*)
  server_package="mariadb-server"
  test_package="mariadb-test"
  ;;
esac

case $test_mode in
all)
  package_list=`grep -B 1 'Source: mariadb-' Packages | grep 'Package:' | grep -v 'galera' | awk '{print $2}' | xargs`
  ;;
deps)
  package_list="$server_package mariadb-client mariadb-common $test_package mysql-common libmysqlclient18"
  ;;
server)  
  package_list=$server_package
  ;;
*)
  echo "ERROR: unknown test mode: $test_mode"
  exit 1
esac

echo "Package_list: $package_list"

#======================================================================
# Prepare apt source configuration for installation of the last release
#======================================================================

sudo sh -c "echo 'deb http://mirror2.hs-esslingen.de/mariadb/repo/%(majorVersion)s/"""+dist_name+""" """+version_name+""" main' > /etc/apt/sources.list.d/mariadb_upgrade.list"

# We need to pin directory to ensure that installation happens from MariaDB repo
# rather than from the default distro repo

sudo sh -c "echo 'Package: *' > /etc/apt/preferences.d/release"
sudo sh -c "echo 'Pin: origin mirror2.hs-esslingen.de' >> /etc/apt/preferences.d/release"
sudo sh -c "echo 'Pin-Priority: 1000' >> /etc/apt/preferences.d/release"

sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup
sudo sh -c 'grep -v "^deb .*file" /etc/apt/sources.list.backup | grep -v "^deb-src .*file" > /etc/apt/sources.list'

# Sometimes apt-get update fails because the repo is being updated.
res=1
for i in 1 2 3 4 5 6 7 8 9 10 ; do
  if sudo apt-get update ; then
    res=0
    break
  fi
  echo "Upgrade warning: apt-get update failed, retrying ($i)"
  sleep 10
done

if [[ $res -ne 0 ]] ; then
  echo "ERROR: apt-get update failed"
  exit $res
fi

#=========================
# Install previous release
#=========================

sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated -y $package_list"
if [[ $? -ne 0 ]] ; then
  echo "ERROR: Installation of a previous release failed, see the output above"
  exit 1
fi

#==========================================================
# Wait till mysql_upgrade, mysqlcheck and such are finished
#==========================================================

# Debian installation/upgrade/startup always attempts to execute mysql_upgrade, and
# also run mysqlcheck and such. Due to MDEV-14622, they are subject to race condition,
# and can be executed later or even omitted.
# We will wait till they finish, to avoid any clushes with SQL we are going to execute

function wait_for_mysql_upgrade () {
  res=1
  for i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ; do
    if ps -ef | grep -iE 'mysql_upgrade|mysqlcheck|mysqlrepair|mysqlanalyze|mysqloptimize' | grep -v grep ; then
      sleep 1
    else
      res=0
      break
    fi
  done
  if [[ $res -ne 0 ]] ; then
    echo "ERROR: mysqlcheck or alike have not finished in reasonable time"
  fi
}

wait_for_mysql_upgrade

#================================================================
# Check that the server is functioning and create some structures
#================================================================

# On some of VMs the password might be not pre-created as expected. This command should normally fail.
mysql -uroot -e "set password = password('rootpass')" >> /dev/null 2>&1

# All the commands below should succeed

set -e

mysql -uroot -prootpass -e "CREATE DATABASE db"
mysql -uroot -prootpass -e "CREATE TABLE db.t_innodb(a1 SERIAL, c1 CHAR(8)) ENGINE=InnoDB; INSERT INTO db.t_innodb VALUES (1,'foo'),(2,'bar')"
mysql -uroot -prootpass -e "CREATE TABLE db.t_myisam(a2 SERIAL, c2 CHAR(8)) ENGINE=MyISAM; INSERT INTO db.t_myisam VALUES (1,'foo'),(2,'bar')"
mysql -uroot -prootpass -e "CREATE TABLE db.t_aria(a3 SERIAL, c3 CHAR(8)) ENGINE=Aria; INSERT INTO db.t_aria VALUES (1,'foo'),(2,'bar')"
mysql -uroot -prootpass -e "CREATE TABLE db.t_memory(a4 SERIAL, c4 CHAR(8)) ENGINE=MEMORY; INSERT INTO db.t_memory VALUES (1,'foo'),(2,'bar')"
mysql -uroot -prootpass -e "CREATE ALGORITHM=MERGE VIEW db.v_merge AS SELECT * FROM db.t_innodb, db.t_myisam, db.t_aria"
mysql -uroot -prootpass -e "CREATE ALGORITHM=TEMPTABLE VIEW db.v_temptable AS SELECT * FROM db.t_innodb, db.t_myisam, db.t_aria"
mysql -uroot -prootpass -e "CREATE PROCEDURE db.p() SELECT * FROM db.v_merge"
mysql -uroot -prootpass -e "CREATE FUNCTION db.f() RETURNS INT DETERMINISTIC RETURN 1"

set +e

#====================================================================================
# Store information about server version and available plugins/engines before upgrade
#====================================================================================

if [[ "$test_mode" == "all" ]] ; then
  # Due to MDEV-14560, we have to restart the server to get the full list of engines
  sudo /etc/init.d/mysql restart
fi

mysql -uroot -prootpass --skip-column-names -e "select @@version" | awk -F'-' '{ print $1 }' > /tmp/version.old
mysql -uroot -prootpass --skip-column-names -e "select engine, support, transactions, savepoints from information_schema.engines" | sort > /tmp/engines.old

case "%(majorVersion)s" in
5.5)
  mysql -uroot -prootpass --skip-column-names -e "show plugins" | sort > /tmp/plugins.old
  ;;
10.[0-9])
  mysql -uroot -prootpass --skip-column-names -e "select plugin_name, plugin_status, plugin_type, plugin_library, plugin_license from information_schema.all_plugins order by plugin_name, plugin_library" > /tmp/plugins.old
  ;;
*)
  echo "ERROR: unknown major version: %(majorVersion)s"
  exit 1
  ;;
esac

#=========================================
# Restore apt configuration for local repo
#=========================================

chmod -cR go+r ~/buildbot/debs

if [[ "$test_mode" == "deps" ]] ; then
  # For the dependency check, only keep the local repo
  sudo sh -c "grep -iE 'deb .*file|deb-src .*file' /etc/apt/sources.list.backup > /etc/apt/sources.list"
  sudo rm -rf /etc/apt/sources.list.d/*
else
  sudo cp /etc/apt/sources.list.backup /etc/apt/sources.list
  sudo rm /etc/apt/sources.list.d/mariadb_upgrade.list
fi
sudo rm /etc/apt/preferences.d/release

# Sometimes apt-get update fails because the repo is being updated.
res=1
for i in 1 2 3 4 5 6 7 8 9 10 ; do
  if sudo apt-get update ; then
    res=0
    break
  fi
  echo "Upgrade warning: apt-get update failed, retrying ($i)"
  sleep 10
done

if [[ $res -ne 0 ]] ; then
  echo "ERROR: apt-get update failed"
  exit $res
fi

#=========================
# Install the new packages
#=========================

sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated -y $package_list"
if [[ $? -ne 0 ]] ; then
  echo "ERROR: Installation of the new packages failed, see the output above"
  exit 1
fi

#==========================================================
# Wait till mysql_upgrade, mysqlcheck and such are finished
#==========================================================

# Again, wait till mysql_upgrade is finished, to avoid clushes;
# and for non-stable versions, it might be necessary, so run it again 
# just in case it was omitted

wait_for_mysql_upgrade

if [[ "%(majorVersion)s" == "10.3" ]] ; then
  mysql_upgrade -uroot -prootpass
fi

#===================================================
# Check that no old packages have left after upgrade
#===================================================

# The check is only performed for all-package-upgrade, because
# for selective ones some implicitly installed packages might not be upgraded

if [[ "$test_mode" == "all" ]] ; then
  dpkg -l | grep -iE 'mysql|maria' | grep `cat /tmp/version.old`
  if [[ $? -eq 0 ]] ; then
    echo "ERROR: Old packages have been found after upgrade"
    exit 1
  fi
fi

#=====================================================================================
# Check that the server is functioning and previously created structures are available
#=====================================================================================

# All the commands below should succeed

set -e

mysql -uroot -prootpass -e "select @@version, @@version_comment"

mysql -uroot -prootpass -e "SHOW TABLES IN db"
mysql -uroot -prootpass -e "SELECT * FROM db.t_innodb; INSERT INTO db.t_innodb VALUES (3,'foo'),(4,'bar')"
mysql -uroot -prootpass -e "SELECT * FROM db.t_myisam; INSERT INTO db.t_myisam VALUES (3,'foo'),(4,'bar')"
mysql -uroot -prootpass -e "SELECT * FROM db.t_aria; INSERT INTO db.t_aria VALUES (3,'foo'),(4,'bar')"
mysql -uroot -prootpass -e "SELECT * FROM db.t_memory; INSERT INTO db.t_memory VALUES (1,'foo'),(2,'bar')"
mysql -uroot -prootpass -e "SELECT COUNT(*) FROM db.v_merge"
mysql -uroot -prootpass -e "SELECT COUNT(*) FROM db.v_temptable"
mysql -uroot -prootpass -e "CALL db.p()"
mysql -uroot -prootpass -e "SELECT db.f()"

set +e

#===================================================================================
# Store information about server version and available plugins/engines after upgrade
#===================================================================================

set -e

mysql -uroot -prootpass --skip-column-names -e "select @@version" | awk -F'-' '{ print $1 }' > /tmp/version.new
mysql -uroot -prootpass --skip-column-names -e "select engine, support, transactions, savepoints from information_schema.engines" | sort > /tmp/engines.new

case "%(majorVersion)s" in
5.5)
  mysql -uroot -prootpass --skip-column-names -e "show plugins" | sort > /tmp/plugins.new
  ;;
10.[0-9])
  mysql -uroot -prootpass --skip-column-names -e "select plugin_name, plugin_status, plugin_type, plugin_library, plugin_license from information_schema.all_plugins order by plugin_name, plugin_library" > /tmp/plugins.new
  ;;
esac

case "%(systemdCapability)s" in
yes)
  ls -l /lib/systemd/system/mariadb.service
  ls -l /etc/systemd/system/mariadb.service.d/migrated-from-my.cnf-settings.conf
  ls -l /etc/init.d/mysql
  systemctl --no-pager status mariadb.service
  systemctl --no-pager status mariadb
  systemctl --no-pager status mysql
  systemctl --no-pager status mysqld
  systemctl --no-pager is-enabled mariadb
  ;;
no)
  echo "Steps related to systemd will be skipped"
  ;;
*)
  echo "ERROR: It should never happen, check your configuration (systemdCapability property is not set or is set to a wrong value)"
  exit 1
  ;;
esac

set +e

case "%(branch)s" in
*10.[3]*)
  echo "Until 10.3 is GA, the list of plugins/engines might be unstable, skipping the check"
  ;;
*)
  diff -u /tmp/engines.old /tmp/engines.new
  if [[ $? -ne 0 ]] ; then
    echo "ERROR: the lists of engines in the old and new installations differ"
    exit 1
  fi
  diff -u /tmp/plugins.old /tmp/plugins.new
  if [[ $? -ne 0 ]] ; then
    echo "ERROR: the lists of available plugins in the old and new installations differ"
    exit 1
  fi
  ;;
esac

diff -u /tmp/version.old /tmp/version.new
if [[ $? -eq 0 ]] ; then
  echo "ERROR: server version has not changed after upgrade"
  echo "It can be a false positive if we forgot to bump version after release,"
  echo "or if it is a development tree is based on an old version"
  exit 1
fi

"""),
        "! rm -f daemon.log; (sudo cat /var/log/daemon.log || sudo cat /var/log/syslog) >daemon.log",
        "!= rm -f daemon.log; scp -P "+port+" "+kvm_scpopt+" buildbot@localhost:daemon.log ."],
        **kwargs)



###############
# Deb packages
###############

def getDebBuilder(name, kvm_image, port, cpu, dist_name, version_name, kvmargs=[], slavenames=kvm_slaves, ramdisk=True, catg="main"):
    args= ["--port="+port, "--memory="+memory_def, "--user=buildbot", "--smp=4", "--cpu="+cpu, "--startup-timeout=600"] + kvmargs
    if ramdisk:
        args= args + ["--work-image=/dev/shm/vm-tmp-"+port+".qcow2"]
    # AIO detection in InnoDB/XraDB does not work on the old
    # debian5 kernel. Let's disable aio here, in buildbot.
    if "debian5" in name:
        disable_aio_in_mtr="--mysqld=--loose-disable-innodb-use-native-aio"
    else:
        disable_aio_in_mtr=""
    arch= name.split('-')[3]
    dist_arch= name.split('-')[2] + "-" + arch
    deb_fact= factory.BuildFactory()
    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    
#---------------------------------
# Deb packages: preliminary steps
#---------------------------------

    deb_fact.addStep(ShellCommand(
        name="cleanup",
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))
    deb_fact.addStep(ShellCommand(
        name="rsync_vms",
        description=["rsyncing", "VMs"],
        descriptionDone=["rsync", "VMs"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-build.qcow2",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-install.qcow2",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-upgrade.qcow2",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-upgrade2.qcow2",
                 "/kvm/vms/"]))
    deb_fact.addStep(DownloadSourceTarball())
    deb_fact.addStep(FileDownload(
        mastersrc=WithProperties("%(bakerypath)s"),
        slavedest=WithProperties("%(bakery)s.tar.gz"),
        blocksize=524288,
        doStepIf=branch_is_5_123))
    # Extract the compiler warning suppressions file from the source tarball.
    deb_fact.addStep(ShellCommand(
        name="get_supp",
        description=["getting", ".supp"],
        descriptionDone=["get", ".supp"],
        command=["sh", "-c", WithProperties("""
rm -f compiler_warnings.supp
tar zxf "/tmp/buildcache/%(tarbuildnum)s:%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
#wget ftp.askmonty.org:/public/compiler_warnings.supp
ls -l compiler_warnings.supp
exit 0  # best-effort, not fatal if no suppression file
""")]))

    deb_fact.addStep(SetPropertyFromCommand(
        name="nosystemd",
        doStepIf=(lambda(step): not in_systemdBuilders(step)),
        hideStepIf=(lambda results, s: results==SKIPPED),
        property="systemdCapability",
        command="echo no"))
    deb_fact.addStep(SetPropertyFromCommand(
        name="systemd",
        doStepIf=(lambda(step): in_systemdBuilders(step)),
        hideStepIf=(lambda results, s: results==SKIPPED),
        property="systemdCapability",
        command="echo yes"))
    deb_fact.addStep(SetPropertyFromCommand(
        name="major_version",
        hideStepIf=(lambda results, s: results==SKIPPED),
        property="majorVersion",
        command=WithProperties("sh -c \"echo '%(branch)s' | sed -e \\\"s/.*\\\\(5\\\\.5\\\\|10\\\\.[0-9]\\\\).*/\\\\1/\\\"\"")))
    deb_fact.addStep(SetPropertyFromCommand(
        name="needs_galera",
        hideStepIf=(lambda results, s: results==SKIPPED),
        property="needsGalera",
        command=WithProperties("case \"%(branch)s\" in *galera* | *5.5-hf* | *10.[1-9]*) echo yes ;; esac")))

#--------------------------------------
# Deb packages: compilation, packaging
#--------------------------------------

    deb_fact.addStep(Compile(
        description=["making", "debs"],
        descriptionDone=["make", "debs"],
        logfiles={"kernel": "kernel_"+port+".log"},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        timeout=3600,
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-build.qcow2"] + args +["--logfile=kernel_"+port+".log", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        ScpSourceIntoVM(port),
        WithProperties("= case '%(branch)s' in *5\\.[123]*) scp -P "+port+" "+ kvm_scpopt +" %(bakery)s.tar.gz buildbot@localhost:buildbot/ ;; esac"),
        WithProperties("""
set -ex
if [ -e ~/libssl-dev*.deb ]; then
  case "%(branch)s" in
    *10.2*|*10.3*)
      sudo dpkg -i ~/libssl-dev*.deb
    ;;
    *)
      sudo dpkg -i ~/libssl1.0-dev*.deb
    ;;
  esac
fi
cd buildbot
mkdir -p debs/binary debs/source
rm -Rf build
mkdir build
cd build
case "%(branch)s" in
*5\\.[123]*)
  tar zxf ../%(bakery)s.tar.gz
  cd %(bakery)s
  bakery/autobake51-deb.sh ../../%(distname)s
  cp `find build-temp-[0-9]*/ -maxdepth 1 -type f` ../../debs/binary/
  ;;
*)
  tar zxf "../%(distname)s"
  cd "%(distdirname)s"
  echo $PATH
  export JAVA_HOME=`ls -d /usr/lib/jvm/java-1.*`
  export AM_EXTRA_MAKEFLAGS=VERBOSE=1
  export DH_BUILD_DDEBS=1
  echo | debian/autobake-deb.sh
  cp `find .. -maxdepth 1 -type f` ../../debs/binary/
  ;;
esac
cd ../../debs
dpkg-scanpackages binary /dev/null | gzip -9c > binary/Packages.gz
dpkg-scansources source /dev/null | gzip -9c > source/Sources.gz
"""),
        "= rm -Rf debs",
        "= scp -r -P "+port+" "+kvm_scpopt+" buildbot@localhost:buildbot/debs .",
        ]))
    addPackageArchiveStep(deb_fact, "debs", "%(tarbuildnum)s")

#---------------------------------
# Deb packages: clean installation
#---------------------------------

    deb_fact.addStep(Test(
        name="install",
        description=["testing", "install"],
        descriptionDone=["test", "install"],
        logfiles={"kernel": "kernel_"+port+".log", "syslog": "daemon.log"},
        warningPattern=impossibleRe,
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2"] + args + ["--logfile=kernel_"+port+".log", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" "+kvm_scpopt+" debs buildbot@localhost:buildbot/",
        WithProperties("""
set -ex
df -kT

dist_name="""+dist_name+"""

dpkg -l | grep -iE 'maria|mysql|galera' || true

if [ "%(needsGalera)s" == "yes" ]
then

  case "%(branch)s" in
    *galera4*)
      if ! wget http://yum.mariadb.org/galera4/repo/deb/dists/"""+version_name+"""
      # Override the location of the library for versions which don't have their own
      then
        if [ "$dist_name" == "debian" ] ; then
          sudo sh -c "echo 'deb http://yum.mariadb.org/galera4/repo/deb stretch main' > /etc/apt/sources.list.d/galera-test-repo.list"
        else
          sudo sh -c "echo 'deb http://yum.mariadb.org/galera4/repo/deb xenial main' > /etc/apt/sources.list.d/galera-test-repo.list"
        fi
      else
        sudo sh -c "echo 'deb http://yum.mariadb.org/galera4/repo/deb """+version_name+""" main' > /etc/apt/sources.list.d/galera-test-repo.list"
      fi
      ;;
    *)
  if ! wget http://yum.mariadb.org/galera/repo/deb/dists/"""+version_name+"""
  # Override the location of the library for versions which don't have their own
  then
    if [ "$dist_name" == "debian" ] ; then
      sudo sh -c "echo 'deb http://yum.mariadb.org/galera/repo/deb stretch main' > /etc/apt/sources.list.d/galera-test-repo.list"
    else
      sudo sh -c "echo 'deb http://yum.mariadb.org/galera/repo/deb xenial main' > /etc/apt/sources.list.d/galera-test-repo.list"
    fi
  else
    sudo sh -c "echo 'deb http://yum.mariadb.org/galera/repo/deb """+version_name+""" main' > /etc/apt/sources.list.d/galera-test-repo.list"
  fi
      ;;
  esac

fi

cd buildbot
chmod -cR go+r debs
# Sometimes apt-get update fails because the repo is being updated.
for i in 1 2 3 4 5 6 7 8 9 10 ; do
  if sudo apt-get update ; then
    break
  fi
  echo "Upgrade warning: apt-get update failed, retrying ($i)"
  sleep 10
done

sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated -y mariadb-`case '%(branch)s' in *galera* | *5.5-hf*) echo galera- ;; esac`server"
case "%(branch)s" in
*10.[12]e*)
  sudo mysql -uroot -e "create database test; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t; drop database test"
  ;;
*)
  mysql -uroot -prootpass -e "create database test; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t; drop database test"
  ;;
esac
case "%(systemdCapability)s" in
yes)
  # Service is installed
  echo "---- Check that service is present ----"
  ls -l /lib/systemd/system/mariadb.service
  # mariadb.service and its synonyms
  systemctl --no-pager status mariadb.service
  systemctl --no-pager status mariadb.service | grep Loaded | grep mariadb.service
  systemctl --no-pager status mariadb
  systemctl --no-pager status mariadb | grep Loaded | grep mariadb.service
  systemctl --no-pager status mysql
  systemctl --no-pager status mysql | grep Loaded | grep mariadb.service
  systemctl --no-pager status mysqld
  systemctl --no-pager status mysqld | grep Loaded | grep mariadb.service
  echo "---- Check permissions - all of the following should fail ----"
  ! systemctl --no-pager --no-ask-password stop mariadb
  ! systemctl --no-pager --no-ask-password condrestart mariadb
  ! systemctl --no-pager --no-ask-password start mariadb
  ! systemctl --no-pager --no-ask-password enable mariadb
  ! systemctl --no-pager --no-ask-password set-environment MYSQLD_OPTS="--unknown-option"
  ! systemctl --no-pager --no-ask-password unset-environment MYSQLD_OPTS
  ! systemctl --no-pager --no-ask-password restart mariadb

  echo "---- Now use proper permissions ---"
  sudo systemctl --no-pager stop mariadb
  ! ps -ef | grep mysqld | grep -v grep
  ## condrestart part 1: does nothing when server is not running
  #sudo systemctl condrestart mariadb
  #!  ps -ef | grep mysqld | grep -v grep
  sudo systemctl --no-pager start mariadb
  systemctl --no-pager is-enabled mariadb
  # MDEV-8956
  #sudo systemctl disable mariadb
  #! systemctl is-enabled mariadb
  #sudo systemctl enable mariadb
  #systemctl is-enabled mariadb

  # set-environment: add an unknown option
  sudo systemctl --no-pager set-environment MYSQLD_OPTS="--unknown-option"
  # condrestart part 2: attempts to restart when server is running (and fails due to unknown option)
  sudo systemctl --no-pager -l status mariadb
  ! sudo systemctl --no-pager condrestart mariadb
  ! sudo systemctl --no-pager -l status mariadb
  # unset-environment
  sudo systemctl --no-pager unset-environment MYSQLD_OPTS
  # Restart (it looks strange because we are investigating a problem)
  sudo systemctl --no-pager restart mariadb || ps -ef | grep mysqld | grep -v grep || sudo systemctl -ln 500 status mariadb

  sudo systemctl --no-pager set-environment MYSQLD_OPTS="--unknown-option"
  ! sudo systemctl --no-pager restart mariadb
  sudo systemctl --no-pager unset-environment MYSQLD_OPTS
  # Status shows proper text
  systemctl --no-pager status mariadb | grep 'MariaDB server is down'
  sudo systemctl --no-pager start mariadb
  systemctl --no-pager status mariadb | grep 'Taking your SQL requests now'
  # See the journal
  sudo systemctl --no-pager -l status mariadb.service
  # Cannot see it without root
  ! journalctl -lxn 100 | grep mysqld
  sudo journalctl -lxn 100 --no-pager | grep mysqld
  # Init.d script
  ls -l /etc/init.d/mysql
  # It does not do the same as systemctl now
  # /etc/init.d/mysql status
  # Sysvinit
  # not on Debian
  # service mariadb status
  # service mysql status
  # service mysqld status
  # chkconfig mariadb
  ls -l /etc/systemd/system/mariadb.service.d/migrated-from-my.cnf-settings.conf
  ;;
no)
  echo "Steps related to systemd will be skipped"
  ;;
*)
  echo "It should never happen, check your configuration (systemdCapability property is not set or is set to a wrong value)"
  ;;
esac
case "%(branch)s" in
*10.[12]e*)
  sudo mysql -uroot -e "select @@version"
  ;;
*)
  mysql -uroot -prootpass -e "select @@version"
  ;;
esac
"""),
        "! rm -f daemon.log; (sudo cat /var/log/daemon.log || sudo cat /var/log/syslog) >daemon.log",
        "!= rm -f daemon.log; scp -P "+port+" "+kvm_scpopt+" buildbot@localhost:daemon.log ."]))


#-------------------------
# Deb packages: MTR tests
#-------------------------

    deb_fact.addStep(getMTR(
            name="mtr",
            description=["running", "default", "MTR", "suites"],
            descriptionDone=["default", "MTR", "suites"],
            test_type="nm",
            test_info="Normal run, no --ps-protocol",
            logfiles={"kernel": "kernel_"+port+".log", "syslog": "daemon.log"},
            mtr_subdir=".",    # Where we scp vardir to
            env={"TERM": "vt102"},
            command=["runvm"] + args + ["--logfile=kernel_"+port+".log", "vm-tmp-"+port+".qcow2",
            WithProperties("""
set -ex
cd buildbot
chmod -cR go+r debs

version_name="""+version_name+"""

# Check that the previous step worked, and we have the installed server
if ! dpkg -l | grep "mariadb-server"
then
  echo "Pre-MTR warning: previous server installation failed, cannot run MTR tests"
  exit
fi

# Starting from 10.1, we'll install all MariaDB* packages rather than only server and test.
# It will allow running tests for plugins which come in separate packages.
# Before 10.1 it is more complicated because of Galera-server which conflicts with the regular server,
# so we won't touch earlier branches

case "%(branch)s" in
*galera*|*5.5-hf*)
# Not sure why 5.5-hf is here, but that's how it was earlier
  packages_to_install="mariadb-galera-test"
  ;;
*5.5*|*10.0*)
  packages_to_install="mariadb-test"
  ;;
*)
  cd debs/binary
  packages_to_install=`ls *.deb | awk -F'_' '{print $1}' | xargs`
  ;;
esac

if [[ "%(majorVersion)s" == "10.1" ]] && [[ "$version_name" == "sid" ]]
then
  echo "Upgrade warning: due to MDEV-14385, cannot install mariadb-test on sid properly, have to pin the local repo"
  # Not sure it works
  sudo sh -c "echo 'Package: *' > /etc/apt/preferences.d/release"
  sudo sh -c "echo 'Pin: origin \"\"' >> /etc/apt/preferences.d/release"
  sudo sh -c "echo 'Pin-Priority: 1001' >> /etc/apt/preferences.d/release"
  
  allow_downgrades="--allow-downgrades"
fi

# Sometimes apt-get update fails because the repo is being updated.
for i in 1 2 3 4 5 6 7 8 9 10 ; do
  if sudo apt-get update ; then
    break
  fi
  echo "Upgrade warning: apt-get update failed, retrying ($i)"
  sleep 10
done

sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated $allow_downgrades -y $packages_to_install"

# Also try to install gdb to get decent stack traces, but don't abort if it does not install
if ! sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated -y gdb"
then
  echo "Could not install gdb, proceeding without it"
fi

cd /usr/share/mysql/mysql-test

# Check whether FEEDBACK plugin is currently usable
if wget --timeout=20 --tries=1 https://mariadb.org/feedback_plugin -O /tmp/feedback_page
then
  feedback_plugin=1
  echo "Feedback page okay, enabling the plugin"
else
  feedback_plugin=0
  echo "Pre-MTR warning"": Feedback page is not okay, disabling the plugin"
fi
rm -f /tmp/feedback_page

res=0
if ! MTR_FEEDBACK_PLUGIN=$feedback_plugin perl mysql-test-run.pl --verbose-restart --vardir="$(readlink -f /dev/shm/var)" --parallel=4 --force --retry=3 --max-save-core=0 --max-save-datadir=1
then
  res=1
fi
rm -rf /home/buildbot/var
cp -r /dev/shm/var /home/buildbot
exit $res
"""),
        "! rm -f daemon.log; (sudo cat /var/log/daemon.log || sudo cat /var/log/syslog) >daemon.log",
        "!= rm -f daemon.log; scp -P "+port+" "+kvm_scpopt+" buildbot@localhost:daemon.log .",
        WithProperties(
              "!= rm -Rf var/ ; scp -rp -P " + port + " " + kvm_scpopt +
              " buildbot@localhost:/home/buildbot/var/ . || :")]))


#----------------------------------
# Deb packages: upgrade from MySQL
# (or whatever Debian provides)
#----------------------------------

    deb_fact.addStep(
        getDebUpgradeStep(kvm_image, "upgrade", args, kvm_scpopt, port, 
                    dist_name, version_name, arch, "default installation",
                    name="upgrade1"
        )
    )

#------------------------------------
# Deb packages: upgrade from MariaDB
#------------------------------------

    deb_fact.addStep(
        getDebUpgradeStep(kvm_image, "upgrade2", args, kvm_scpopt, port, 
                    dist_name, version_name, arch, "MariaDB",
                    name="upgrade2"
        )
    )

#-----------------------------
# Deb packages: minor upgrades
#-----------------------------

    deb_fact.addStep(
        getDebMinorUpgradeStep(kvm_image, args, kvm_scpopt, port, 
                    dist_name, version_name, arch,
                    test_mode="server"
        )
    )

    deb_fact.addStep(
        getDebMinorUpgradeStep(kvm_image, args, kvm_scpopt, port, 
                    dist_name, version_name, arch,
                    test_mode="all"
        )
    )

    deb_fact.addStep(
        getDebMinorUpgradeStep(kvm_image, args, kvm_scpopt, port, 
                    dist_name, version_name, arch,
                    test_mode="deps"
        )
    )

#-------------------------------------------------------------------
# Deb packages: upgrade from default MySQL provided by distribution
#-------------------------------------------------------------------

# Disabled because of MDEV-11978
    deb_fact.addStep(Test(
        name="upgrade4",
        doStepIf=False,
        description=["testing", "upgrade", "from", "Debian's", "packages"],
        descriptionDone=["upgrade", "from", "Debian's", "packages"],
        logfiles={"kernel": "kernel_"+port+".log", "syslog": "daemon.log"},
        warningPattern=impossibleRe,
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2"] + args + ["--logfile=kernel_"+port+".log", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" "+kvm_scpopt+" debs buildbot@localhost:buildbot/",
	WithProperties("""
set -ex
dpkg -l | { grep -iE 'maria|mysql|galera' || true; }

sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup
sudo sh -c 'grep -v "^deb .*file" /etc/apt/sources.list.backup | grep -v "^deb-src .*file" > /etc/apt/sources.list'

# Sometimes apt-get update fails because the repo is being updated.
for i in 1 2 3 4 5 6 7 8 9 10 ; do
  if sudo apt-get update ; then
    break
  fi
  echo "Upgrade warning: apt-get update failed, retrying ($i)"
  sleep 10
done

sudo sh -c 'DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated -y mariadb-server mariadb-client mariadb-test'
dpkg -l | grep -iE 'maria|mysql|galera'

# Some debian packages have unix_socket authentication for local root,
# while others (e.g. 10.0 on jessie) have old-fashion password authentication.
# In the latter case debconf-set-selections will be used upon installation.
# To avoid distinguishing between these two cases, we will first connect as root
# under sudo, but using the password from debconf. If the installation uses unix_socket,
# the password will be ignored and sudo will allow to connect as system root.
# If the installation uses password authentication, sudo won't matter, and the connection
# will use the password. After that, we will create a password-authenticated super-user

sudo mysql -uroot -prootpass -e "create user admin@localhost identified by 'admin'; grant all on *.* to admin@localhost"
mysql -uadmin -padmin --skip-column-names -e "select engine, support, transactions, savepoints from information_schema.engines" | sort > /tmp/engines.old
mysql -uadmin -padmin --skip-column-names -e "show plugins" | sort > /tmp/plugins.old
mysql -uadmin -padmin --skip-column-names -e "select @@version" | awk -F'-' '{ print $1 }' > /tmp/version.old
mysql -uadmin -padmin -e "CREATE DATABASE autoinc; CREATE TABLE autoinc.t_autoinc(a SERIAL) ENGINE=InnoDB SELECT 42 a"
mysql -uadmin -padmin -e "CREATE TABLE autoinc.t_autoinc2(a SERIAL) ENGINE=InnoDB; BEGIN; INSERT INTO autoinc.t_autoinc2 VALUES (NULL),(NULL); ROLLBACK; SHOW CREATE TABLE autoinc.t_autoinc2 \G"

chmod -cR go+r ~/buildbot/debs

# Detect the MariaDB version under test from the package name
# e.g. mariadb-server_5.5.55+maria-1~trusty_all.deb

mariadb_version=`ls ~/buildbot/debs/binary/mariadb-server*all.deb | sed -e 's/.*mariadb-server_\([0-9]*\.[0-9]*\.[0-9]*\)+maria.*/\\1/'`
major_version=`echo $mariadb_version | sed -e 's/^\([0-9]*\.[0-9]*\)\.[0-9]*$/\\1/'`
echo $mariadb_version > /tmp/version.target

echo "We will be upgrading to MariaDB $major_version ($mariadb_version)"

sudo mv /etc/apt/sources.list.backup /etc/apt/sources.list

case $major_version in
10.[1-9])
  # Add MariaDB repo to the source list, because the installation might need galera library
  sudo sh -c "echo 'deb http://mirror2.hs-esslingen.de/mariadb/repo/$major_version/"""+dist_name+""" """+version_name+""" main' >> /etc/apt/sources.list"
  ;;
esac

# Not sure it works
sudo sh -c "echo 'Package: *' > /etc/apt/preferences.d/release"
sudo sh -c "echo 'Pin: origin \"\"' >> /etc/apt/preferences.d/release"
sudo sh -c "echo 'Pin-Priority: 1001' >> /etc/apt/preferences.d/release"

# Sometimes apt-get update fails because the repo is being updated.
for i in 1 2 3 4 5 6 7 8 9 10 ; do
  if sudo apt-get update ; then
    break
  fi
  echo "Upgrade warning: apt-get update failed, retrying ($i)"
  sleep 10
done

sudo sh -c 'DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated -y mariadb-server mariadb-client mariadb-test'

mysql -uadmin -padmin -e "select @@version, @@version_comment"
mysql -uadmin -padmin --skip-column-names -e "select @@version" | awk -F'-' '{ print $1 }' > /tmp/version.new
mysql -uadmin -padmin --skip-column-names -e "INSERT INTO autoinc.t_autoinc SET a=NULL;  SELECT COUNT(*) Expect_2 FROM autoinc.t_autoinc WHERE a>=42"
echo "Prior to MDEV-6076, the next SELECT would return 1. After MDEV-6076, it should be 3"
mysql -uadmin -padmin --skip-column-names -e "INSERT INTO autoinc.t_autoinc2 VALUES (NULL); SELECT * FROM autoinc.t_autoinc2"
sudo cat /var/lib/mysql/mysql_upgrade_info | awk -F'-' '{ print $1 }' > /tmp/version.upgrade
# mysql_upgrade is run automatically in deb packages

echo "Checking systemd capability"
case "%(systemdCapability)s" in
yes)
  ls -l /lib/systemd/system/mariadb.service
  ls -l /etc/systemd/system/mariadb.service.d/migrated-from-my.cnf-settings.conf
  ls -l /etc/init.d/mysql
  systemctl --no-pager status mariadb.service
  systemctl --no-pager status mariadb
  systemctl --no-pager status mysql
  systemctl --no-pager status mysqld
  systemctl --no-pager is-enabled mariadb
  sudo systemctl --no-pager restart mariadb
  systemctl --no-pager status mariadb
  sudo journalctl -lxn 100 --no-pager | grep mysqld
  # It does not do the same as systemctl now
  # /etc/init.d/mysql status
  ;;
no)
  echo "Steps related to systemd will be skipped"
  ;;
*)
  echo "It should never happen, check your configuration (systemdCapability property is not set or is set to a wrong value)"
  ;;
esac

mysql -uadmin -padmin --skip-column-names -e "select engine, support, transactions, savepoints from information_schema.engines" | sort > /tmp/engines.new
mysql -uadmin -padmin --skip-column-names -e "show plugins" | sort > /tmp/plugins.new

cat /tmp/version.old
cat /tmp/version.new
cat /tmp/version.target
cat /tmp/engines.old
cat /tmp/engines.new
cat /tmp/plugins.old
cat /tmp/plugins.new
cat /tmp/version.upgrade

echo "The next line must show a difference between versions, otherwise it's a failure"
echo "It can be a false positive if we forgot to bump version after release,"
echo "or if the tree is based on an old version"
! diff -u /tmp/version.old /tmp/version.new

echo "Also make sure that we installed the version which we expected"
diff -u /tmp/version.target /tmp/version.new
#echo "And check that we haven't lost any engines or plugins"
#diff -u /tmp/engines.old /tmp/engines.new
#diff -u /tmp/plugins.old /tmp/plugins.new
"""),
        "! rm -f daemon.log; (sudo cat /var/log/daemon.log || sudo cat /var/log/syslog) >daemon.log",
        "!= rm -f daemon.log; scp -P "+port+" "+kvm_scpopt+" buildbot@localhost:daemon.log ."]))


    return {'name': name, 'slavenames': slavenames, 'builddir': name, 'factory': deb_fact,
            "nextBuild": myNextBuild,
            "category": catg}

bld_kvm_deb_trusty_amd64 = getDebBuilder("kvm-deb-trusty-amd64", "vm-trusty-amd64", "2293", "qemu64", "ubuntu", "trusty", ramdisk=False)
bld_kvm_deb_trusty_x86 = getDebBuilder("kvm-deb-trusty-x86", "vm-trusty-i386", "2294", "qemu64", "ubuntu", "trusty", ramdisk=False)
bld_kvm_deb_trusty_ppc64le = getDebBuilder("kvm-deb-trusty-ppc64le", "vm-trusty-ppc64le", "2332", "POWER8", "ubuntu", "trusty", slavenames=["p801"], ramdisk=False)
bld_kvm_deb_xenial_amd64 = getDebBuilder("kvm-deb-xenial-amd64", "vm-xenial-amd64", "2323", "qemu64", "ubuntu", "xenial", slavenames=["bb01", "bb02", "bb03", "bb05", "aidi"], ramdisk=False)
bld_kvm_deb_xenial_x86 = getDebBuilder("kvm-deb-xenial-x86", "vm-xenial-i386", "2324", "qemu64", "ubuntu", "xenial", slavenames=["bb01", "bb02", "bb03", "bb05", "aidi"], ramdisk=False)
bld_kvm_deb_xenial_ppc64le = getDebBuilder("kvm-deb-xenial-ppc64le", "vm-xenial-ppc64le", "2335", "POWER8", "ubuntu", "xenial", slavenames=["p801"], ramdisk=False)

bld_kvm_deb_zesty_amd64 = getDebBuilder("kvm-deb-zesty-amd64", "vm-zesty-amd64", "2350", "qemu64", "ubuntu", "zesty", slavenames=["bb01", "bb02", "bb03", "bb05", "aidi"], ramdisk=False)
bld_kvm_deb_zesty_x86 = getDebBuilder("kvm-deb-zesty-x86", "vm-zesty-i386", "2351", "qemu64", "ubuntu", "zesty", slavenames=["bb01", "bb02", "bb03", "bb05", "aidi"], ramdisk=False)

bld_kvm_deb_artful_amd64 = getDebBuilder("kvm-deb-artful-amd64", "vm-artful-amd64", "2356", "qemu64", "ubuntu", "artful", slavenames=["bb01", "bb02", "bb03", "bb05", "aidi"], ramdisk=False)
bld_kvm_deb_artful_x86 = getDebBuilder("kvm-deb-artful-x86", "vm-artful-i386", "2357", "qemu64", "ubuntu", "artful", slavenames=["bb01", "bb02", "bb03", "bb05", "aidi"], ramdisk=False)

bld_kvm_deb_wheezy_amd64 = getDebBuilder("kvm-deb-wheezy-amd64", "vm-wheezy-amd64", "2269", "qemu64", "debian", "wheezy", ramdisk=False)
bld_kvm_deb_wheezy_x86 = getDebBuilder("kvm-deb-wheezy-x86", "vm-wheezy-i386", "2270", "qemu64", "debian", "wheezy", ramdisk=False)

bld_kvm_deb_jessie_amd64 = getDebBuilder("kvm-deb-jessie-amd64", "vm-jessie-amd64", "2315", "qemu64", "debian", "jessie", slavenames=["bb01", "bb02", "bb03", "bb05", "aidi"], ramdisk=False)
bld_kvm_deb_jessie_x86 = getDebBuilder("kvm-deb-jessie-x86", "vm-jessie-i386", "2316", "qemu64", "debian", "jessie", slavenames=["bb01", "bb02", "bb03", "bb05", "aidi"], ramdisk=False)
bld_kvm_deb_jessie_ppc64le = getDebBuilder("kvm-deb-jessie-ppc64le", "vm-jessie-ppc64le", "2336", "POWER8", "debian", "jessie", slavenames=["p801"], ramdisk=False)

bld_kvm_deb_stretch_amd64 = getDebBuilder("kvm-deb-stretch-amd64", "vm-stretch-amd64", "2333", "qemu64", "debian", "stretch", slavenames=["bb01", "bb02", "bb03", "bb05", "aidi"], ramdisk=False)
bld_kvm_deb_stretch_x86 =   getDebBuilder("kvm-deb-stretch-x86",   "vm-stretch-i386",  "2334", "qemu64", "debian", "stretch", slavenames=["bb01", "bb02", "bb03", "bb05", "aidi"], ramdisk=False)
bld_kvm_deb_stretch_ppc64le = getDebBuilder("kvm-deb-stretch-ppc64le",   "vm-stretch-ppc64le",  "2339", "POWER8", "debian", "stretch", slavenames=["p801"], ramdisk=False, catg="experimental")

bld_kvm_deb_sid_amd64 = getDebBuilder("kvm-deb-sid-amd64", "vm-sid-amd64", "2295", "qemu64", "debian", "sid", ramdisk=False, catg="experimental")
bld_kvm_deb_sid_x86 = getDebBuilder("kvm-deb-sid-x86", "vm-sid-i386", "2296", "qemu64", "debian", "sid", ramdisk=False, catg="experimental")

#-------------------------------------------------------------------------------
# Debian package factory for Galera
#-------------------------------------------------------------------------------
def getGalDebBuilder(name, kvm_image, port, cpu, dist_name, version_name, kvmargs=[], slavenames=kvm_slaves, ramdisk=True):

    kvm_build_image = getGaleraBuildImage(kvm_image)

    args= ["--port="+port, "--memory="+memory_def, "--user=buildbot", "--smp=4", "--cpu="+cpu, "--startup-timeout=600"] + kvmargs
    if ramdisk:
        args= args + ["--work-image=/dev/shm/vm-tmp-"+port+".qcow2"]
    deb_fact= factory.BuildFactory()
    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    deb_fact.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))
    deb_fact.addStep(ShellCommand(
        description=["rsyncing", "VMs"],
        descriptionDone=["rsync", "VMs"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+kvm_build_image+".qcow2",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-install.qcow2",
                 "/kvm/vms/"]))
    deb_fact.addStep(Compile(
        description=["making", "debs"],
        descriptionDone=["make", "debs"],
        logfiles={"kernel": "kernel_"+port+".log"},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        timeout=3600,
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_build_image+".qcow2"] + args +["--logfile=kernel_"+port+".log", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("""
set -ex
if [ -e ~/libssl-dev*.deb ]; then
  sudo dpkg -i ~/libssl-dev*.deb
fi
cd buildbot
mkdir -p debs/binary debs/source
chmod -cR go+r debs
git clone -b %(branch)s "https://github.com/MariaDB/galera.git" build
cd build
./scripts/build.sh -p
cp `find ../*.deb -maxdepth 1 -type f` ../debs/binary/
cp `find ../*.changes -maxdepth 1 -type f` ../debs/binary/
cd ../debs
dpkg-scanpackages binary /dev/null | gzip -9c > binary/Packages.gz
dpkg-scansources source /dev/null | gzip -9c > source/Sources.gz
"""),
        "= rm -Rf debs",
        "= scp -r -P "+port+" "+kvm_scpopt+" buildbot@localhost:buildbot/debs .",
        ]))
    addPackageUploadStep(deb_fact, 'debs')
    deb_fact.addStep(Test(
        description=["testing", "install"],
        descriptionDone=["test", "install"],
        logfiles={"kernel": "kernel_"+port+".log", "syslog": "daemon.log"},
        warningPattern=impossibleRe,
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2"] + args + ["--logfile=kernel_"+port+".log", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" "+kvm_scpopt+" debs buildbot@localhost:buildbot/",
        WithProperties("""
set -ex
cd buildbot
chmod -cR go+r debs

# Sometimes apt-get update fails because the repo is being updated.
for i in 1 2 3 4 5 6 7 8 9 10 ; do
  if sudo apt-get update ; then
    break
  fi
  echo "Upgrade warning: apt-get update failed, retrying ($i)"
  sleep 10
done

sudo sh -c "DEBIAN_FRONTEND=noninteractive MYSQLD_STARTUP_TIMEOUT=180 apt-get install --allow-unauthenticated -y galera-3 galera-arbitrator-3"
garbd --version
"""),
        "! rm -f daemon.log; (sudo cat /var/log/daemon.log || sudo cat /var/log/syslog) >daemon.log",
        "!= rm -f daemon.log; scp -P "+port+" "+kvm_scpopt+" buildbot@localhost:daemon.log ."]))

    return {'name': name, 'slavenames': slavenames, 'builddir': name, 'factory': deb_fact,
            "nextBuild": myNextBuild,
            "category": "galera"}

gal_bld_kvm_deb_precise_amd64 = getGalDebBuilder("kvm-deb-precise-amd64-gal", "vm-precise-amd64",
                                     "3022", "qemu64", "ubuntu", "precise", ramdisk=False)
gal_bld_kvm_deb_precise_x86 = getGalDebBuilder("kvm-deb-precise-x86-gal", "vm-precise-i386",
                                     "3023", "qemu64", "ubuntu", "precise")
gal_bld_kvm_deb_trusty_amd64 = getGalDebBuilder("kvm-deb-trusty-amd64-gal", "vm-trusty-amd64",
                                     "3024", "qemu64", "ubuntu", "trusty", ramdisk=False)
gal_bld_kvm_deb_trusty_x86 = getGalDebBuilder("kvm-deb-trusty-x86-gal", "vm-trusty-i386",
                                     "3025", "qemu64", "ubuntu", "trusty", ramdisk=False)
gal_bld_kvm_deb_trusty_ppc64le = getGalDebBuilder("kvm-deb-trusty-ppc64le-gal", "vm-trusty-ppc64le",
                                     "3055", "POWER8", "ubuntu", "trusty", slavenames=["p801"], ramdisk=False)
gal_bld_kvm_deb_wheezy_amd64 = getGalDebBuilder("kvm-deb-wheezy-amd64-gal", "vm-wheezy-amd64",
                                     "3028", "qemu64", "debian", "wheezy", ramdisk=False)
gal_bld_kvm_deb_wheezy_x86 = getGalDebBuilder("kvm-deb-wheezy-x86-gal", "vm-wheezy-i386",
                                     "3029", "qemu64", "debian", "wheezy", ramdisk=False)
gal_bld_kvm_deb_sid_amd64 = getGalDebBuilder("kvm-deb-sid-amd64-gal", "vm-sid-amd64",
                                     "3030", "qemu64", "debian", "sid", ramdisk=False)
gal_bld_kvm_deb_sid_x86 = getGalDebBuilder("kvm-deb-sid-x86-gal", "vm-sid-i386",
                                     "3031", "qemu64", "debian", "sid", ramdisk=False)
gal_bld_kvm_deb_xenial_amd64 = getGalDebBuilder("kvm-deb-xenial-amd64-gal", "vm-xenial-amd64",
                                     "3040", "qemu64", "ubuntu", "xenial", ramdisk=False)
gal_bld_kvm_deb_xenial_x86 = getGalDebBuilder("kvm-deb-xenial-x86-gal", "vm-xenial-i386",
                                     "3041", "qemu64", "ubuntu", "xenial", ramdisk=False)
gal_bld_kvm_deb_xenial_ppc64le = getGalDebBuilder("kvm-deb-xenial-ppc64le-gal", "vm-xenial-ppc64le",
                                     "3049", "POWER8", "ubuntu", "xenial", slavenames=["p801"], ramdisk=False)
gal_bld_kvm_deb_zesty_amd64 = getGalDebBuilder("kvm-deb-zesty-amd64-gal", "vm-zesty-amd64",
                                     "3059", "qemu64", "ubuntu", "zesty", ramdisk=False)
gal_bld_kvm_deb_zesty_x86 = getGalDebBuilder("kvm-deb-zesty-x86-gal", "vm-zesty-i386",
                                     "3060", "qemu64", "ubuntu", "zesty", ramdisk=False)
gal_bld_kvm_deb_artful_amd64 = getGalDebBuilder("kvm-deb-artful-amd64-gal", "vm-artful-amd64",
                                     "3065", "qemu64", "ubuntu", "artful", ramdisk=False)
gal_bld_kvm_deb_artful_x86 = getGalDebBuilder("kvm-deb-artful-x86-gal", "vm-artful-i386",
                                     "3066", "qemu64", "ubuntu", "artful", ramdisk=False)
gal_bld_kvm_deb_jessie_amd64 = getGalDebBuilder("kvm-deb-jessie-amd64-gal", "vm-jessie-amd64",
                                     "3036", "qemu64", "debian", "jessie", ramdisk=False)
gal_bld_kvm_deb_jessie_x86 = getGalDebBuilder("kvm-deb-jessie-x86-gal", "vm-jessie-i386",
                                     "3037", "qemu64", "debian", "jessie", ramdisk=False)
gal_bld_kvm_deb_jessie_ppc64le = getGalDebBuilder("kvm-deb-jessie-ppc64le-gal", "vm-jessie-ppc64le",
                                     "3050", "POWER8", "debian", "jessie", slavenames=["p801"], ramdisk=False)
gal_bld_kvm_deb_stretch_amd64 = getGalDebBuilder("kvm-deb-stretch-amd64-gal", "vm-stretch-amd64",
                                     "3047", "qemu64", "debian", "stretch", ramdisk=False)
gal_bld_kvm_deb_stretch_x86 = getGalDebBuilder("kvm-deb-stretch-x86-gal", "vm-stretch-i386",
                                     "3048", "qemu64", "debian", "stretch", ramdisk=False)
gal_bld_kvm_deb_stretch_ppc64le = getGalDebBuilder("kvm-deb-stretch-ppc64le-gal", "vm-stretch-ppc64le",
                                     "3053", "POWER8", "debian", "stretch", slavenames=["p801"], ramdisk=False)


def getBintarBuilder(name, kvm_image, port, cpu, ramdisk=True, catg="main"):
    args = ["--port="+port, "--memory="+memory_def, "--user=buildbot", "--cpu="+cpu, "--smp=4", "--logfile=kernel_"+port+".log"]
    if ramdisk:
        args = args + ["--work-image=/dev/shm/vm-tmp-"+port+".qcow2"]
    kvm_image_test = kvm_image
    if kvm_image_test == "vm-centos5-amd64":
        kvm_image_test = "vm-centos6-amd64"
    elif kvm_image_test == "vm-centos5-i386":
        kvm_image_test = "vm-centos6-i386"
    bin_fact = factory.BuildFactory()
    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    bin_fact.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))
    bin_fact.addStep(ShellCommand(
        description=["rsyncing", "VMs"],
        descriptionDone=["rsync", "VMs"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-build.qcow2",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image_test+"-install.qcow2",
                 "/kvm/vms/"]))
    bin_fact.addStep(DownloadSourceTarball())
    bin_fact.addStep(FileDownload(
        mastersrc=WithProperties("%(bakerypath)s"),
        slavedest=WithProperties("%(bakery)s.tar.gz"),
        blocksize=524288,
        doStepIf=branch_is_5_123))
    bin_fact.addStep(ShellCommand(
        description=["getting", ".supp"],
        descriptionDone=["get", ".supp"],
        command=["sh", "-c", WithProperties("""
rm -f compiler_warnings.supp
tar zxf "/tmp/buildcache/%(tarbuildnum)s:%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
ls -l compiler_warnings.supp
exit 0  # best-effort, not fatal if no suppression file
""")]))
    bin_fact.addStep(Compile(
        description=["making", "bintar"],
        descriptionDone=["make", "bintar"],
        timeout=3600,
        logfiles={"kernel": "kernel_"+port+".log"},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command=["runvm"] + args + ["--base-image=/kvm/vms/"+kvm_image+"-build.qcow2", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        ScpSourceIntoVM(port),
        WithProperties("= case '%(branch)s' in *5\\.[123]*) scp -P "+port+" "+kvm_scpopt+" %(bakery)s.tar.gz buildbot@localhost:buildbot/ ;; esac"),
        WithProperties("""
set -ex
cd buildbot
rm -Rf build
case "%(branch)s" in
*5\\.[123]*)
  mkdir build
  cd build
  tar zxf ../%(bakery)s.tar.gz
  cd %(bakery)s
  bakery/autobake51-bintar.sh ../../%(distname)s
  ;;
*)
  tar zxf "%(distname)s"
  mv "%(distdirname)s" build
  cd build
  mkdir mkbin
  cd mkbin
  echo $PATH
  echo $SHELL
  if [ -d $HOME/local/lib ] ; then
    export CMAKE_LIBRARY_PATH="$HOME/local/lib"
  fi
  export JAVA_HOME=/usr/lib/jvm/java
  cmake -DBUILD_CONFIG=mysql_release -DWITH_READLINE=1 ..
  make -j4 package VERBOSE=1
  ;;
esac
basename mariadb-*.tar.gz .tar.gz > ../../bindistname.txt
mv "$(cat ../../bindistname.txt).tar.gz" ../
"""),
        WithProperties("= scp -P "+port+" "+kvm_scpopt+" 'buildbot@localhost:buildbot/build/mariadb-*.tar.gz' ."),
        "= scp -P "+port+" "+kvm_scpopt+" buildbot@localhost:buildbot/bindistname.txt .",
]))
    bin_fact.addStep(SetPropertyFromCommand(
        property="bindistname",
        command=["cat", "bindistname.txt"],
        ))
    addPackageArchiveStep(bin_fact, '"%(bindistname)s.tar.gz"', "%(tarbuildnum)s")
    bin_fact.addStep(getMTR(
        description=["testing", "bintar"],
        descriptionDone=["test", "bintar"],
        logfiles={"kernel": "kernel_"+port+".log"},
        mtr_subdir=".",    # Where we scp vardir to
        env={"TERM": "vt102"},
        command=["runvm"] + args + ["--base-image=/kvm/vms/"+kvm_image_test+"-install.qcow2", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("= scp -P "+port+" "+kvm_scpopt+" %(bindistname)s.tar.gz buildbot@localhost:buildbot/"),
        WithProperties("""
set -ex
df -kT
cd buildbot
sudo rm -Rf /usr/local/%(bindistname)s
sudo tar zxf %(bindistname)s.tar.gz -C /usr/local/
cd /usr/local/%(bindistname)s
sudo /usr/sbin/useradd mysql
sudo sudo chown -R mysql .
sudo chgrp -R mysql .
sudo bin/mysql --version
sudo scripts/mysql_install_db --no-defaults --user=mysql
sudo chown -R root .
sudo chown -R mysql data mysql-test

if ldd lib/plugin/ha_connect.so  | grep libodbc.so.1 | grep 'not found' ; then
  if [ -e /usr/lib64/libodbc.so.2 ] ; then
    sudo ln -s /usr/lib64/libodbc.so.2 /usr/lib64/libodbc.so.1
  elif [ -e /usr/lib/libodbc.so.2 ] ; then
    sudo ln -s /usr/lib/libodbc.so.2 /usr/lib/libodbc.so.1
  fi
fi

cd mysql-test
sudo su -s /bin/sh -c "perl mysql-test-run.pl  --verbose-restart --force --parallel=4 --retry=3 --mem --max-save-core=0 --max-save-datadir=1" mysql
"""),
        WithProperties("! sudo chmod -R go+rX /usr/local/%(bindistname)s/mysql-test/var/ || :"),
        WithProperties(
              "!= scp -rp -P " + port + " " + kvm_scpopt +
              " buildbot@localhost:/usr/local/%(bindistname)s/mysql-test/var/ . || :")]))

    return {'name': name, 'slavenames': kvm_slaves, 'builddir': name, 'factory': bin_fact,
            "nextBuild": myNextBuild,
            "category": catg }

bld_kvm_bintar_trusty_amd64 = getBintarBuilder("kvm-bintar-trusty-amd64", "vm-trusty-amd64", "2341", "qemu64", ramdisk=False)
bld_kvm_bintar_trusty_x86 = getBintarBuilder("kvm-bintar-trusty-x86", "vm-trusty-i386", "2342", "qemu64", ramdisk=False)

bld_kvm_bintar_quantal_amd64 = getBintarBuilder("kvm-bintar-quantal-amd64", "vm-quantal-amd64", "2281", "qemu64", ramdisk=False)
bld_kvm_bintar_quantal_x86 = getBintarBuilder("kvm-bintar-quantal-x86", "vm-quantal-i386", "2282", "qemu64", ramdisk=False)

bld_kvm_bintar_centos5_amd64 = getBintarBuilder("kvm-bintar-centos5-amd64", "vm-centos5-amd64", "2285", "qemu64", ramdisk=False)
bld_kvm_bintar_centos5_x86 = getBintarBuilder("kvm-bintar-centos5-x86", "vm-centos5-i386", "2286", "qemu64", ramdisk=False)

f_sol_64_bintar = factory.BuildFactory()
f_sol_64_bintar.addStep(FileDownload(mastersrc=WithProperties("%(tarballpath)s"),
                                     slavedest=WithProperties("%(distname)s"),
                                     blocksize=524288,
                                     ))
f_sol_64_bintar.addStep(ShellCommand(
        description="untarring", descriptionDone="untar",
        command=["sh", "-c", WithProperties("rm -Rf %(distdirname)s && gzip -dc %(distname)s | gtar xf -")]))
f_sol_64_bintar.addStep(getCompileStep(["sh", "-c", WithProperties("cd %(distdirname)s && bash BUILD/compile-solaris-amd64 --extra-configs=--without-plugin_innodb_plugin")],
                                       env={"AM_EXTRA_MAKEFLAGS": "VERBOSE=1"},
                                       subdir="%(distdirname)s/"))
f_sol_64_bintar.addStep(ShellCommand(
        description="packaging", descriptionDone="package",
        command=["sh", "-c", WithProperties("""
set -ex
cd %(distdirname)s
scripts/make_binary_distribution
ORIG_TAR=$(echo mariadb-*.tar.gz)
ORIG_DIR=$(basename ${ORIG_TAR} .tar.gz)
NEW_DIR="$(echo "${ORIG_DIR}" | sed -e 's/-MariaDB//')"
NEW_TAR="${NEW_DIR}.tar.gz"
if [ "$ORIG_DIR" != "$NEW_DIR" ] ; then
  rm -Rf $ORIG_DIR
  tar zxf $ORIG_TAR
  mv $ORIG_DIR "${NEW_DIR}"
  tar zcf "${NEW_TAR}" "${NEW_DIR}/"
fi
echo "${NEW_TAR}" > ../bindistname.txt
""")]))
f_sol_64_bintar.addStep(SetPropertyFromCommand(
        property="bindistname",
        command=["cat", "bindistname.txt"],
        ))
addPackageArchiveStep(f_sol_64_bintar, '"%(distdirname)s/%(bindistname)s"', "%(tarbuildnum)s")
f_sol_64_bintar.addStep(getMTR(
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3 ")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

bld_opensolaris_511_bintar = {'name': 'opensolaris-511-bintar',
                              'slavename': 'opensolaris-x86',
                              'builddir': 'opensolaris-511-bintar',
                              'factory': f_sol_64_bintar,
                              "nextBuild": myNextBuild,
                              "category": "experimental",
                              }

# Code coverage

f_gcov= factory.BuildFactory()
f_gcov.addStep(maybe_bzr_checkout)
f_gcov.addStep(maybe_git_checkout)
f_gcov.addStep(getCompileStep(["BUILD/compile-pentium-gcov"],
                              env={"AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}));
f_gcov.addStep(ShellCommand(
	description="remove-previous-report",
	command=["sh", "-c", WithProperties("rm -Rf /var/www/html/lcov/%(branch)s /home/buildbot/tmp/gcov-%(branch)s.info")]
))

f_gcov.addStep(ShellCommand(
	description="lcov-zerocounters",
	command=["sh", "-c", WithProperties("lcov --directory . --zerocounters")]
))

f_gcov.addStep(getMTR(
	test_type="mtr-normal", test_info="Standard test suite",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
	command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --mysqld=--loose-sync-sys=0 --mysqld=--loose_innodb_flush_log_at_trx_commit=2 --force --retry=1  --parallel=3 --testcase-timeout=45 --max-test-fail=100 --skip-combinations --mysqld=--loose-innodb-fast-shutdown=2 --nowarnings --max-save-core=0 --max-save-datadir=1"],
	))
f_gcov.addStep(getMTR(
	test_type="mtr-xtra", test_info="Some additional test suites",
	command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --mysqld=--loose-sync-sys=0 --mysqld=--loose_innodb_flush_log_at_trx_commit=2 --suite=funcs_1,funcs_2,stress,jp --force --retry=1  --parallel=3 --testcase-timeout=45 --max-test-fail=200 --mysqld=--loose-innodb-fast-shutdown=2 --nowarnings --max-save-core=0 --max-save-datadir=1"],
))

f_gcov.addStep(ShellCommand(
	description="lcov-capture",
	command=["sh", "-c", WithProperties("lcov --directory . --capture --output-file /home/buildbot/tmp/gcov-%(branch)s.info")]
))

f_gcov.addStep(ShellCommand(
	description="lcov-genhtml",
	command=["sh", "-c", WithProperties("genhtml --output-directory=/var/www/html/lcov/%(branch)s /home/buildbot/tmp/gcov-%(branch)s.info")]
))

f_gcov.addStep(ShellCommand(
	description="lcov-chmod",
	command=["sh", "-c", WithProperties("chmod -R o+rx /var/www/html/lcov/%(branch)s")]
))


bld_gcov = {"name": "gcov",
               "slavename": "centos56-quality2",
               "builddir": "perpush-gcov",
               "factory": f_gcov,
               "nextBuild": myNextBuild,
               "category": "experimental",
               }

# End of code coverage

# Builder that compiles DBD::mysql, PHP and the like

f_compile_connectors = factory.BuildFactory()

f_compile_connectors.addStep(maybe_bzr_checkout)
f_compile_connectors.addStep(maybe_git_checkout)
f_compile_connectors.addStep(getCompileStep(["BUILD/compile-pentium64-max"],
                                            env={"EXTRA_FLAGS": "-DFORCE_INIT_OF_VARS",
                                                 "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}));

f_compile_connectors.addStep(ShellCommand(
	name="start-test-mysqld",
	command=["sh", "-c", "cd mysql-test && MTR_VERSION=1 perl mysql-test-run.pl  --verbose-restart --start-and-exit --mysqld=--skip-safemalloc --master_port=43210 1st"]
))

# DBD::MySQL

f_compile_connectors.addStep(ShellCommand(
	name="unpack-dbi-mysql",
	command=["sh", "-c", "cd .. && tar xfvz DBD-mysql-4.018.tar.gz"]
));

f_compile_connectors.addStep(ShellCommand(
	name="configure-dbi-mysql",
	command=["sh", "-c", "cd ../DBD-mysql-4.018 && perl Makefile.PL --mysql_config=../build/scripts/mysql_config --with-mysql=../build/ --libs='-L../build/libmysql/.libs/ -lmysqlclient -lz -lcrypt -lnsl -lm' --cflags='-I../build/include -g  -Wextra -Wwrite-strings -g3 -gdwarf-2 -UFORCE_INIT_OF_VARS -DUNIV_LINUX' --testhost=127.0.0.1 --testport=43210 --testuser=root"]
));

f_compile_connectors.addStep(ShellCommand(
	name="compile-dbi-mysql",
	command=["sh", "-c", "cd ../DBD-mysql-4.018 && make"]
));

f_compile_connectors.addStep(ShellCommand(
	name="test-dbi-mysql",
	command=["sh", "-c", "cd ../DBD-mysql-4.018 && PERL5LIB=lib LD_LIBRARY_PATH=./blib/arch/auto/DBD/mysql/:../build/libmysql/.libs/ make test"]
));

f_compile_connectors.addStep(ShellCommand(
	name="cleanup-dbi-mysql",
	command=["sh", "-c", "rm -rf ../DBD-mysql-4.018/"]
));

#
# PHP with --with-mysql
#

f_compile_connectors.addStep(ShellCommand(
	name="unpack-php-oldconnector",
	command=["sh", "-c", "cd .. && tar xfvz php-5.3.3.tar.gz"]
));

f_compile_connectors.addStep(ShellCommand(
	name="configure-php-oldconnector",
	command=["sh", "-c", "mkdir lib && ln -s ../libmysql/.libs/ lib/mysql && cd ../php-5.3.3 && ./configure --with-mysql=../build"]
));

f_compile_connectors.addStep(ShellCommand(
	name="compile-php-oldconnector",
	command=["sh", "-c", "cd ../php-5.3.3 && make -j 4"]
));

f_compile_connectors.addStep(ShellCommand(
	name="test-php-oldconnector",
	command=["sh", "-c", 'cd ../php-5.3.3 && REPORT_EXIT_STATUS=1 TEST_PHP_EXECUTABLE=./sapi/cli/php MYSQL_TEST_HOST=127.0.0.1 MYSQL_TEST_PORT=43210 ./sapi/cli/php run-tests.php -r ../workable_tests.php-mysql --show-diff']
));

f_compile_connectors.addStep(ShellCommand(
        name="cleanup-php-newconnector",
	command=["sh", "-c", "rm -rf ../php-5.3.3/"]
));

#
# PHP with --with-mysqli
#

f_compile_connectors.addStep(ShellCommand(
	name="unpack-php-newconnector",
	command=["sh", "-c", "cd .. && tar xfvz php-5.3.3.tar.gz"]
));

f_compile_connectors.addStep(ShellCommand(
	name="configure-php-newconnector",
	command=["sh", "-c", "cd ../php-5.3.3 && ./configure --with-mysqli=../fake_mysql_config"]
));

f_compile_connectors.addStep(ShellCommand(
	name="compile-php-newconnector",
	command=["sh", "-c", "cd ../php-5.3.3 && C_INCLUDE_PATH=../build/include/ make -j 4"]
));

f_compile_connectors.addStep(ShellCommand(
	name="test-php-newconnector",
	command=["sh", "-c", 'cd ../php-5.3.3 && REPORT_EXIT_STATUS=1 TEST_PHP_EXECUTABLE=./sapi/cli/php MYSQL_TEST_HOST=127.0.0.1 MYSQL_TEST_PORT=43210 ./sapi/cli/php run-tests.php -r ../workable_tests.php-mysqli --show-diff']
));

f_compile_connectors.addStep(ShellCommand(
	name="cleanup-php-newconnector",
	command=["sh", "-c", "rm -rf ../php-5.3.3/"]
));

f_compile_connectors.addStep(ShellCommand(
	name="stop-test-mysqld",
	command=["sh", "-c", "./client/mysqladmin -uroot --protocol=tcp --port=43210 shutdown"],
	alwaysRun=True
));

bld_compile_connectors = {"name": "compile-connectors",
               "slavename": "centos56-quality2",
               "builddir": "compile-connectors",
               "factory": f_compile_connectors,
               "nextBuild": myNextBuild,
               "category": "connectors"
}

# end of compile-connectors/DBD::mysql/PHP builder



f_customer_data = factory.BuildFactory()

f_customer_data.addStep(maybe_bzr_checkout)
f_customer_data.addStep(maybe_git_checkout)
f_customer_data.addStep(getCompileStep(["BUILD/compile-pentium64-max"],
                                            env={"EXTRA_FLAGS": "-DFORCE_INIT_OF_VARS",
                                                 "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}));

f_customer_data.addStep(ShellCommand(
	name="customer1-start-server",
	command=["sh", "-c", "cd mysql-test && perl mysql-test-run.pl  --verbose-restart --start-and-exit --mysqld=--loose-skip-safemalloc --mtr-build-thread=321 1st"]
))

f_customer_data.addStep(ShellCommand(
	name="customer1-create-aria",
	command=["sh", "-c", "./client/mysql -uroot --protocol=tcp --port=16420 test  < ../customer1/create-aria.sql 2>&1 > customer1-create-aria.log"]
))

f_customer_data.addStep(ShellCommand(
	name="customer1-insert",
	command=["sh", "-c", "./client/mysql -uroot --protocol=tcp --port=16420 test  < ../customer1/test-insert.sql 2>&1 > customer1-test-insert.log"]
))

f_customer_data.addStep(ShellCommand(
	name="customer1-update",
	command=["sh", "-c", "./client/mysql -uroot --protocol=tcp --port=16420 test  < ../customer1/test-update.sql 2>&1 > customer1-test-update.log"]
))

f_customer_data.addStep(ShellCommand(
	name="customer1-stop-server",
	command=["sh", "-c", "./client/mysqladmin -uroot --protocol=tcp --port=16420 shutdown"],
	alwaysRun=True
));

f_customer_data.addStep(ShellCommand(
	name="customer1-check-tables",
	command=["sh", "-c", "./storage/maria/aria_chk --verbose --extend-check mysql-test/var/mysqld.1/data/test/*.MAI --datadir mysql-test/var/mysqld.1/data/ 2>&1 > customer1-test-check.log"]
))

bld_customer_data = {"name": "test-customer-data",
               "slavename": "centos56-quality2",
               "builddir": "test-customer-data",
               "factory": f_customer_data,
               "nextBuild": myNextBuild,
               "category": "experimental"
}


# Builder that compiles Net::HandlerSocket and tests handlersocket

f_test_handlersocket = factory.BuildFactory()

f_test_handlersocket.addStep(maybe_bzr_checkout)
f_test_handlersocket.addStep(maybe_git_checkout)

f_test_handlersocket.addStep(
     getCompileStep(["sh", "-c", "make clean || rm -f CMakeCache.txt && cmake . -DCMAKE_BUILD_TYPE=Debug && make -j3"],
     doStepIf=branch_is_5_5_or_later)
)

f_test_handlersocket.addStep(ShellCommand(
	name="build-perl-handlersocket",
        command=["sh", "-c", WithProperties("""
set -ex
cd plugin/handler_socket/perl-Net-HandlerSocket
if [ ! -e Makefile.PL ] ; then
  sed -e "s/LIBS.*/LIBS => ['-L.. -L..\/libhsclient -lhsclient'],/g" Makefile.PL.in | sed -e "s/INC.*/INC => '-I..\/libhsclient -I..\/..\/..\/include',/g" > Makefile.PL
fi
perl Makefile.PL
make
LD_LIBRARY_PATH=../libhsclient/.libs make test
""")]))

f_test_handlersocket.addStep(ShellCommand(
	name="start-mysqld",
	command=["sh", "-c", "cd mysql-test && LD_LIBRARY_PATH=../plugin/handler_socket/libhsclient/.libs perl mysql-test-run.pl --verbose-restart --start-and-exit 1st --mysqld=--loose-handlersocket_port=9998 --mysqld=--loose-handlersocket_port_wr=9999 --mtr-build-thread=963 --mysqld=--innodb"]
))

f_test_handlersocket.addStep(ShellCommand(
	name="install-handlersocket",
	command=["sh", "-c", "client/mysql -uroot --protocol=tcp --port=29260 -e 'INSTALL PLUGIN handlersocket soname \"handlersocket.so\"'"]
))

f_test_handlersocket.addStep(ShellCommand(
	name="show-handlersocket-variables",
	command=["sh", "-c", "client/mysql -uroot --protocol=tcp --port=29260 -e 'SHOW VARIABLES LIKE \"%handlersocket%\"'"]
))

f_test_handlersocket.addStep(ShellCommand(
	name="test-handlersocket",
	command=["sh", "-c", "cd plugin/handler_socket/regtest/test_01_lib && MYHOST=127.0.0.1 MYPORT=29260 LD_LIBRARY_PATH=../../libhsclient/.libs/ PERL5LIB=../common:../../perl-Net-HandlerSocket/lib:../../perl-Net-HandlerSocket/blib/arch/auto/Net/HandlerSocket/ ./run.sh"]
))

f_test_handlersocket.addStep(ShellCommand(
	name="show-innodb-status",
	command=["sh", "-c", "client/mysql -uroot --protocol=tcp --port=29260 -e 'SHOW STATUS LIKE \"%innodb%\"'"]
))

f_test_handlersocket.addStep(ShellCommand(
	name="shutdown-mysqld",
	command=["sh", "-c", "client/mysqladmin -uroot --protocol=tcp --port=29260 shutdown"],
	alwaysRun=True
))

bld_test_handlersocket = {"name": "test-handlersocket",
               "slavename": "centos56-quality2",
               "builddir": "test-handlersocket",
               "factory": f_test_handlersocket,
               "nextBuild": myNextBuild,
               "category": "experimental"
}

# End of handlersocket build


def do_step_win(step):
	return branch_is_not_galera(step) and branch_is_not_connector(step)

def make_win_build_factory(generator,config,do_package, test_spec=" --suite=main,innodb,plugins --parallel=4 ",publish_root_dir=""):
	f = factory.BuildFactory()
	f.addStep(ShellCommand(
        name= "close_open_handles",
        command=["dojob", "unlock_handles.bat" ],
        alwaysRun=True
	));
	f.addStep(ShellCommand(
        name= "remove_build_dir",
        command=["dojob", "rm -rf * || exit 0" ],
	doStepIf=do_step_win
    	));
	if do_package:
		f.addStep(FileDownload(
		mastersrc=WithProperties("%(tarballpath)s"),
		slavedest=WithProperties("%(distdirname)s.tar.gz"),
        	blocksize=524288,
		doStepIf=do_step_win
		))
		f.addStep(ShellCommand(
		name = "unpack_tarball",
		command=["dojob", WithProperties("cmake -E tar xfz %(distdirname)s.tar.gz && move %(distdirname)s src")],
		doStepIf=do_step_win
		))
	else:
    		f.addStep(ShellCommand(
            	name= "git_checkout",
		command=["dojob", WithProperties("git clone %(repository)s src && cd  src && git reset --hard %(revision)s")],
            	timeout=7200,
		doStepIf=do_step_win
    		));
	cmake_extra_args = ' -DBUILD_CONFIG=mysql_release -DCOMPILATION_COMMENT="mariadb.org binary distribution" -DWITH_THIRD_PARTY=HeidiSQL -DWITH_EMBEDDED_SERVER=0 -DSIGNCODE=ON -DWITH_UNIT_TESTS=0' if do_package else ' -DPLUGIN_ROCKSDB=NO -Wno-dev'
        f.addStep(Compile(
		name = "cmake",
		command=["dojob", WithProperties(("cmake src " if not generator else "cmake src -G \"" + generator + "\"") + cmake_extra_args)],
		warningPattern=vsWarningPattern,
		warningExtractor=Compile.warnExtractFromRegexpGroups,
		doStepIf=do_step_win
	));

	f.addStep(Compile(
		name = "build",
		command=["dojob", WithProperties("cmake --build  .  --config " + config)],
		warningPattern=vsWarningPattern,
		warningExtractor=Compile.warnExtractFromRegexpGroups,
		doStepIf=do_step_win
	));

	if do_package:
		f.addStep(Compile(
			name = "package",
			command=["dojob", WithProperties("cmake --build  .  --config " + config + " --target package " + " && cmake --build  .  --config " + config + " --target MSI")],
			warningPattern=vsWarningPattern,
			warningExtractor=Compile.warnExtractFromRegexpGroups,
			timeout=3600,
			doStepIf=lambda(step): in_savedPackageBranches(step) and do_step_win(step)
		));
		export_dir = publish_root_dir +  "\\%(branch)s\\build-%(tarbuildnum)s\\%(buildername)s"
		f.addStep(ShellCommand(
			name = "publish",
			doStepIf=lambda(step): in_savedPackageBranches(step) and do_step_win(step),
			command=["dojob", WithProperties("(if exist " + export_dir + "  (rd /s /q " + export_dir + ")) && mkdir " + export_dir + " && xcopy /y /f *.zip " + export_dir + " && xcopy /y /f *.msi " + export_dir + " && md5sums " + export_dir)],
		));

	f.addStep(getMTR(
		test_type="nm", test_info="Normal mode",
		timeout=604800,
		env={"MTR_FEEDBACK_PLUGIN": "1"},
		command=["dojob", WithProperties("if exist src\\mysql-test\\collections\\buildbot_suites.bat (cd mysql-test && ..\\src\mysql-test\\collections\\buildbot_suites.bat) else (cd mysql-test && perl mysql-test-run.pl  --verbose-restart --force  --testcase-timeout=10000 --suite-timeout=10000 --max-test-fail=500 --retry=3 " + test_spec + " )" )],
		doStepIf=do_step_win
	));

        f.addStep(getMTR(
                test_type="extra", test_info="connect engine", description=["connect engine"],
                command=["dojob", WithProperties("cd mysql-test &&  perl mysql-test-run.pl  --verbose-restart --force  --testcase-timeout=45 --suite-timeout=600  --retry=3 --suites=connect" )],
                doStepIf=lambda(step): step.getProperty("branch").startswith("ob-") and do_step_win(step)
        ));

	return f


bld_win32_debug = {
	'name': "win32-debug",
	'slavename': "bb-win-azure-2",
	'builddir': "D:\\win32-debug",
	'factory':  make_win_build_factory(generator='Visual Studio 15 2017',config='Debug',do_package=False),
        'nextBuild': myNextBuild,
	'category': "main"
}

bld_winx64_debug = {
	'name': "winx64-debug",
	'slavename': "bb-win-azure-2",
	'builddir': "D:\\winx64-debug",
	'factory': make_win_build_factory(generator='Visual Studio 15 2017 Win64',config='Debug',do_package=False),
        'nextBuild': myNextBuild,
	'category': "main"
}

bld_win32_packages = {
	'name': "win32-packages",
	'slavename': "bb-win-azure",
	'builddir': "D:\\win32-packages",
        'factory':  make_win_build_factory(generator='Visual Studio 15 2017',config='RelWithDebInfo',do_package=True, publish_root_dir="E:\\packs"),
        "nextBuild": myNextBuild,
	"category": "main"
}

bld_winx64_packages = {
	'name': "winx64-packages",
	'slavename': "bb-win-azure",
	'builddir': "D:\\winx64-packages",
	'factory': make_win_build_factory(generator='Visual Studio 15 2017 Win64',config='RelWithDebInfo',do_package=True, publish_root_dir="E:\\packs"),
        "nextBuild": myNextBuild,
	"category": "main"
}

# Attention! bld_kvm_qa_innodb builder uses port=10710
#            bld_qa_bb_experiments builder uses port=10711
#            bld_kvm_qa_linux builder uses port=10712
execfile("/etc/buildbot/builders/qa/qa_builders.py");

f_win_jdbc = factory.BuildFactory()
f_win_jdbc.addStep(ShellCommand(
	name = "bzr_prepare",
	command=["dojob", WithProperties("bzr init-repo c:\\buildbot\\%(buildername)s || exit 0")]
));

f_win_jdbc.addStep(ShellCommand(
        name = "remove_old_build",
        command=["dojob", "rm -rf" ,
         WithProperties("c:\\buildbot\\%(buildername)s\\build")],
        timeout = 4*3600,
        haltOnFailure = True
));

f_win_jdbc.addStep(ShellCommand(
        name = "bzr_checkout",
        command=["dojob", "bzr" ,"checkout", "-r", WithProperties("%(revision)s"), WithProperties("lp:%(repository)s"), WithProperties("c:\\buildbot\\%(buildername)s\\build")],
        timeout = 4*3600,
        haltOnFailure = True
));

f_win_jdbc.addStep(ShellCommand(
	name= "build_package",
	command=["dojob",
        WithProperties("cd c:\\buildbot\\%(buildername)s\\build && build_release")
        ],
        haltOnFailure = True
	));

f_win_jdbc.addStep(ShellCommand(
        name= "create_publish_dir",
        command=["dojob",
        WithProperties("mkdir c:\\build_archive\\%(branch)s\\%(revision)s || exit 0")]
        ))

f_win_jdbc.addStep(ShellCommand(
        name= "publish",
        command=["dojob",
        WithProperties("cd c:\\buildbot\\%(buildername)s\\build && xcopy /y /f target\*.jar c:\\build_archive\\%(branch)s\\%(revision)s && xcopy /y /f *.tar.gz c:\\build_archive\\%(branch)s\\%(revision)s &&  md5sums c:/build_archive/%(branch)s/%(revision)s")]
        ))

f_win_jdbc.addStep(ShellCommand(
        name= "create_upload_dir",
        command=["dojob",
        WithProperties("mkdir c:\\bzr\\bb-win32\\win-jdbc\\build\\%(revision)s && xcopy /y /f c:\\build_archive\\%(branch)s\\%(revision)s\\* c:\\bzr\\bb-win32\\win-jdbc\\build\\%(revision)s")]
        ))

addPackageUploadStepWin(f_win_jdbc, 'win')


bld_win_jdbc = {
        'name': "win-jdbc",
        'slavename': "bb-win32",
        'builddir': "win-jdbc",
        'factory': f_win_jdbc,
        'category': "experimental"
}

f_win_connector_c = factory.BuildFactory()

f_win_connector_c.addStep(ShellCommand(
        name = "remove_old_build",
        command=["dojob", "rm -rf" ,
         WithProperties("d:\\buildbot\\%(buildername)s\\build")],
        timeout = 4*3600,
        haltOnFailure = True
));

f_win_connector_c.addStep(ShellCommand(
        name= "git_checkout",
        command=["dojob", WithProperties("rm -rf src && git clone -b %(branch)s %(repository)s src && cd src && git reset --hard %(revision)s && cd ..")],
        timeout=7200,
	doStepIf=do_step_win
    	));

f_win_connector_c.addStep(ShellCommand(
	name= "build_package32-debug",
	command=["dojob",
        WithProperties("rm -rf win32 && mkdir win32 && cd win32 && cmake ..\\src -G \"Visual Studio 14 2015\" -DCMAKE_BUILD_TYPE=Debug && cmake --build . --config Debug --target package")
        ],
        haltOnFailure = True
	));
f_win_connector_c.addStep(ShellCommand(
	name= "build_package32",
	command=["dojob",
        WithProperties("cd win32 && del CMakeCache.txt && cmake ..\\src -G \"Visual Studio 14 2015\" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_SIGNCODE=1 && cmake --build . --clean-first --config RelWithDebInfo --target package")
        ],
        haltOnFailure = True
	));
f_win_connector_c.addStep(ShellCommand(
	name= "build_package64-debug",
	command=["dojob",
        WithProperties("rm -rf win64 && mkdir win64 && cd win64 && cmake ..\\src -G \"Visual Studio 14 2015 Win64\" -DCMAKE_BUILD_TYPE=Debug && cmake --build . --config Debug --target package")
        ],
        haltOnFailure = True
	));
f_win_connector_c.addStep(ShellCommand(
	name= "build_package64",
	command=["dojob",
        WithProperties("cd win64 && del CMakeCache.txt && cmake ..\\src -G \"Visual Studio 14 2015 Win64\" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_SIGNCODE=1 && cmake --build . --clean-first --config RelWithDebInfo --target package")
        ],
        haltOnFailure = True
	));
f_win_connector_c.addStep(ShellCommand(
        name= "create_publish_dir",
        command=["dojob",
        WithProperties("mkdir c:\\build_archive\\%(buildername)s\%(branch)s\\%(revision)s || exit 0")]
        ))

f_win_connector_c.addStep(ShellCommand(
        name= "publish_win32",
        command=["dojob",
        WithProperties("cd win32 && xcopy /y /f win\packaging\*.msi c:\\build_archive\\%(buildername)s\\%(branch)s\\%(revision)s &&  md5sums c:/build_archive/%(buildername)s/%(branch)s/%(revision)s")]
        ))

f_win_connector_c.addStep(ShellCommand(
        name= "publish_win64",
        command=["dojob",
        WithProperties("cd win64 && xcopy /y /f win\packaging\*.msi c:\\build_archive\\%(buildername)s\\%(branch)s\\%(revision)s &&  md5sums c:/build_archive/%(buildername)s/%(branch)s/%(revision)s")]
        ))

f_win_connector_c.addStep(ShellCommand(
        name= "create_upload_dir",
        command=["dojob",
        WithProperties("if not exist \"c:\\bb\\connector-c\\build\\%(revision)s\" mkdir c:\\bb\\connector-c\\build\\%(revision)s && xcopy /y /f c:\\build_archive\\%(buildername)s\\%(branch)s\\%(revision)s\\* c:\\bb\\connector-c\\build\\%(revision)s")]
        ))

addPackageUploadStepWin(f_win_connector_c, 'win')

bld_win_connector_c = {
        'name': "win-connector_c",
        'slavename': "win-connectors",
        'builddir': "connector-c",
        'factory': f_win_connector_c,
        'category': "connectors"
}

f_win_connector_c_3 = factory.BuildFactory()

f_win_connector_c_3.addStep(ShellCommand(
        name = "remove_old_build",
        command=["dojob", "rm -rf" ,
         WithProperties("d:\\buildbot\\%(buildername)s\\build")],
        timeout = 4*3600,
        haltOnFailure = True
));

f_win_connector_c_3.addStep(ShellCommand(
        name= "git_checkout",
        command=["dojob", WithProperties("rm -rf src && git clone -b %(branch)s %(repository)s src && cd src && git reset --hard %(revision)s && cd ..")],
        timeout=7200,
	doStepIf=do_step_win
    	));


f_win_connector_c_3.addStep(ShellCommand(
	name="create_dir",
	command=["dojob",
	WithProperties("rm win32 -rf && rm win64 -rf && mkdir win32 && mkdir win64")
	],
	haltOnFailure = False
	));

f_win_connector_c_3.addStep(ShellCommand(
        name= "build_package32",
        env={'PATH': "c:\\tools\\curl\\lib;${PATH}"},
        command=["dojob",
        WithProperties("cd win32 && del CMakeCache.txt && cmake ..\\src -G \"Visual Studio 14 2015\" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_SSL=SCHANNEL -DWITH_SIGNCODE=1 -DWITH_MSI=ON  -DCURL_INCLUDE_DIR=c:\\tools\\curl\\include && cmake --build . --clean-first --config RelWithDebInfo --target package")
        ],
        haltOnFailure = True
        ));

f_win_connector_c_3.addStep(ShellCommand(
        name= "build_package64",
        env={'PATH': "c:\\tools\\curl\\lib64;${PATH}"},
        command=["dojob",
        WithProperties("cd win64 && del CMakeCache.txt && cmake ..\\src -G \"Visual Studio 14 2015 Win64\" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_SSL=SCHANNEL -DWITH_SIGNCODE=1 -DWITH_MSI=ON -DCURL_INCLUDE_DIR=c:\\tools\\curl\\include && cmake --build . --clean-first --config RelWithDebInfo --target package")
        ],
        haltOnFailure = True
        ));

f_win_connector_c_3.addStep(ShellCommand(
        name= "create_publish_dir",
        command=["dojob",
        WithProperties("mkdir c:\\build_archive\\%(buildername)s\%(branch)s\\%(revision)s || exit 0")]
        ))

f_win_connector_c_3.addStep(ShellCommand(
        name= "publish_win32",
        command=["dojob",
        WithProperties("cd win32 && xcopy /y /f win\packaging\*.msi c:\\build_archive\\%(buildername)s\\%(branch)s\\%(revision)s &&  md5sums c:/build_archive/%(buildername)s/%(branch)s/%(revision)s")]
        ))

f_win_connector_c_3.addStep(ShellCommand(
        name= "publish_win64",
        command=["dojob",
        WithProperties("cd win64 && xcopy /y /f win\packaging\*.msi c:\\build_archive\\%(buildername)s\\%(branch)s\\%(revision)s &&  md5sums c:/build_archive/%(buildername)s/%(branch)s/%(revision)s")]
        ))

f_win_connector_c_3.addStep(ShellCommand(
        name= "create_upload_dir",
        command=["dojob",
        WithProperties("if not exist \"c:\\bb\\connector_c_3\\build\\%(revision)s\" mkdir c:\\bb\\connector_c_3\\build\\%(revision)s && xcopy /y /f c:\\build_archive\\%(buildername)s\\%(branch)s\\%(revision)s\\* c:\\bb\\connector_c_3\\build\\%(revision)s")]
        ))

addPackageUploadStepWin(f_win_connector_c_3, 'win')

bld_win_connector_c_3 = {
        'name': "win-connector_c_3",
        'slavename': "win-connectors",
        'builddir': "connector_c_3",
        'factory': f_win_connector_c_3,
        'category': "connectors"
}


f_connector_c= factory.BuildFactory()
f_connector_c.addStep(
                  ShellCommand(name="clean", command=["sh", "-c", WithProperties("""
rm -Rf build
""")]))
f_connector_c.addStep(maybe_bzr_checkout)
f_connector_c.addStep(maybe_git_checkout)

f_connector_c.addStep(ShellCommand(name="build", command=["sh", "-c", WithProperties("""
cmake . -DCMAKE_BUILD_TYPE=RelWithDebInfo
cmake --build . --config RelWithDebInfo --target package
""")]))

def bld_linux_connector_c(name, port, kvm_image):
    args= ["--port="+port, "--memory="+memory_def, "--user=buildbot", "--smp=4", "--cpu=qemu64"]
    linux_connector_c= factory.BuildFactory()
    linux_connector_c.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))
    linux_connector_c.addStep(ShellCommand(
        description=["rsyncing", "VMs"],
        descriptionDone=["rsync", "VMs"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-build.qcow2",
                 "/kvm/vms/"]))
    linux_connector_c.addStep(Compile(
        description=["building", "linux-connctor_c"],
        descriptionDone=["build", "linux-connctor_c"],
        timeout=3600,
        env={"TERM": "vt102"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-build.qcow2"] + args +["vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("""
set -ex
gcc --version
uname -a
rm -rf %(buildername)s
mkdir %(buildername)s
cd %(buildername)s
rm -rf build
#sudo apt-get -y install git
#time bzr co "lp:~maria-captains/mariadb-native-client/trunk" build
git clone --depth 1 -b %(branch)s "https://github.com/MariaDB/mariadb-connector-c.git" build
cd build
cmake . -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGIT_BUILD_SRCPKG=1
cmake --build . --config RelWithDebInfo --target package
make package
ls -l *.tar.gz
ls -l *.zip
"""),
        "= scp -r -P "+port+" "+kvm_scpopt+" buildbot@localhost:/home/buildbot/" + name + "/build/mariadb*tar.gz .",
        "= scp -r -P "+port+" "+kvm_scpopt+" buildbot@localhost:/home/buildbot/" + name + "/build/mariadb*zip .",
        ]))
    linux_connector_c.addStep(SetPropertyFromCommand(
        property="bindistname",
        command=["sh", "-c", WithProperties("if [ -f mariadb*freebsd*tar.gz ]; then basename `ls mariadb*freebsd*tar.gz`;else basename `ls mariadb*linux*tar.gz`;fi")],
        ))
    addPackageUploadStep(linux_connector_c, '"%(bindistname)s"')

    linux_connector_c.addStep(SetPropertyFromCommand(
        property="srcdistname",
        command=["sh", "-c", WithProperties("basename `ls mariadb*src*tar.gz`")],
        ))
    addPackageUploadStep(linux_connector_c, '"%(srcdistname)s"')

    linux_connector_c.addStep(SetPropertyFromCommand(
        property="zipdistname",
        command=["sh", "-c", WithProperties("basename `ls mariadb*src*zip`")],
        ))
    addPackageUploadStep(linux_connector_c, '"%(zipdistname)s"')

    return {'name': name, 'builddir': name,
            'factory': linux_connector_c,
            "slavenames": connector_slaves,
            "category": "connectors"}

bld_linux_x64_connector_c= bld_linux_connector_c("linux_x64-connector_c", "2250", "vm-trusty-amd64");
bld_freebsd_x64_connector_c= bld_linux_connector_c("freebsd_x64-connector_c", "2250", "vm-freebsd101-amd64");
bld_linux_x86_connector_c= bld_linux_connector_c("linux_x86-connector_c", "2250", "vm-trusty-i386");
bld_centos6_i386_connector_c= bld_linux_connector_c("centos6_i386-connector_c", "2250", "vm-centos6-i386");
bld_freebsd11_x86_connector_c= bld_linux_connector_c("freebsd11_x86-connector_c", "2343", "vm-freebsd11-i386");
bld_freebsd11_x64_connector_c= bld_linux_connector_c("freebsd11_x64-connector_c", "2344", "vm-freebsd11-amd64");

execfile("/etc/buildbot/builders/odbc/linux_builders.py");
execfile("/etc/buildbot/builders/odbc/windows_builder.py");





#-------------------------------------------------------------------------------
# FreeBSD Builder
#-------------------------------------------------------------------------------
# initially based on Linux KVM Bintar builder - dbart 2017-02-24

def getFreeBSDBuilder(name, kvm_image, port, cpu, ramdisk=True, catg="experimental"):
    args = ["--port="+port, "--memory="+memory_def, "--user=buildbot", "--cpu="+cpu, "--smp=4", "--logfile=kernel_"+port+".log"]
    if ramdisk:
        args = args + ["--work-image=/dev/shm/vm-tmp-"+port+".qcow2"]
    bin_fact = factory.BuildFactory()
    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    bin_fact.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))
    bin_fact.addStep(ShellCommand(
        description=["rsyncing", "VMs"],
        descriptionDone=["rsync", "VMs"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-build.qcow2",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-install.qcow2",
                 "/kvm/vms/"]))
    bin_fact.addStep(DownloadSourceTarball())
    bin_fact.addStep(FileDownload(
        mastersrc=WithProperties("%(bakerypath)s"),
        slavedest=WithProperties("%(bakery)s.tar.gz"),
        blocksize=524288,
        doStepIf=branch_is_5_123))
    bin_fact.addStep(ShellCommand(
        description=["getting", ".supp"],
        descriptionDone=["get", ".supp"],
        command=["sh", "-c", WithProperties("""
rm -f compiler_warnings.supp
tar zxf "/tmp/buildcache/%(tarbuildnum)s:%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
ls -l compiler_warnings.supp
exit 0  # best-effort, not fatal if no suppression file
""")]))
    bin_fact.addStep(Compile(
        description=["making", "bintar"],
        descriptionDone=["make", "bintar"],
        timeout=3600,
        logfiles={"kernel": "kernel_"+port+".log"},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command=["runvm"] + args + ["--base-image=/kvm/vms/"+kvm_image+"-build.qcow2", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        ScpSourceIntoVM(port),
        WithProperties("= case '%(branch)s' in *5\\.[123]*) scp -P "+port+" "+kvm_scpopt+" %(bakery)s.tar.gz buildbot@localhost:buildbot/ ;; esac"),
        WithProperties("""
set -ex
cd buildbot
rm -Rf build
case "%(branch)s" in
*5\\.[123]*)
  mkdir build
  cd build
  tar zxf ../%(bakery)s.tar.gz
  cd %(bakery)s
  bakery/autobake51-bintar.sh ../../%(distname)s
  ;;
*)
  tar zxf "%(distname)s"
  mv "%(distdirname)s" build
  cd build
  mkdir mkbin
  cd mkbin
  echo $PATH
  echo $SHELL
  cmake -DBUILD_CONFIG=mysql_release -DWITH_READLINE=1 -DWITH_JEMALLOC=no ..
  make -j4 package VERBOSE=1
  ;;
esac
basename mariadb-*.tar.gz .tar.gz > ../../bindistname.txt
mv "$(cat ../../bindistname.txt).tar.gz" ../
"""),
        WithProperties("= scp -P "+port+" "+kvm_scpopt+" 'buildbot@localhost:buildbot/build/mariadb-*.tar.gz' ."),
        "= scp -P "+port+" "+kvm_scpopt+" buildbot@localhost:buildbot/bindistname.txt .",
]))
    bin_fact.addStep(SetPropertyFromCommand(
        property="bindistname",
        command=["cat", "bindistname.txt"],
        ))
    addPackageArchiveStep(bin_fact, '"%(bindistname)s.tar.gz"', "%(tarbuildnum)s")
    bin_fact.addStep(getMTR(
        description=["testing", "bintar"],
        descriptionDone=["test", "bintar"],
        logfiles={"kernel": "kernel_"+port+".log"},
        mtr_subdir=".",    # Where we scp vardir to
        env={"TERM": "vt102"},
        command=["runvm"] + args + ["--base-image=/kvm/vms/"+kvm_image+"-install.qcow2", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("= scp -P "+port+" "+kvm_scpopt+" %(bindistname)s.tar.gz buildbot@localhost:buildbot/"),
        WithProperties("""
set -ex
cd buildbot
sudo rm -Rf /usr/local/%(bindistname)s
sudo tar zxf %(bindistname)s.tar.gz -C /usr/local/
cd /usr/local/%(bindistname)s
sudo /usr/sbin/useradd mysql
sudo sudo chown -R mysql .
sudo chgrp -R mysql .
sudo scripts/mysql_install_db --no-defaults --user=mysql
sudo chown -R root .
sudo chown -R mysql data mysql-test
cd mysql-test
sudo su -s /bin/sh -c "perl mysql-test-run.pl  --verbose-restart --force --parallel=4 --retry=3 --mem --max-save-core=0 --max-save-datadir=1" mysql
"""),
        WithProperties("! sudo chmod -R go+rX /usr/local/%(bindistname)s/mysql-test/var/ || :"),
        WithProperties(
              "!= scp -rp -P " + port + " " + kvm_scpopt +
              " buildbot@localhost:/usr/local/%(bindistname)s/mysql-test/var/ . || :")]))

    return {'name': name, 'slavenames': kvm_slaves, 'builddir': name, 'factory': bin_fact,
            "nextBuild": myNextBuild,
            "category": catg }

bld_kvm_freebsd11_x86 = getFreeBSDBuilder("kvm-freebsd11-x86", "vm-freebsd11-i386", "2345", "qemu64", ramdisk=False)
bld_kvm_freebsd11_amd64 = getFreeBSDBuilder("kvm-freebsd11-amd64", "vm-freebsd11-amd64", "2346", "qemu64", ramdisk=False)





#-------------------------------------------------------------------------------
# Solaris amd64 Bintar Builder
#-------------------------------------------------------------------------------

f_sol10_64_bintar = factory.BuildFactory()
f_sol10_64_bintar.addStep(FileDownload(mastersrc=WithProperties("%(tarballpath)s"),
                                       slavedest=WithProperties("%(distname)s"),
                                       blocksize=524288,
))
f_sol10_64_bintar.addStep(ShellCommand(
        description="untarring", descriptionDone="untar",
        command=["sh", "-c", WithProperties("rm -Rf %(distdirname)s && gzip -dc %(distname)s | gtar xf -")]))
f_sol10_64_bintar.addStep(getCompileStep(["sh", "-c", WithProperties("cd %(distdirname)s && BUILD/compile-solaris-amd64 --extra-configs=--without-plugin_innodb_plugin")],
                                         subdir="%(distdirname)s/",
                                         logfiles={"config.log" : WithProperties("%(distdirname)s/config.log")},
                                         env={"EXTRA_FLAGS": "-DFORCE_INIT_OF_VARS",
                                              "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}))
f_sol10_64_bintar.addStep(ShellCommand(
        description="packaging", descriptionDone="package",
        command=["sh", "-c", WithProperties("""
set -ex
cd %(distdirname)s
scripts/make_binary_distribution
ORIG_TAR="`echo mariadb-*.tar.gz`"
ORIG_DIR="`basename ${ORIG_TAR} .tar.gz`"
NEW_DIR="`echo "${ORIG_DIR}" | sed -e 's/-MariaDB//'`"
NEW_TAR="${NEW_DIR}.tar.gz"
if [ "$ORIG_DIR" != "$NEW_DIR" ] ; then
  rm -Rf $ORIG_DIR
  gtar zxf $ORIG_TAR
  mv $ORIG_DIR "${NEW_DIR}"
  gtar zcf "${NEW_TAR}" "${NEW_DIR}/"
fi
echo "${NEW_TAR}" > ../bindistname.txt
""")]))
f_sol10_64_bintar.addStep(SetPropertyFromCommand(
        property="bindistname",
        command=["cat", "bindistname.txt"],
        ))
addPackageArchiveStep(f_sol10_64_bintar, '"%(distdirname)s/%(bindistname)s"', "%(tarbuildnum)s")
f_sol10_64_bintar.addStep(getMTR(
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3 ")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

bld_sol10_64 = {"name": "sol10-64",
                "slavename": "solaris10-x86",
                "builddir": "solaris10-x86",
                "factory": f_sol10_64_bintar,
                "nextBuild": myNextBuild,
                "category": "main",
                }




#-------------------------------------------------------------------------------
# Solaris Sparc Bintar Builder
#-------------------------------------------------------------------------------

f_sol10_sparc_bintar = factory.BuildFactory()
f_sol10_sparc_bintar.addStep(FileDownload(mastersrc=WithProperties("%(tarballpath)s"),
                                       slavedest=WithProperties("%(distname)s"),
                                       blocksize=524288,
))
f_sol10_sparc_bintar.addStep(ShellCommand(
        description="untarring", descriptionDone="untar",
        command=["sh", "-c", WithProperties("rm -Rf %(distdirname)s && gzip -dc %(distname)s | gtar xf -")]))

f_sol10_sparc_bintar.addStep(getCompileStep(["sh", "-c",
        WithProperties("cd %(distdirname)s && "
                       "cmake . -L"
                            " -DCMAKE_BUILD_TYPE=Release"
                            " -DCMAKE_C_COMPILER=cc"
                            " -DCMAKE_CXX_COMPILER=CC"
                            " -DCMAKE_C_FLAGS_RELEASE='-DNDEBUG -xtarget=ultra2 -xarch=sparcvis -xO4 -xstrconst -mt'"
                            " -DCMAKE_CXX_FLAGS_RELEASE='-DNDEBUG -xtarget=ultra2 -xarch=sparcvis -xO4 -noex -mt'"
                            " -DCMAKE_INSTALL_PREFIX=/opt/fli/mysql"
                            " -DINSTALL_SBINDIR=sbin "
                            " -DDEFAULT_SYSCONFDIR=/opt/fli/mysql/etc"
                            " -DENABLED_LOCAL_INFILE=1"
                            " -DMYSQL_UNIX_ADDR=/tmp/.mysql.sock"
                            " -DWITH_EXTRA_CHARSETS=complex"
                            " -DWITH_MYSQLD_LDFLAGS=-lmtmalloc"
                       " && gmake -j6 VERBOSE=1")],
                                         subdir="%(distdirname)s/",
                                         logfiles={"config.log" : WithProperties("%(distdirname)s/config.log")},
                                         env={"LDFLAGS": "-s", "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}))

f_sol10_sparc_bintar.addStep(ShellCommand(
        description="packaging", descriptionDone="package",
        command=["sh", "-c", WithProperties("""
set -ex
cd %(distdirname)s
scripts/make_binary_distribution
ORIG_TAR="`echo mariadb-*.tar.gz`"
ORIG_DIR="`basename ${ORIG_TAR} .tar.gz`"
NEW_DIR="`echo "${ORIG_DIR}" | sed -e 's/-MariaDB//'`"
NEW_TAR="${NEW_DIR}.tar.gz"
if [ "$ORIG_DIR" != "$NEW_DIR" ] ; then
  rm -Rf $ORIG_DIR
  gtar zxf $ORIG_TAR
  mv $ORIG_DIR "${NEW_DIR}"
  gtar zcf "${NEW_TAR}" "${NEW_DIR}/"
fi
echo "${NEW_TAR}" > ../bindistname.txt
""")]))
f_sol10_sparc_bintar.addStep(SetPropertyFromCommand(
        property="bindistname",
        command=["cat", "bindistname.txt"],
        ))
addPackageArchiveStep(f_sol10_sparc_bintar, '"%(distdirname)s/%(bindistname)s"', "%(tarbuildnum)s")
f_sol10_sparc_bintar.addStep(getMTR(
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3 ")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

bld_sol10_sparc = {"name": "sol10-sparc",
                "slavename": "solaris-sparc",
                "builddir": "solaris-sparc",
                "factory": f_sol10_sparc_bintar,
                "nextBuild": myNextBuild,
                "category": "experimental",
                }


#-------------------------------------------------------------------------------
# Labrador Mac Builder
#-------------------------------------------------------------------------------
# mac mini server 8GB, 10.7

f_dbg_labrador = factory.BuildFactory()
f_dbg_labrador.addStep(maybe_bzr_checkout)
f_dbg_labrador.addStep(maybe_git_checkout)
f_dbg_labrador.addStep(
     getCompileStep(["sh", "-c", "cmake . -DBUILD_CONFIG=mysql_release -DWITH_JEMALLOC=no && make -j4 package"],
     env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
          "CC": "gcc",
          "CXX": "g++",
          "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"},
     doStepIf=branch_is_5_5_or_later)
)

f_dbg_labrador.addStep(SetPropertyFromCommand(
    property="bindistname",
    command=["sh", "-c", WithProperties("basename `ls mariadb*tar.gz`")],
    ))

f_dbg_labrador.addStep(SetPropertyFromCommand(
    property="distdirname",
    command=["sh", "-c", WithProperties("pwd")],
    ))

addPackageUploadStep(f_dbg_labrador, '"%(bindistname)s"')

f_dbg_labrador.addStep(test_mac)

bld_labrador = {"name": "labrador",
                 "slavename": "labrador",
                 "builddir": "labrador",
                 "factory": f_dbg_labrador,
                 "nextBuild": myNextBuild,
                 "category": "main",
                 }

#-------------------------------------------------------------------------------
# dbart Mac Builder
#-------------------------------------------------------------------------------
# Mac Mini, MacOS 10.12

# Bintar builds ----------------------------------------------------------------
f_mac_1012_bintar = factory.BuildFactory()
f_mac_1012_bintar.addStep(maybe_bzr_checkout)
f_mac_1012_bintar.addStep(maybe_git_checkout)
f_mac_1012_bintar.addStep(
     getCompileStep(["sh", "-c", "cmake . -DBUILD_CONFIG=mysql_release -DWITH_SSL=yes -DTOKUDB_OK=0 -DWITH_JEMALLOC=no && make -j4 package"],
     env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
          "CXX": "g++",
          "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"},
     doStepIf=branch_is_5_5_or_later)
)

f_mac_1012_bintar.addStep(SetPropertyFromCommand(
    property="bindistname",
    command=["sh", "-c", WithProperties("basename `ls mariadb*tar.gz`")],
    ))

f_mac_1012_bintar.addStep(SetPropertyFromCommand(
    property="distdirname",
    command=["sh", "-c", WithProperties("pwd")],
    ))

addPackageUploadStep(f_mac_1012_bintar, '"%(bindistname)s"')

f_mac_1012_bintar.addStep(test_mac)

bld_mac_1012_bintar = {"name": "mac-1012-bintar",
                 "slavename": "db-mac-1012",
                 "builddir": "mac-1012-bintar",
                 "factory": f_mac_1012_bintar,
                 "nextBuild": myNextBuild,
                 "category": "experimental",
                 }

# Pkg builds -------------------------------------------------------------------
f_mac_1012_pkg = factory.BuildFactory()
f_mac_1012_pkg.addStep(maybe_bzr_checkout)
f_mac_1012_pkg.addStep(maybe_git_checkout)
f_mac_1012_pkg.addStep(
     getCompileStep(["sh", "-c", "cmake . -DBUILD_CONFIG=mysql_release -DWITH_SSL=bundled -DTOKUDB_OK=0 -DWITH_JEMALLOC=no -DMYSQL_UNIX_ADDR=/usr/local/mariadb/data/mariadb.sock -DCMAKE_INSTALL_PREFIX=/usr/local/mariadb/server -DINSTALL_MYSQLDATADIR=/usr/local/mariadb/data -DDEFAULT_SYSCONFDIR=/usr/local/mariadb/etc -DWITH_EMBEDDED_SERVER=OFF -DWITH_UNIT_TESTS=OFF -DINSTALL_MYSQLTESTDIR= -DWITH_WSREP=OFF -DGNUTLS_LIBRARY='/usr/local/lib/libgnutls.a;/usr/local/lib/libnettle.a;/usr/local/lib/libtasn1.a;/usr/local/lib/libgmp.a;/usr/local/lib/libhogweed.a;/usr/local/lib/libunistring.a' && make -j4 package && cp -a /Users/buildbot/macOSpkg-pr/support-files/macOSpkg support-files/ && cd support-files/macOSpkg && ./mkpkg ../../mariadb*tar.gz && mv -vi *.pkg ../../"],
     env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
          "CXX": "g++",
          "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"},
     doStepIf=branch_is_5_5_or_later)
)

f_mac_1012_pkg.addStep(SetPropertyFromCommand(
    property="bindistname",
    command=["sh", "-c", WithProperties("basename `ls mariadb*pkg`")],
    ))

f_mac_1012_pkg.addStep(SetPropertyFromCommand(
    property="distdirname",
    command=["sh", "-c", WithProperties("pwd")],
    ))

addPackageUploadStep(f_mac_1012_pkg, '"%(bindistname)s"')

f_mac_1012_pkg.addStep(test_mac)

bld_mac_1012_pkg = {"name": "mac-1012-pkg",
                 "slavename": "db-mac-1012",
                 "builddir": "mac-1012-pkg",
                 "factory": f_mac_1012_pkg,
                 "nextBuild": myNextBuild,
                 "category": "experimental",
                 }


#-------------------------------------------------------------------------------
# IBM System Z RHEL6 Bintar Builder
#-------------------------------------------------------------------------------
f_ibmz_rhel6_bintar = factory.BuildFactory()
f_ibmz_rhel6_bintar.addStep(maybe_bzr_checkout)
f_ibmz_rhel6_bintar.addStep(maybe_git_checkout)
f_ibmz_rhel6_bintar.addStep(
    getCompileStep(["sh", "-c", "git clean -dfX && cmake . -DBUILD_CONFIG=mysql_release -DWITH_SSL=system -DWITHOUT_CONNECT=ON -DWITH_WSREP=no -DWITH_JEMALLOC=no && make -j4 package"],
    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"})
)

f_ibmz_rhel6_bintar.addStep(SetPropertyFromCommand(
        property="bindistname",
        command=["sh", "-c", WithProperties("basename `ls mariadb*tar.gz`")],
        ))

f_ibmz_rhel6_bintar.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        ))

addPackageUploadStep(f_ibmz_rhel6_bintar, '"%(bindistname)s"')

f_ibmz_rhel6_bintar.addStep(getMTR(
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --parallel=4 ")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

f_ibmz_rhel6_bintar.addStep(getMTR(
        test_type="xtra-big",
        test_info="Some additional test suites, with --big",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl " +
                       "--verbose-restart --force --parallel=4  " +
                       "--suite=funcs_1,funcs_2,stress,jp --big " +
                       "--testcase-timeout=45")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

f_ibmz_rhel6_bintar.addStep(RemoveDirectory(
    name="remove_build",
    dir=WithProperties("%(distdirname)s"),
    alwaysRun=True));

bld_ibmz_rhel6_bintar = {"name": "ibmz-rhel6-bintar",
                "slavename": "ibmz-rhel6",
                "builddir": "ibmz-rhel6-bintar",
                "factory": f_ibmz_rhel6_bintar,
                "nextBuild": myNextBuild,
                "category": "experimental",
                }



#-------------------------------------------------------------------------------
# IBM System Z RHEL 6 RPM Builder
#-------------------------------------------------------------------------------
f_ibmz_rhel6_rpm = factory.BuildFactory()
f_ibmz_rhel6_rpm.addStep(maybe_bzr_checkout)
f_ibmz_rhel6_rpm.addStep(maybe_git_checkout)
f_ibmz_rhel6_rpm.addStep(
    getCompileStep(["sh", "-c", "git clean -dfX && export PATH=/opt/at7.0/bin:$PATH && cmake . -DBUILD_CONFIG=mysql_release -DWITH_WSREP=no -DWITH_JEMALLOC=no -DRPM=rhel6 && make -j4 package VERBOSE=1"],
    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"})
)

f_ibmz_rhel6_rpm.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        ))

f_ibmz_rhel6_rpm.addStep(ShellCommand(
    description=["archiving"],
    descriptionDone=["archive"],
    command=["sh", "-c", WithProperties("""
set -ex
rm -Rf rpms
mkdir -p rpms
""" + 'cp -rp *.rpm rpms/\n' + """
cd rpms
find . -type f \! -name md5sums.txt|xargs md5sum > md5sums.txt
""")]))

addPackageUploadStep(f_ibmz_rhel6_rpm, 'rpms')

f_ibmz_rhel6_rpm.addStep(RemoveDirectory(
        name="remove_build",
        dir=WithProperties("%(distdirname)s"),
        alwaysRun=True));

bld_ibmz_rhel6_rpm = {"name": "ibmz-rhel6-rpm",
                "slavename": "ibmz-rhel6",
                "builddir": "ibmz-rhel6-rpm",
                "factory": f_ibmz_rhel6_rpm,
                "nextBuild": myNextBuild,
                "category": "experimental",
                }



#-------------------------------------------------------------------------------
# IBM System Z SLES11 Bintar Builder
#-------------------------------------------------------------------------------
f_ibmz_sles11_bintar = factory.BuildFactory()
f_ibmz_sles11_bintar.addStep(maybe_bzr_checkout)
f_ibmz_sles11_bintar.addStep(maybe_git_checkout)
f_ibmz_sles11_bintar.addStep(
    getCompileStep(["sh", "-c", "git clean -dfX && cmake . -DBUILD_CONFIG=mysql_release -DWITH_SSL=system -DWITHOUT_CONNECT=ON -DWITH_WSREP=no -DWITH_JEMALLOC=no && make -j4 package"],
    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"})
)

f_ibmz_sles11_bintar.addStep(SetPropertyFromCommand(
        property="bindistname",
        command=["sh", "-c", WithProperties("basename `ls mariadb*tar.gz`")],
        ))

f_ibmz_sles11_bintar.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        ))

addPackageUploadStep(f_ibmz_sles11_bintar, '"%(bindistname)s"')

f_ibmz_sles11_bintar.addStep(getMTR(
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --parallel=4 ")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

f_ibmz_sles11_bintar.addStep(getMTR(
        test_type="xtra-big",
        test_info="Some additional test suites, with --big",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl " +
                       "--verbose-restart --force --parallel=4  " +
                       "--suite=funcs_1,funcs_2,stress,jp --big " +
                       "--testcase-timeout=45")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

f_ibmz_sles11_bintar.addStep(RemoveDirectory(
    name="remove_build",
    dir=WithProperties("%(distdirname)s"),
    alwaysRun=True));

bld_ibmz_sles11_bintar = {"name": "ibmz-sles11-bintar",
                "slavename": "ibmz-sles11",
                "builddir": "ibmz-sles11-bintar",
                "factory": f_ibmz_sles11_bintar,
                "nextBuild": myNextBuild,
                "category": "experimental",
                }



#-------------------------------------------------------------------------------
# IBM System Z SLES 11 RPM Builder
#-------------------------------------------------------------------------------
f_ibmz_sles11_rpm = factory.BuildFactory()
f_ibmz_sles11_rpm.addStep(maybe_bzr_checkout)
f_ibmz_sles11_rpm.addStep(maybe_git_checkout)
f_ibmz_sles11_rpm.addStep(
    getCompileStep(["sh", "-c", "git clean -dfX && export PATH=/opt/at7.0/bin:$PATH && cmake . -DBUILD_CONFIG=mysql_release -DWITH_WSREP=no -DWITH_JEMALLOC=no -DRPM=sles11 && make -j4 package VERBOSE=1"],
    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"})
)

f_ibmz_sles11_rpm.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        ))

f_ibmz_sles11_rpm.addStep(ShellCommand(
    description=["archiving"],
    descriptionDone=["archive"],
    command=["sh", "-c", WithProperties("""
set -ex
rm -Rf rpms
mkdir -p rpms
""" + 'cp -rp *.rpm rpms/\n' + """
cd rpms
find . -type f \! -name md5sums.txt|xargs md5sum > md5sums.txt
""")]))

addPackageUploadStep(f_ibmz_sles11_rpm, 'rpms')

f_ibmz_sles11_rpm.addStep(RemoveDirectory(
        name="remove_build",
        dir=WithProperties("%(distdirname)s"),
        alwaysRun=True));

bld_ibmz_sles11_rpm = {"name": "ibmz-sles11-rpm",
                "slavename": "ibmz-sles11",
                "builddir": "ibmz-sles11-rpm",
                "factory": f_ibmz_sles11_rpm,
                "nextBuild": myNextBuild,
                "category": "experimental",
                }



#-------------------------------------------------------------------------------
# RHEL 6 P8 ppc64 Bintar Builder
#-------------------------------------------------------------------------------
f_p8_rhel6_bintar = factory.BuildFactory()
f_p8_rhel6_bintar.addStep(maybe_bzr_checkout)
f_p8_rhel6_bintar.addStep(maybe_git_checkout)

f_p8_rhel6_bintar.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        alwaysRun=True))

f_p8_rhel6_bintar.addStep(
    getCompileStep(["sh", "-c", "git clean -dfX && export PATH=/opt/at7.0/bin:$PATH && cmake . -DBUILD_CONFIG=mysql_release -DWITH_SSL=system -DWITHOUT_CONNECT=ON -DWITH_JEMALLOC=yes && make -j4 package"],
    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
#        "CXX": "g++ -mminimal-toc",
        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"})
)

f_p8_rhel6_bintar.addStep(SetPropertyFromCommand(
        property="bindistname",
        command=["sh", "-c", WithProperties("basename `ls mariadb*tar.gz`")],
        ))

addPackageUploadStep(f_p8_rhel6_bintar, '"%(bindistname)s"')

f_p8_rhel6_bintar.addStep(ShellCommand(
    name="cleanup",
    description=["cleanup"],
    descriptionDone=["cleanup"],
    command=["sh", "-c", "rm -rf /dev/shm/var_*"]))

f_p8_rhel6_bintar.addStep(getMTR(
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --parallel=4 --mem ")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

f_p8_rhel6_bintar.addStep(getMTR(
        test_type="xtra-big",
        test_info="Some additional test suites, with --big",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl " +
                       "--verbose-restart --force --parallel=4 " +
                       "--suite=funcs_1,funcs_2,stress,jp --big --mem " +
                       "--testcase-timeout=45")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

f_p8_rhel6_bintar.addStep(RemoveDirectory(
	name="remove_build",
	dir=WithProperties("%(distdirname)s"),
	alwaysRun=True));


bld_p8_rhel6_bintar = {"name": "p8-rhel6-bintar",
                "slavenames": ["power8-vlp01", "p8-rhel6-bb"],
                "builddir": "p8-rhel6-bintar",
                "factory": f_p8_rhel6_bintar,
                "nextBuild": myNextBuild,
                "category": "main",
                }


#-------------------------------------------------------------------------------
# RHEL 6 P8 ppc64 Bintar Debug Builder
#-------------------------------------------------------------------------------
f_p8_rhel6_bintar_debug = factory.BuildFactory()
f_p8_rhel6_bintar_debug.addStep(maybe_bzr_checkout)
f_p8_rhel6_bintar_debug.addStep(maybe_git_checkout)

f_p8_rhel6_bintar_debug.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        alwaysRun=True))

f_p8_rhel6_bintar_debug.addStep(ShellCommand(
    description=["diskspace", "before", "build"],
    descriptionDone=["diskspace", "before", "build"],
    command=["sh", "-c", WithProperties("""df -k""")]))

f_p8_rhel6_bintar_debug.addStep(
    getCompileStep(["sh", "-c", "git clean -dfX && export PATH=/opt/at7.0/bin:$PATH && cmake . -DCMAKE_BUILD_TYPE=Debug -DMYSQL_MAINTAINER_MODE=ON -DWITHOUT_CONNECT=ON && make -j4 package"],
    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
        "EXTRA_CONFIGS": "--with-embedded-privilege-control",
        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"})
)

f_p8_rhel6_bintar_debug.addStep(SetPropertyFromCommand(
        property="bindistname",
        command=["sh", "-c", WithProperties("basename `ls mariadb*tar.gz`")],
        ))

addPackageUploadStep(f_p8_rhel6_bintar_debug, '"%(bindistname)s"')

f_p8_rhel6_bintar_debug.addStep(ShellCommand(
    description=["diskspace", "before", "test"],
    descriptionDone=["diskspace", "before", "test"],
    command=["sh", "-c", WithProperties("""df -k""")]))

f_p8_rhel6_bintar_debug.addStep(ShellCommand(
    name="cleanup",
    description=["cleanup"],
    descriptionDone=["cleanup"],
    command=["sh", "-c", "rm -rf /dev/shm/var_*"]))

f_p8_rhel6_bintar_debug.addStep(getMTR(
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --parallel=4 --mem ")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

f_p8_rhel6_bintar_debug.addStep(getMTR(
        test_type="xtra-big",
        test_info="Some additional test suites, with --big",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl " +
                       "--verbose-restart --force --parallel=4  " +
                       "--suite=funcs_1,funcs_2,stress,jp --big --mem " +
                       "--testcase-timeout=45")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

f_p8_rhel6_bintar_debug.addStep(ShellCommand(
    description=["diskspace", "after", "test"],
    descriptionDone=["diskspace", "after", "test"],
    command=["sh", "-c", WithProperties("""df -k""")],
    alwaysRun=True))


f_p8_rhel6_bintar_debug.addStep(RemoveDirectory(
        name="remove_build",
        dir=WithProperties("%(distdirname)s"),
        alwaysRun=True));

bld_p8_rhel6_bintar_debug = {"name": "p8-rhel6-bintar-debug",
                "slavenames": ["power8-vlp01", "p8-rhel6-bb"],
                "builddir": "p8-rhel6-bintar-debug",
                "factory": f_p8_rhel6_bintar_debug,
                "nextBuild": myNextBuild,
                "category": "main",
                }


#-------------------------------------------------------------------------------
# RHEL 6 P8 ppc64 RPM Builder
#-------------------------------------------------------------------------------
f_p8_rhel6_rpm = factory.BuildFactory()
f_p8_rhel6_rpm.addStep(maybe_bzr_checkout)
f_p8_rhel6_rpm.addStep(maybe_git_checkout)

f_p8_rhel6_rpm.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        alwaysRun=True))

f_p8_rhel6_rpm.addStep(
    getCompileStep(["sh", "-c", "git clean -dfX && export PATH=/opt/at7.0/bin:$PATH && cmake . -DBUILD_CONFIG=mysql_release -DWITH_JEMALLOC=yes -DRPM=rhel6 && make -j4 package VERBOSE=1"],
    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"})
)

f_p8_rhel6_rpm.addStep(ShellCommand(
    description=["archiving"],
    descriptionDone=["archive"],
    command=["sh", "-c", WithProperties("""
set -ex
rm -Rf rpms
mkdir -p rpms
""" + 'cp -rp *.rpm rpms/\n' + """
cd rpms
find . -type f \! -name md5sums.txt|xargs md5sum > md5sums.txt
""")]))

addPackageUploadStep(f_p8_rhel6_rpm, 'rpms')

f_p8_rhel6_rpm.addStep(RemoveDirectory(
        name="remove_build",
        dir=WithProperties("%(distdirname)s"),
        alwaysRun=True));

bld_p8_rhel6_rpm = {"name": "p8-rhel6-rpm",
                "slavenames": ["power8-vlp01", "p8-rhel6-bb"],
                "builddir": "p8-rhel6-rpm",
                "factory": f_p8_rhel6_rpm,
                "nextBuild": myNextBuild,
                "category": "main",
                }


#-------------------------------------------------------------------------------
# RHEL 6 P8 ppc64 RPM Builder for Galera
#-------------------------------------------------------------------------------

f_p8_rhel6_rpm_gal = factory.BuildFactory()

f_p8_rhel6_rpm_gal.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        alwaysRun=True))

f_p8_rhel6_rpm_gal.addStep(Compile(
        description=["making", "rpms"],
        descriptionDone=["make", "rpms"],
        timeout=7200,
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command=["sh", "-c", WithProperties("""
set -ex
rm -Rf rpms build
mkdir rpms
git clone -b %(branch)s "https://github.com/MariaDB/galera.git" build
cd build
export PATH=/opt/at7.0/bin:$PATH
./scripts/build.sh -p
cp `find *.rpm -maxdepth 1 -type f` ../rpms
cd ..
        """),
        ]))

f_p8_rhel6_rpm_gal.addStep(ShellCommand(
        description=["archiving"],
        descriptionDone=["archive"],
        command=["sh", "-c", WithProperties("""
set -ex
cd rpms
find . -type f \! -name md5sums.txt|xargs md5sum > md5sums.txt
""")]))

addPackageUploadStep(f_p8_rhel6_rpm_gal, 'rpms')

f_p8_rhel6_rpm_gal.addStep(RemoveDirectory(
        name="remove_build",
        dir=WithProperties("%(distdirname)s"),
        alwaysRun=True));

gal_bld_p8_rhel6_rpm = {"name": "p8-rhel6-rpm-gal",
                "slavenames": ["power8-vlp01", "p8-rhel6-bb"],
                "builddir": "p8-rhel6-rpm-gal",
                "factory": f_p8_rhel6_rpm_gal,
                "nextBuild": myNextBuild,
                "category": "galera",
                }


#-------------------------------------------------------------------------------
# RHEL 7 P8 ppc64 Bintar Builder
#-------------------------------------------------------------------------------
f_p8_rhel7_bintar = factory.BuildFactory()
f_p8_rhel7_bintar.addStep(maybe_bzr_checkout)
f_p8_rhel7_bintar.addStep(maybe_git_checkout)

f_p8_rhel7_bintar.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        alwaysRun=True))

f_p8_rhel7_bintar.addStep(
    getCompileStep(["sh", "-c", "git clean -dfX && export PATH=/opt/at8.0/bin:$PATH && cmake . -DBUILD_CONFIG=mysql_release -DWITH_SSL=system -DWITHOUT_CONNECT=ON -DWITH_JEMALLOC=yes && make -j4 package"],
    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"})
)

f_p8_rhel7_bintar.addStep(SetPropertyFromCommand(
        property="bindistname",
        command=["sh", "-c", WithProperties("basename `ls mariadb*tar.gz`")],
        ))

addPackageUploadStep(f_p8_rhel7_bintar, '"%(bindistname)s"')

f_p8_rhel7_bintar.addStep(ShellCommand(
    name="cleanup",
    description=["cleanup"],
    descriptionDone=["cleanup"],
    command=["sh", "-c", "rm -rf /dev/shm/var_*"]))


f_p8_rhel7_bintar.addStep(getMTR(
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --parallel=4 --mem ")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

f_p8_rhel7_bintar.addStep(getMTR(
        test_type="xtra-big",
        test_info="Some additional test suites, with --big",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl " +
                       "--verbose-restart --force --parallel=4  " +
                       "--suite=funcs_1,funcs_2,stress,jp --big --mem " +
                       "--testcase-timeout=45")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

f_p8_rhel7_bintar.addStep(RemoveDirectory(
        name="remove_build",
        dir=WithProperties("%(distdirname)s"),
        alwaysRun=True));

bld_p8_rhel7_bintar = {"name": "p8-rhel7-bintar",
                "slavename": "power8-vlp03",
                "builddir": "power8-vlp03-bintar",
                "factory": f_p8_rhel7_bintar,
                "nextBuild": myNextBuild,
                "category": "main",
                }


#-------------------------------------------------------------------------------
# RHEL 7 P8 ppc64 Bintar Debug Builder
#-------------------------------------------------------------------------------
f_p8_rhel7_bintar_debug = factory.BuildFactory()
f_p8_rhel7_bintar_debug.addStep(maybe_bzr_checkout)
f_p8_rhel7_bintar_debug.addStep(maybe_git_checkout)

f_p8_rhel7_bintar_debug.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        alwaysRun=True))

f_p8_rhel7_bintar_debug.addStep(
    getCompileStep(["sh", "-c", "git clean -dfX && export PATH=/opt/at8.0/bin:$PATH && cmake . -DCMAKE_BUILD_TYPE=Debug -DMYSQL_MAINTAINER_MODE=ON -DWITHOUT_CONNECT=ON && make -j4 package"],
    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
        "EXTRA_CONFIGS": "--with-embedded-privilege-control",
        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"})
)

f_p8_rhel7_bintar_debug.addStep(SetPropertyFromCommand(
        property="bindistname",
        command=["sh", "-c", WithProperties("basename `ls mariadb*tar.gz`")],
        ))

addPackageUploadStep(f_p8_rhel7_bintar_debug, '"%(bindistname)s"')

f_p8_rhel7_bintar_debug.addStep(ShellCommand(
    name="cleanup",
    description=["cleanup"],
    descriptionDone=["cleanup"],
    command=["sh", "-c", "rm -rf /dev/shm/var_*"]))

f_p8_rhel7_bintar_debug.addStep(getMTR(
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --parallel=4 --mem ")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

f_p8_rhel7_bintar_debug.addStep(getMTR(
        test_type="xtra-big",
        test_info="Some additional test suites, with --big",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl " +
                       "--verbose-restart --force --parallel=4  " +
                       "--suite=funcs_1,funcs_2,stress,jp --big --mem " +
                       "--testcase-timeout=45")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

f_p8_rhel7_bintar_debug.addStep(RemoveDirectory(
        name="remove_build",
        dir=WithProperties("%(distdirname)s"),
        alwaysRun=True));

bld_p8_rhel7_bintar_debug = {"name": "p8-rhel7-bintar-debug",
                "slavename": "power8-vlp03",
                "builddir": "power8-vlp03-bintar-debug",
                "factory": f_p8_rhel7_bintar_debug,
                "nextBuild": myNextBuild,
                "category": "main",
                }


#-------------------------------------------------------------------------------
# RHEL 7 P8 ppc64 RPM Builder
#-------------------------------------------------------------------------------
f_p8_rhel7_rpm = factory.BuildFactory()
f_p8_rhel7_rpm.addStep(maybe_bzr_checkout)
f_p8_rhel7_rpm.addStep(maybe_git_checkout)

f_p8_rhel7_rpm.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        alwaysRun=True))

f_p8_rhel7_rpm.addStep(
    getCompileStep(["sh", "-c", "git clean -dfX && export PATH=/opt/at8.0/bin:$PATH && cmake . -DBUILD_CONFIG=mysql_release -DWITH_JEMALLOC=yes -DRPM=rhel7 && make -j4 package VERBOSE=1"],
    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"})
)

f_p8_rhel7_rpm.addStep(ShellCommand(
    description=["archiving"],
    descriptionDone=["archive"],
    command=["sh", "-c", WithProperties("""
set -ex
rm -Rf rpms
mkdir -p rpms
""" + 'cp -rp *.rpm rpms/\n' + """
cd rpms
find . -type f \! -name md5sums.txt|xargs md5sum > md5sums.txt
""")]))

addPackageUploadStep(f_p8_rhel7_rpm, 'rpms')

f_p8_rhel7_rpm.addStep(RemoveDirectory(
        name="remove_build",
        dir=WithProperties("%(distdirname)s"),
        alwaysRun=True));

bld_p8_rhel7_rpm = {"name": "p8-rhel7-rpm",
                "slavename": "power8-vlp03",
                "builddir": "power8-vlp03-rpm",
                "factory": f_p8_rhel7_rpm,
                "nextBuild": myNextBuild,
                "category": "main",
                }


#-------------------------------------------------------------------------------
# RHEL 7 P8 ppc64 RPM Builder for Galera
#-------------------------------------------------------------------------------

f_p8_rhel7_rpm_gal = factory.BuildFactory()

f_p8_rhel7_rpm_gal.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        alwaysRun=True))

f_p8_rhel7_rpm_gal.addStep(Compile(
        description=["making", "rpms"],
        descriptionDone=["make", "rpms"],
        timeout=7200,
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command=["sh", "-c", WithProperties("""
set -ex
rm -Rf rpms build
mkdir rpms
git clone -b %(branch)s "https://github.com/MariaDB/galera.git" build
cd build
export PATH=/opt/at8.0/bin:$PATH
./scripts/build.sh -p
cp `find *.rpm -maxdepth 1 -type f` ../rpms
cd ..
        """),
        ]))

f_p8_rhel7_rpm_gal.addStep(ShellCommand(
        description=["archiving"],
        descriptionDone=["archive"],
        command=["sh", "-c", WithProperties("""
set -ex
cd rpms
find . -type f \! -name md5sums.txt|xargs md5sum > md5sums.txt
""")]))

addPackageUploadStep(f_p8_rhel7_rpm_gal, 'rpms')

f_p8_rhel7_rpm_gal.addStep(RemoveDirectory(
        name="remove_build",
        dir=WithProperties("%(distdirname)s"),
        alwaysRun=True));

gal_bld_p8_rhel7_rpm = {"name": "p8-rhel7-rpm-gal",
                "slavename": "power8-vlp03",
                "builddir": "power8-vlp03-rpm-gal",
                "factory": f_p8_rhel7_rpm_gal,
                "nextBuild": myNextBuild,
                "category": "galera",
                }



#-------------------------------------------------------------------------------
# RHEL 7.1 P8 ppc64le Bintar Builder
#-------------------------------------------------------------------------------
f_p8_rhel71_bintar = factory.BuildFactory()
f_p8_rhel71_bintar.addStep(maybe_bzr_checkout)
f_p8_rhel71_bintar.addStep(maybe_git_checkout)

f_p8_rhel71_bintar.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        alwaysRun=True))

# There is no epel repo for Red Hat 7.1 P8 LE (Little Endian), so there are no
# jemalloc packages available, so that is disabled below -- dbart (2015-01-22)

f_p8_rhel71_bintar.addStep(
    getCompileStep(["sh", "-c", "git clean -dfX && export PATH=/opt/at8.0/bin:$PATH && cmake . -DBUILD_CONFIG=mysql_release -DWITH_SSL=system -DWITHOUT_CONNECT=ON -DWITH_JEMALLOC=no && make -j4 package"],
    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"})
)

f_p8_rhel71_bintar.addStep(SetPropertyFromCommand(
        property="bindistname",
        command=["sh", "-c", WithProperties("basename `ls mariadb*tar.gz`")],
        ))

addPackageUploadStep(f_p8_rhel71_bintar, '"%(bindistname)s"')

f_p8_rhel71_bintar.addStep(ShellCommand(
    name="cleanup",
    description=["cleanup"],
    descriptionDone=["cleanup"],
    command=["sh", "-c", "rm -rf /dev/shm/var_*"]))

f_p8_rhel71_bintar.addStep(getMTR(
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --parallel=2 --mem ")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

f_p8_rhel71_bintar.addStep(getMTR(
        test_type="xtra-big",
        test_info="Some additional test suites, with --big",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl " +
                       "--verbose-restart --force --parallel=2 --mem " +
                       "--suite=funcs_1,funcs_2,stress,jp --big " +
                       "--testcase-timeout=45")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

f_p8_rhel71_bintar.addStep(RemoveDirectory(
        name="remove_build",
        dir=WithProperties("%(distdirname)s"),
        alwaysRun=True));

f_p8_rhel71_bintar.addStep(ShellCommand(
    description=["Check shm"],
        command=["sh", "-c", "ls -l /dev/shm/"]))

f_p8_rhel71_bintar.addStep(ShellCommand(
    description=["Clean up shm"],
        command=["sh", "-c", "rm -rf /dev/shm/var_auto*"]))

bld_p8_rhel71_bintar = {"name": "p8-rhel71-bintar",
                "slavename": "power8-vlp06",
                "builddir": "power8-vlp06-bintar",
                "factory": f_p8_rhel71_bintar,
                "nextBuild": myNextBuild,
                "category": "main",
                }


#-------------------------------------------------------------------------------
# RHEL 7.1 P8 ppc64le Bintar Debug Builder
#-------------------------------------------------------------------------------
f_p8_rhel71_bintar_debug = factory.BuildFactory()
f_p8_rhel71_bintar_debug.addStep(maybe_bzr_checkout)
f_p8_rhel71_bintar_debug.addStep(maybe_git_checkout)

f_p8_rhel71_bintar_debug.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        alwaysRun=True))

f_p8_rhel71_bintar_debug.addStep(
    getCompileStep(["sh", "-c", "git clean -dfX && export PATH=/opt/at8.0/bin:$PATH && cmake . -DCMAKE_BUILD_TYPE=Debug -DMYSQL_MAINTAINER_MODE=ON -DWITHOUT_CONNECT=ON && make -j4 package"],
    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
        "EXTRA_CONFIGS": "--with-embedded-privilege-control",
        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"})
)

f_p8_rhel71_bintar_debug.addStep(SetPropertyFromCommand(
        property="bindistname",
        command=["sh", "-c", WithProperties("basename `ls mariadb*tar.gz`")],
        ))

addPackageUploadStep(f_p8_rhel71_bintar_debug, '"%(bindistname)s"')

f_p8_rhel71_bintar_debug.addStep(ShellCommand(
    name="cleanup",
    description=["cleanup"],
    descriptionDone=["cleanup"],
    command=["sh", "-c", "rm -rf /dev/shm/var_*"]))

f_p8_rhel71_bintar_debug.addStep(getMTR(
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --parallel=2 --mem ")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

f_p8_rhel71_bintar_debug.addStep(getMTR(
        test_type="xtra-big",
        test_info="Some additional test suites, with --big",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl " +
                       "--verbose-restart --force --parallel=2 --mem " +
                       "--suite=funcs_1,funcs_2,stress,jp --big " +
                       "--testcase-timeout=45")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

f_p8_rhel71_bintar_debug.addStep(RemoveDirectory(
        name="remove_build",
        dir=WithProperties("%(distdirname)s"),
        alwaysRun=True));

f_p8_rhel71_bintar_debug.addStep(ShellCommand(
    description=["Clean up shm"],
        command=["sh", "-c", "rm -rf /dev/shm/var_auto*"]))

bld_p8_rhel71_bintar_debug = {"name": "p8-rhel71-bintar-debug",
                "slavename": "power8-vlp06",
                "builddir": "power8-vlp06-bintar-debug",
                "factory": f_p8_rhel71_bintar_debug,
                "nextBuild": myNextBuild,
                "category": "main",
                }


#-------------------------------------------------------------------------------
# RHEL 7.1 P8 ppc64le RPM Builder
#-------------------------------------------------------------------------------

f_p8_rhel71_rpm = factory.BuildFactory()
f_p8_rhel71_rpm.addStep(maybe_bzr_checkout)
f_p8_rhel71_rpm.addStep(maybe_git_checkout)

f_p8_rhel71_rpm.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        alwaysRun=True))

# There is no epel repo for Red Hat 7.1 P8 LE (Little Endian), so there are no
# jemalloc packages available, so that is disabled below -- dbart (2015-01-22)
f_p8_rhel71_rpm.addStep(
    getCompileStep(["sh", "-c", "git clean -dfX && export PATH=/opt/at8.0/bin:$PATH && cmake . -DBUILD_CONFIG=mysql_release -DWITH_JEMALLOC=no -DRPM=rhel7 && make -j4 package VERBOSE=1"],
    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"})
)

f_p8_rhel71_rpm.addStep(ShellCommand(
    description=["archiving"],
    descriptionDone=["archive"],
    command=["sh", "-c", WithProperties("""
set -ex
rm -Rf rpms
mkdir -p rpms
""" + 'cp -rp *.rpm rpms/\n' + """
cd rpms
find . -type f \! -name md5sums.txt|xargs md5sum > md5sums.txt
""")]))

addPackageUploadStep(f_p8_rhel71_rpm, 'rpms')

f_p8_rhel71_rpm.addStep(RemoveDirectory(
        name="remove_build",
        dir=WithProperties("%(distdirname)s"),
        alwaysRun=True));

bld_p8_rhel71_rpm = {"name": "p8-rhel71-rpm",
                "slavename": "power8-vlp06",
                "builddir": "power8-vlp06-rpm",
                "factory": f_p8_rhel71_rpm,
                "nextBuild": myNextBuild,
                "category": "main",
                }

#-------------------------------------------------------------------------------
# RHEL 7.1 P8 ppc64le RPM Builder for Galera
#-------------------------------------------------------------------------------

f_p8_rhel71_rpm_gal = factory.BuildFactory()

f_p8_rhel71_rpm_gal.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        alwaysRun=True))

f_p8_rhel71_rpm_gal.addStep(Compile(
        description=["making", "rpms"],
        descriptionDone=["make", "rpms"],
        timeout=7200,
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command=["sh", "-c", WithProperties("""
set -ex
rm -Rf rpms build
mkdir rpms
git clone -b %(branch)s "https://github.com/MariaDB/galera.git" build
cd build
export PATH=/opt/at8.0/bin:$PATH
./scripts/build.sh -p
cp `find *.rpm -maxdepth 1 -type f` ../rpms
cd ..
        """),
        ]))

f_p8_rhel71_rpm_gal.addStep(ShellCommand(
        description=["archiving"],
        descriptionDone=["archive"],
        command=["sh", "-c", WithProperties("""
set -ex
cd rpms
find . -type f \! -name md5sums.txt|xargs md5sum > md5sums.txt
""")]))

addPackageUploadStep(f_p8_rhel71_rpm_gal, 'rpms')

f_p8_rhel71_rpm_gal.addStep(RemoveDirectory(
        name="remove_build",
        dir=WithProperties("%(distdirname)s"),
        alwaysRun=True));

gal_bld_p8_rhel71_rpm = {"name": "p8-rhel71-rpm-gal",
                "slavename": "power8-vlp06",
                "builddir": "power8-vlp06-rpm-gal",
                "factory": f_p8_rhel71_rpm_gal,
                "nextBuild": myNextBuild,
                "category": "galera",
                }


#-------------------------------------------------------------------------------
# SUSE 12 P8 RPM Builder
#-------------------------------------------------------------------------------
f_p8_suse12_rpm = factory.BuildFactory()
f_p8_suse12_rpm.addStep(maybe_bzr_checkout)
f_p8_suse12_rpm.addStep(maybe_git_checkout)

f_p8_suse12_rpm.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        alwaysRun=True))

f_p8_suse12_rpm.addStep(
    getCompileStep(["sh", "-c", "git clean -dfX && export PATH=/opt/at8.0/bin:$PATH && cmake . -DBUILD_CONFIG=mysql_release -DWITH_JEMALLOC=no -DRPM=suse12 && make -j4 package VERBOSE=1"],
    env={"EXTRA_FLAGS": "-O2 -Wuninitialized -DFORCE_INIT_OF_VARS",
        "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"})
)

f_p8_suse12_rpm.addStep(ShellCommand(
    description=["archiving"],
    descriptionDone=["archive"],
    command=["sh", "-c", WithProperties("""
set -ex
rm -Rf rpms
mkdir -p rpms
""" + 'cp -rp *.rpm rpms/\n' + """
cd rpms
find . -type f \! -name md5sums.txt|xargs md5sum > md5sums.txt
""")]))

addPackageUploadStep(f_p8_suse12_rpm, 'rpms')

f_p8_suse12_rpm.addStep(RemoveDirectory(
        name="remove_build",
        dir=WithProperties("%(distdirname)s"),
        alwaysRun=True));

bld_p8_suse12_rpm = {"name": "p8-suse12-rpm",
                "slavename": "power8-vlp05",
                "builddir": "power8-vlp05-rpm",
                "factory": f_p8_suse12_rpm,
                "nextBuild": myNextBuild,
                "category": "main",
                }


#-------------------------------------------------------------------------------
# SUSE 12 P8 RPM Builder for Galera
#-------------------------------------------------------------------------------

f_p8_suse12_rpm_gal = factory.BuildFactory()

f_p8_suse12_rpm_gal.addStep(SetPropertyFromCommand(
        property="distdirname",
        command=["sh", "-c", WithProperties("pwd")],
        alwaysRun=True))

f_p8_suse12_rpm_gal.addStep(Compile(
        description=["making", "rpms"],
        descriptionDone=["make", "rpms"],
        timeout=7200,
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command=["sh", "-c", WithProperties("""
set -ex
rm -Rf rpms build
mkdir rpms
git clone -b %(branch)s "https://github.com/MariaDB/galera.git" build
cd build
export PATH=/opt/at8.0/bin:$PATH
./scripts/build.sh -p
cp `find *.rpm -maxdepth 1 -type f` ../rpms
cd ..
        """),
        ]))

f_p8_suse12_rpm_gal.addStep(ShellCommand(
        description=["archiving"],
        descriptionDone=["archive"],
        command=["sh", "-c", WithProperties("""
set -ex
cd rpms
find . -type f \! -name md5sums.txt|xargs md5sum > md5sums.txt
""")]))

addPackageUploadStep(f_p8_suse12_rpm_gal, 'rpms')

f_p8_suse12_rpm_gal.addStep(RemoveDirectory(
        name="remove_build",
        dir=WithProperties("%(distdirname)s"),
        alwaysRun=True));

gal_bld_p8_suse12_rpm = {"name": "p8-suse12-rpm-gal",
                "slavename": "power8-vlp05",
                "builddir": "power8-vlp05-rpm-gal",
                "factory": f_p8_suse12_rpm_gal,
                "nextBuild": myNextBuild,
                "category": "galera",
                }


#-------------------------------------------------------------------------------
# BSD 9 Bintar Builder
#-------------------------------------------------------------------------------
f_bsd9_64_bintar = factory.BuildFactory()
f_bsd9_64_bintar.addStep(
  FileDownload(
  mastersrc=WithProperties("%(tarballpath)s"),
  slavedest=WithProperties("%(distname)s"),
  blocksize=524288,
  doStepIf=branch_is_5_5_or_later
))

f_bsd9_64_bintar.addStep(ShellCommand(
        description="untarring", descriptionDone="untar",
        doStepIf=branch_is_5_5_or_later,
        command=["sh", "-c",
            WithProperties("rm -Rf %(distdirname)s && gzip -dc %(distname)s | gtar xf -")]))

f_bsd9_64_bintar.addStep(
   Compile(command=["sh", "-c", WithProperties("cd %(distdirname)s && BUILD/compile-pentium64-max --extra-configs=--without-plugin_innodb_plugin")],
      logfiles={"config.log" : WithProperties("%(distdirname)s/config.log")},
      doStepIf=branch_is_5_5_or_later,
      env={"EXTRA_FLAGS": "-DFORCE_INIT_OF_VARS",
           "AM_EXTRA_MAKEFLAGS": "VERBOSE=1"}))

f_bsd9_64_bintar.addStep(ShellCommand(
        description="packaging", descriptionDone="package",
      doStepIf=branch_is_5_5_or_later,
        command=["sh", "-c", WithProperties("""
set -ex
cd %(distdirname)s
scripts/make_binary_distribution
ORIG_TAR="`echo mariadb-*.tar.gz`"
ORIG_DIR="`basename ${ORIG_TAR} .tar.gz`"
NEW_DIR="`echo "${ORIG_DIR}" | sed -e 's/-MariaDB//'`"
NEW_TAR="${NEW_DIR}.tar.gz"
if [ "$ORIG_DIR" != "$NEW_DIR" ] ; then
  rm -Rf $ORIG_DIR
  gtar zxf $ORIG_TAR
  mv $ORIG_DIR "${NEW_DIR}"
  gtar zcf "${NEW_TAR}" "${NEW_DIR}/"
fi
echo "${NEW_TAR}" > ../bindistname.txt
""")]))

f_bsd9_64_bintar.addStep(SetPropertyFromCommand(
        property="bindistname",
        command=["cat", "bindistname.txt"],
        doStepIf=branch_is_5_5_or_later
        ))

addPackageArchiveStep(f_bsd9_64_bintar, '"%(distdirname)s/%(bindistname)s"', "%(tarbuildnum)s",
  branch_is_5_5_or_later)

f_bsd9_64_bintar.addStep(getMTR(
        doStepIf=branch_is_5_5_or_later,
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        env={"MTR_FEEDBACK_PLUGIN": "1"},
        command=["sh", "-c", WithProperties("(killall mysqld || true) && cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3 ")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

bld_bsd9_64 = {"name": "bsd9-64",
                "slavename": "bsd9",
                "builddir": "bsd9",
                "factory": f_bsd9_64_bintar,
                "nextBuild": myNextBuild,
                "category": "experimental",
                }

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------

f_kvm_dgcov_jaunty_amd64= factory.BuildFactory()
f_kvm_dgcov_jaunty_amd64.addStep(Compile(
        description=["compiling"],
        descriptionDone=["compile"],
        timeout = 3600,
        logfiles={"kernel": "kernel_2250.log"},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        env={"TERM": "vt102"},
        command=["runvm", "--port=2250", "--memory="+memory_def, "--user=buildbot", "-cpu=qemu64", "--smp=4", "--logfile=kernel_2250.log", "/kvm/vms/vm-lucid-amd64-dgcov.qcow2",
        WithProperties("""
set -ex
rm -Rf build
time bzr co "lp:~maria-captains/maria/%(branch)s" build
cd build
BUILD/autorun.sh
CFLAGS='-fprofile-arcs -ftest-coverage -DDISABLE_TAO_ASM -DHAVE_gcov -O0 -g  -Wno-unused-parameter' CXXFLAGS='-fprofile-arcs -ftest-coverage  -DDISABLE_TAO_ASM -DHAVE_gcov  -O0 -g  -Wno-unused-parameter' LDFLAGS='-fprofile-arcs -ftest-coverage' ./configure --enable-assembler --with-extra-charsets=complex --enable-thread-safe-client --with-big-tables --with-plugin-aria --with-aria-tmp-tables --with-readline --with-debug --with-ssl --with-plugins=max --with-embedded-server --with-libevent --with-zlib-dir=bundled --enable-local-infile
make -j6
""")]))
f_kvm_dgcov_jaunty_amd64.addStep(Test(
            description=["unit", "testing"],
            descriptionDone=["unit", "test"],
            logfiles={"kernel": "kernel_2250.log"},
            timeout=7200,
            doStepIf=branch_is_5_123,
            env={"TERM": "vt102"},
            command=["runvm", "--port=2250", "--memory="+memory_def, "--user=buildbot", "--cpu=qemu64", "--smp=4", "--logfile=kernel_2250.log", "/kvm/vms/vm-lucid-amd64-dgcov.qcow2",
                     "cd build && make test-unit"]))
f_kvm_dgcov_jaunty_amd64.addStep(getMTR(
            test_type="emb",
            test_info="Embedded with",
            logfiles={"kernel": "kernel_2250.log"},
            env={"TERM": "vt102"},
            command=["runvm", "--port=2250", "--memory="+memory_def, "--user=buildbot", "--cpu=qemu64", "--smp=4", "--logfile=kernel_2250.log", "/kvm/vms/vm-lucid-amd64-dgcov.qcow2",
                     "cd build/mysql-test && perl mysql-test-run.pl  --verbose-restart --embedded-server --mem --force --retry=3 --parallel=2 --testcase-timeout=45"]))
f_kvm_dgcov_jaunty_amd64.addStep(getMTR(
            test_type="nm",
            test_info="Normal run, no --ps-protocol",
            logfiles={"kernel": "kernel_2250.log"},
            env={"TERM": "vt102"},
            command=["runvm", "--port=2250", "--memory="+memory_def, "--user=buildbot", "--cpu=qemu64", "--smp=4", "--logfile=kernel_2250.log", "/kvm/vms/vm-lucid-amd64-dgcov.qcow2",
                     "cd build/mysql-test && MTR_FEEDBACK_PLUGIN=1 perl mysql-test-run.pl  --verbose-restart --mem --testcase-timeout=45 --parallel=2 --force --retry=3 --max-save-core=0 --max-save-datadir=1"]))
f_kvm_dgcov_jaunty_amd64.addStep(getMTR(
            test_type="pm",
            test_info="Normal run, with --ps-protocol",
            logfiles={"kernel": "kernel_2250.log"},
            env={"TERM": "vt102"},
            command=["runvm", "--port=2250", "--memory="+memory_def, "--user=buildbot", "--cpu=qemu64", "--smp=4", "--logfile=kernel_2250.log", "/kvm/vms/vm-lucid-amd64-dgcov.qcow2",
                     "cd build/mysql-test && perl mysql-test-run.pl  --verbose-restart --ps-protocol --mem --parallel=2 --force --retry=3 --max-save-core=0 --max-save-datadir=1"]))
f_kvm_dgcov_jaunty_amd64.addStep(getMTR(
            test_type="xtra",
            test_info="Some additional test suites",
            logfiles={"kernel": "kernel_2250.log"},
            env={"TERM": "vt102"},
            command=["runvm", "--port=2250", "--memory="+memory_def, "--user=buildbot", "--cpu=qemu64", "--smp=4", "--logfile=kernel_2250.log", "/kvm/vms/vm-lucid-amd64-dgcov.qcow2",
                     "cd build/mysql-test && perl mysql-test-run.pl  --verbose-restart --suite=funcs_1,funcs_2,stress,jp --mem --parallel=2 --force --retry=3 --testcase-timeout=45 --max-save-core=0 --max-save-datadir=1"]))
f_kvm_dgcov_jaunty_amd64.addStep(Test(
        description=["dgcov'ing"],
        descriptionDone=["dgcov"],
        logfiles={"kernel": "kernel_2250.log"},
        haltOnFailure=False, flunkOnFailure=False, warnOnFailure=True,
        env={"TERM": "vt102"},
        command=["runvm", "--port=2250", "--memory="+memory_def, "--user=buildbot", "--cpu=qemu64", "--smp=4", "--logfile=kernel_2250.log", "/kvm/vms/vm-lucid-amd64-dgcov.qcow2",
                 "cd build && dgcov.pl last:1"]))

bld_kvm_dgcov_jaunty_i386 = {"name": "kvm-dgcov-jaunty-i386",
                             "slavenames": kvm_slaves,
                             "builddir": "kvm-dgcov-jaunty-i386",
                             "factory": f_kvm_dgcov_jaunty_amd64,
                             "nextBuild": myNextBuild,
                             "category": "experimental",
                             }

def getFulltest(buildcmd, vm_img, port, slavenames=kvm_slaves):
    kvm_log = "kernel_"+port+".log"
    kvm_args = ["/usr/local/bin/runvm",
                "--port="+port, "--user=buildbot",
                "--smp=4", "--cpu=qemu64",
                "--logfile="+kvm_log,
                "--memory="+memory_def,
                "--kvm=-hdb", "--kvm=vm-blank-20G.qcow2",
                ]
    tmp_img = "vm-tmp-"+port+".qcow2"

    def mtr_step(name, type, info, args, doRun= True):
        return getMTR(
          name=name,
          test_type=type, test_info=info,
          logfiles={"kernel": kvm_log},
          mtr_subdir=".",    # Where we scp vardir to
          timeout=5000,
          env={"TERM": "vt102"},
          command=kvm_args + [tmp_img,
            WithProperties("""
set -ex
sudo mount /dev/sdb1 /mnt
sudo sysctl fs.aio-max-nr=1048576
cd "buildbot/build/%(distdirname)s/mysql-test"
""" +
              "MTR_FEEDBACK_PLUGIN=1 perl mysql-test-run.pl  --verbose-restart " +
              "--force --retry=3 --max-save-core=0 --max-save-datadir=1 " + args + "\n"),
            WithProperties(
              "!= rm -Rf var/ ; scp -rp -P " + port + " " + kvm_scpopt +
              " buildbot@localhost:buildbot/build/%(distdirname)s/mysql-test/var/ . || :")
          ],
          doStepIf=doRun)

    f= factory.BuildFactory()

    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    f.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))

    f.addStep(ShellCommand(
        description=["rsyncing", "VM"],
        descriptionDone=["rsync", "VM"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+vm_img,
                 "bb01.mariadb.net::kvm/vms/vm-blank-20G.qcow2",
                 "/kvm/vms/"]))

    f.addStep(FileDownload(
        mastersrc=WithProperties("%(tarballpath)s"),
        slavedest=WithProperties("%(distname)s"),
        blocksize=524288,
        ))

    # Extract the compiler warning suppressions file from the source tarball.
    f.addStep(ShellCommand(
        description=["getting", ".supp"],
        descriptionDone=["get", ".supp"],
        command=["sh", "-c", WithProperties("""
qemu-img create -b /kvm/vms/vm-blank-20G.qcow2 -f qcow2 vm-blank-20G.qcow2
#tar zxf "%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
tar zxf "/tmp/buildcache/%(tarbuildnum)s:%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
exit 0  # best-effort, not fatal if no suppression file
""")]))

    f.addStep(Compile(
	timeout=7200,
        description=["building"],
        descriptionDone=["build"],
        logfiles={"kernel": kvm_log},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command= kvm_args +
        ["--base-image=/kvm/vms/"+vm_img, tmp_img,
        "rm -Rf buildbot && sudo mount /dev/sdb1 /mnt && sudo mkdir /mnt/buildbot && sudo chown buildbot:buildbot /mnt/buildbot && ln -s /mnt/buildbot buildbot",
        WithProperties("= scp "+kvm_scpopt+" -P "+port+" %(distname)s buildbot@localhost:buildbot/"),
        WithProperties("""
set -ex
df -kT
mkdir buildbot/build
cd buildbot/build
tar zxf "../%(distname)s"
cd "%(distdirname)s"
""" + buildcmd + "\n"),
         ]))

    f.addStep(Test(
        timeout=14400,
        name="unit",
        description=["unit", "testing"],
        descriptionDone=["unit", "test"],
        doStepIf=branch_is_5_123,
        logfiles={"kernel": kvm_log},
        env={"TERM": "vt102"},
        command=kvm_args + [tmp_img,
        WithProperties("""
set -ex
sudo mount /dev/sdb1 /mnt
cd "buildbot/build/%(distdirname)s"
make test-unit
""")]))

    f.addStep(mtr_step("mtr_emb", "emb", "Embedded",
        "--mem --embedded-server --parallel=4",
        branch_is_not_galera))

    f.addStep(mtr_step("mtr_nm", "n", "Normal (no --ps-protocol)",
        "--mem --parallel=4"))

    f.addStep(mtr_step("mtr_ps", "p", "ps-protocol",
        "--mem --parallel=4 --ps-protocol"))

    f.addStep(mtr_step("mtr_ps_emb", "ps-embedded", "--ps --embedded",
        "--ps --embedded --mem --parallel=4"))

    # See TODO-823 for explanation why open-files-limit and log-warnings are here
    f.addStep(mtr_step("mtr_xtra", "xtra", "Some additional test suites",
        "--mem --suite=funcs_1,funcs_2,stress,jp --big --parallel=2 --testcase-timeout=120 --mysqld=--open-files-limit=0 --mysqld=--log-warnings=1"))

    f.addStep(mtr_step("mtr_engines", "engines", "Engines test suites",
        "--mem --suite=spider,spider/bg,engines/funcs,engines/iuds --big --parallel=2 --testcase-timeout=120 --mysqld=--open-files-limit=0 --mysqld=--log-warnings=1", doRun=branch_is_10_x))

    return f


def getBigtest(buildcmd, vm_img, port, slavenames=kvm_slaves):
    kvm_log = "kernel_"+port+".log"
    kvm_args = ["/usr/local/bin/runvm",
                "--port="+port, "--user=buildbot",
                "--smp=4", "--cpu=qemu64",
                "--logfile="+kvm_log,
                "--memory="+memory_def,
                "--kvm=-hdb", "--kvm=vm-blank-20G.qcow2",
                ]
    tmp_img = "vm-tmp-"+port+".qcow2"

    def mtr_step(name, type, info, args, doRun= True):
        return getMTR(
          name=name,
          test_type=type, test_info=info,
          logfiles={"kernel": kvm_log},
          mtr_subdir=".",    # Where we scp vardir to
          timeout=5000,
          env={"TERM": "vt102", "ASAN_OPTIONS": "abort_on_error=1"},
          command=kvm_args + [tmp_img,
            WithProperties("""
set -ex
sudo mount /dev/sdb1 /mnt
sudo sysctl fs.aio-max-nr=1048576
cd "buildbot/build/%(distdirname)s/mysql-test"
""" +
              "MTR_FEEDBACK_PLUGIN=1 perl mysql-test-run.pl  --verbose-restart " +
              "--force --max-save-core=0 --max-save-datadir=1 --skip-test='rocksdb\..*' " + args + "\n"),
            WithProperties(
              "!= rm -Rf var/ ; scp -rp -P " + port + " " + kvm_scpopt +
              " buildbot@localhost:buildbot/build/%(distdirname)s/mysql-test/var/ . || :")
          ],
          doStepIf=doRun)

    f= factory.BuildFactory()

    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    f.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))

    f.addStep(ShellCommand(
        description=["rsyncing", "VM"],
        descriptionDone=["rsync", "VM"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+vm_img,
                 "bb01.mariadb.net::kvm/vms/vm-blank-20G.qcow2",
                 "/kvm/vms/"]))

    f.addStep(FileDownload(
        mastersrc=WithProperties("%(tarballpath)s"),
        slavedest=WithProperties("%(distname)s"),
        blocksize=524288,
        ))

    # Extract the compiler warning suppressions file from the source tarball.
    f.addStep(ShellCommand(
        description=["getting", ".supp"],
        descriptionDone=["get", ".supp"],
        command=["sh", "-c", WithProperties("""
qemu-img create -b /kvm/vms/vm-blank-20G.qcow2 -f qcow2 vm-blank-20G.qcow2
#tar zxf "%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
tar zxf "/tmp/buildcache/%(tarbuildnum)s:%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
exit 0  # best-effort, not fatal if no suppression file
""")]))

    f.addStep(Compile(
	timeout=7200,
        description=["building"],
        descriptionDone=["build"],
        logfiles={"kernel": kvm_log},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        env={"TERM": "vt102"},
        command= kvm_args +
        ["--base-image=/kvm/vms/"+vm_img, tmp_img,
        "rm -Rf buildbot && sudo mount /dev/sdb1 /mnt && sudo mkdir /mnt/buildbot && sudo chown buildbot:buildbot /mnt/buildbot && ln -s /mnt/buildbot buildbot",
        WithProperties("= scp "+kvm_scpopt+" -P "+port+" %(distname)s buildbot@localhost:buildbot/"),
        WithProperties("""
set -ex
mkdir buildbot/build
cd buildbot/build
tar zxf "../%(distname)s"
cd "%(distdirname)s"
""" + buildcmd + "\n"),
         ]))

    f.addStep(mtr_step("mtr_emb", "emb-big", "Embedded with --big",
        "--embedded-server --big --big --parallel=2 --testcase-timeout=120",
        branch_is_not_galera))

    f.addStep(mtr_step("mtr_nm", "n-big", "Big (no --ps-protocol)",
        "--big --big --parallel=2 --testcase-timeout=120"))

    f.addStep(mtr_step("mtr_ps", "p-big", "ps-protocol big)",
        "--big --big --ps-protocol --parallel=2 --testcase-timeout=120"))

    return f


f_kvm_fulltest= getFulltest(
    'cmake . -DBUILD_CONFIG=mysql_release -DWITH_SSL=system -DWITH_JEMALLOC=auto -DHAVE_EMBEDDED_PRIVILEGE_CONTROL=1 -DWITH_LIBARCHIVE=ON -Wno-dev && make -j5 VERBOSE=1',
    "vm-xenial-amd64-build.qcow2",
    "2271"
    )

# Somehow terrier2 does not seem to be able to shutdown cleanly the VM and
# ends up corrupting the build, causing wierd failures about missing
# my_safe_process in MTR runs. So don't use that host.

# We tried to add bb04 to the list of slaves, but it didn't work,
# see MDEV-10254 for more details
# There was bb05 here, removed (temporarily?)
bld_kvm_fulltest= {
    "name": "kvm-fulltest",
    "slavenames": ["bb01", "bb02", "bb03", "knielsen-kvm-x86", "centos56-quality2", "bb05"],
    "builddir": "kvm-fulltest",
    "factory": f_kvm_fulltest,
    "nextBuild": myNextBuild,
    "category": "main",
    }

# Omit terrier2 from the list of buildslaves. The VM image does not work
# on terrier2 for some reason.
f_kvm_fulltest2= getFulltest(
    'cmake . -DCMAKE_BUILD_TYPE=Debug -DWITH_EMBEDDED_SERVER=1 -DHAVE_EMBEDDED_PRIVILEGE_CONTROL=1 && make -j5 VERBOSE=1',
    "vm-precise-i386-fulltest.qcow2",
    "2272"
    )

bld_kvm_fulltest2= {
    "name": "kvm-fulltest2",
    "slavenames": ["knielsen-kvm-x86", "centos56-quality2", "bb01", "bb02", "bb03", "bb05"],
    "builddir": "kvm-fulltest2",
    "factory": f_kvm_fulltest2,
    "nextBuild": myNextBuild,
    "category": "main",
    }

f_kvm_fulltest_big= getBigtest(
    'cmake . -DBUILD_CONFIG=mysql_release -DWITH_SSL=system -DWITH_JEMALLOC=auto -DHAVE_EMBEDDED_PRIVILEGE_CONTROL=1 -DWITH_ASAN=ON && make -j5 VERBOSE=1',
    "vm-xenial-amd64-build.qcow2",
    "2327"
    )

bld_kvm_fulltest_big= {
    "name": "kvm-fulltest-big",
    "slavenames": ["knielsen-kvm-x86", "centos56-quality2"],
    "builddir": "kvm-fulltest-big",
    "factory": f_kvm_fulltest_big,
    "nextBuild": myNextBuild,
    "category": "main",
    }

f_kvm_fulltest2_big= getBigtest(
    'cmake . -DCMAKE_BUILD_TYPE=Debug -DWITH_EMBEDDED_SERVER=1 -DHAVE_EMBEDDED_PRIVILEGE_CONTROL=1 && make -j5 VERBOSE=1',
    "vm-precise-i386-fulltest.qcow2",
    "2328"
    )

bld_kvm_fulltest2_big= {
    "name": "kvm-fulltest2-big",
    "slavenames": ["knielsen-kvm-x86", "centos56-quality2"],
    "builddir": "kvm-fulltest2-big",
    "factory": f_kvm_fulltest2_big,
    "nextBuild": myNextBuild,
    "category": "main",
    }



def getConnectorCBuilder(name, kvm_image, port, cpu):
    bin_fact = factory.BuildFactory()
    # Delete ../build/* rather than simply * just to be a little safer if we
    # somehow end up running in wrong directory!
    bin_fact.addStep(ShellCommand(
        description=["cleaning", "build", "dir"],
        descriptionDone=["clean", "build", "dir"],
        command=["sh", "-c", "rm -Rf ../build/*"]))
    bin_fact.addStep(ShellCommand(
        description=["rsyncing", "VMs"],
        descriptionDone=["rsync", "VMs"],
        doStepIf=(lambda(step): step.getProperty("slavename") != "bb01"),
        haltOnFailure=True,
        command=["rsync", "-a", "-v", "-L",
                 "bb01.mariadb.net::kvm/vms/"+kvm_image+"-build.qcow2",
                 "/kvm/vms/"]))
    bin_fact.addStep(Compile(
        description=["making", "bintar"],
        descriptionDone=["make", "bintar"],
        timeout=3600,
        logfiles={"kernel": "kernel_"+port+".log"},
        env={"TERM": "vt102"},
        command=["runvm", "--port="+port, "--memory="+memory_def, "--user=buildbot", "--cpu="+cpu, "--smp=4", "--logfile=kernel_"+port+".log", "--base-image=/kvm/vms/"+kvm_image+"-build.qcow2", "--work-image=/dev/shm/vm-tmp-"+port+".qcow2", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("""
set -ex
cd buildbot
rm -Rf build
bzr co lp:mariadb-native-client build
cd build
cmake .
make package
echo *.tar.gz > ../bindistname.txt
#mv "$(cat ../../bindistname.txt)" ../
"""),
        WithProperties("= scp -P "+port+" "+kvm_scpopt+" 'buildbot@localhost:buildbot/build/*.tar.gz' ."),
        "= scp -P "+port+" "+kvm_scpopt+" buildbot@localhost:buildbot/bindistname.txt .",
]))
    bin_fact.addStep(SetPropertyFromCommand(
        property="bindistname",
        command=["cat", "bindistname.txt"],
        ))
    addPackageArchiveStep(bin_fact, '"%(bindistname)s"', "%(revision)s")
    return {'name': name, 'slavenames': ["knielsen-kvm-x86", "centos56-quality2"], 'builddir': name, 'factory': bin_fact,
            "nextBuild": myNextBuild,
            "category": "connectors" }

f_starfs_debug = factory.BuildFactory()
f_starfs_debug.addStep(maybe_bzr_checkout)
f_starfs_debug.addStep(maybe_git_checkout)
f_starfs_debug.addStep(getCompileStep(["sh", "-c", "cmake . -DCMAKE_BUILD_TYPE=Debug && make"]))
f_starfs_debug.addStep(getMTR(
        test_type="nm",
        test_info="Debug run, no --ps-protocol",
        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --parallel=2 --force --retry=3 --testcase-timeout=60  --suite-timeout=1200 --max-test-fail=100 --max-save-core=0 --max-save-datadir=1"],
        parallel=2))

f_starfs_debug.addStep(getMTR(
        test_type="pm",
        test_info="Debug run, --ps-protocol",
        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --ps-protocol --parallel=2 --force --retry=3 --testcase-timeout=60  --suite-timeout=1200 --max-test-fail=100 --max-save-core=0 --max-save-datadir=1"],
        parallel=2))

bld_starfs_debug = {'name': "bld-starfs-debug",
                'slavenames': ["starfsmenn1", "starfsmenn2"],
                'builddir': "starfsmenn1",
                'factory': f_starfs_debug,
                "nextBuild": myNextBuild,
                "category": "experimental",
                }


f_starfs_release = factory.BuildFactory()
f_starfs_release.addStep(maybe_bzr_checkout)
f_starfs_release.addStep(maybe_git_checkout)
f_starfs_release.addStep(getCompileStep(["sh", "-c", "cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DWITH_EXTRA_CHARSETS=complex -DWITH_SSL=bundled -DPLUGIN_PERFSCHEMA=NO -DCMAKE_VERBOSE_MAKEFILE=1 && make -j3"]))
f_starfs_release.addStep(getMTR(
        test_type="nm",
        test_info="Non-debug run, no --ps-protocol",
        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --parallel=2 --force --retry=3  --max-test-fail=100 --max-save-core=0 --max-save-datadir=1 --testcase-timeout=60 --suite-timeout=1200"],
        timeout=14400,
        parallel=2))

f_starfs_release.addStep(getMTR(
        test_type="pm",
        test_info="Non-debug run, --ps-protocol",
        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --ps-protocol --parallel=2 --force --retry=3  --max-test-fail=100 --max-save-core=0 --max-save-datadir=1 --testcase-timeout=60 --suite-timeout=1200"],
        timeout=14400,
        parallel=2))

bld_starfs_release = {'name': "bld-starfs-release",
                'slavenames': ["starfsmenn1", "starfsmenn2"],
                'builddir': "starfsmenn2",
                'factory': f_starfs_release,
                "nextBuild": myNextBuild,
                "category": "experimental",
                }

c['builders'] = [
                bld_work_valgrind, bld_gcov,
                bld_xenial_valgrind,
		bld_compile_connectors, bld_test_handlersocket, bld_customer_data,
                 bld_kvm_tarbake_jaunty_x86,
                 bld_kvm_rpm_centos6_x86, bld_kvm_rpm_centos6_amd64,
                 bld_kvm_rpm_centos7_amd64,
                 bld_kvm_rpm_centos73_amd64,
                 bld_kvm_rpm_centos73_ppc64,
                 bld_kvm_rpm_centos73_ppc64le,
                 bld_kvm_rpm_centos74_amd64,
                 bld_kvm_zyp_opensuse42_amd64,
                 bld_kvm_zyp_sles11_x86,
                 bld_kvm_zyp_sles11_amd64,
                 bld_kvm_zyp_sles11sp1_amd64,
                 bld_kvm_zyp_sles114_x86, bld_kvm_zyp_sles114_amd64,
                 bld_kvm_zyp_sles12_amd64,
                 bld_kvm_rpm_fedora25_x86, bld_kvm_rpm_fedora25_amd64,
                 bld_kvm_rpm_fedora26_amd64,
                 bld_kvm_rpm_fedora27_amd64,
                 bld_kvm_deb_wheezy_amd64, bld_kvm_deb_wheezy_x86,
                 bld_kvm_deb_jessie_amd64, bld_kvm_deb_jessie_x86,
                 bld_kvm_deb_jessie_ppc64le,
                 bld_kvm_deb_stretch_amd64, bld_kvm_deb_stretch_x86,
                 bld_kvm_deb_stretch_ppc64le,
                 bld_kvm_deb_sid_amd64, bld_kvm_deb_sid_x86,
                 bld_kvm_deb_trusty_amd64, bld_kvm_deb_trusty_x86,
                 bld_kvm_deb_trusty_ppc64le,
                 bld_kvm_deb_xenial_amd64, bld_kvm_deb_xenial_x86,
                 bld_kvm_deb_xenial_ppc64le,
                 bld_kvm_deb_zesty_amd64, bld_kvm_deb_zesty_x86,
                 bld_kvm_deb_artful_amd64, bld_kvm_deb_artful_x86,
                 bld_kvm_bintar_trusty_amd64, bld_kvm_bintar_trusty_x86,
                 bld_kvm_bintar_quantal_amd64, bld_kvm_bintar_quantal_x86,
                 bld_kvm_bintar_centos5_amd64, bld_kvm_bintar_centos5_x86,
                 bld_kvm_freebsd11_amd64, bld_kvm_freebsd11_x86,
               bld_winx64_packages,
               bld_win32_packages,
		bld_win32_debug,
		bld_winx64_debug,

                 bld_sol10_64,
                 bld_kvm_dgcov_jaunty_i386,
                 bld_kvm_fulltest,
                 bld_kvm_fulltest2,
                 bld_kvm_fulltest_big,
                 bld_kvm_fulltest2_big,
                 bld_labrador,
                 bld_mac_1012_bintar,
                 bld_mac_1012_pkg,
                 bld_win_rqg_se,
                 bld_win_rqg_debug,
                bld_win_jdbc,
                bld_win_connector_c,
                bld_win_connector_c_3,
                bld_freebsd_x64_connector_c,
                bld_freebsd11_x64_connector_c,
                bld_freebsd11_x86_connector_c,
                bld_linux_x64_connector_c,
                bld_linux_x86_connector_c,
                bld_centos6_i386_connector_c,
                # Current ga c/odbc version
                bld_win_connector_odbc,
                bld_linux_x64_connector_odbc,
                bld_linux_x86_connector_odbc,
                bld_centos7_x86_connector_odbc,
                bld_centos7_x64_connector_odbc,
                bld_jessie_x86_connector_odbc,
                bld_jessie_x64_connector_odbc,
                bld_generic_x86_connector_odbc,
                bld_generic_x64_connector_odbc,
                # Current "new" c/odbc version
                bld_win_connector_odbc_new,
                bld_linux_x64_connector_odbc_new,
                bld_linux_x86_connector_odbc_new,
                bld_centos7_x64_connector_odbc_new,
                bld_jessie_x86_connector_odbc_new,
                bld_jessie_x64_connector_odbc_new,
                bld_generic_x86_connector_odbc_new,
                bld_generic_x64_connector_odbc_new,
                bld_centos7_x86_connector_odbc_new,
                bld_starfs_debug,
                bld_starfs_release,
                bld_p8_rhel6_bintar,
                bld_p8_rhel6_bintar_debug,
                bld_p8_rhel7_bintar,
                bld_p8_rhel7_bintar_debug,
                bld_p8_rhel71_bintar,
                bld_p8_rhel71_bintar_debug,
                bld_p8_rhel6_rpm,
                bld_p8_rhel7_rpm,
                bld_p8_rhel71_rpm,
                bld_p8_suse12_rpm,

                # galera package builders
                gal_bld_kvm_rpm_centos6_x86, gal_bld_kvm_rpm_centos6_amd64,
                gal_bld_kvm_rpm_centos7_amd64,
                gal_bld_kvm_rpm_centos73_amd64,
                gal_bld_kvm_rpm_centos73_ppc64,
                gal_bld_kvm_rpm_centos73_ppc64le,
                gal_bld_kvm_rpm_centos74_amd64,
                gal_bld_kvm_rpm_fedora25_x86, gal_bld_kvm_rpm_fedora25_amd64,
                gal_bld_kvm_rpm_fedora26_amd64,
                gal_bld_kvm_rpm_fedora27_amd64,
                gal_bld_kvm_deb_wheezy_amd64, gal_bld_kvm_deb_wheezy_x86,
                gal_bld_kvm_deb_jessie_amd64, gal_bld_kvm_deb_jessie_x86,
                gal_bld_kvm_deb_jessie_ppc64le,
                gal_bld_kvm_deb_stretch_amd64, gal_bld_kvm_deb_stretch_x86,
                gal_bld_kvm_deb_stretch_ppc64le,
                gal_bld_kvm_deb_sid_amd64, gal_bld_kvm_deb_sid_x86,
                gal_bld_kvm_deb_precise_amd64, gal_bld_kvm_deb_precise_x86,
                gal_bld_kvm_deb_trusty_amd64, gal_bld_kvm_deb_trusty_x86,
                gal_bld_kvm_deb_trusty_ppc64le,
                gal_bld_kvm_deb_xenial_amd64, gal_bld_kvm_deb_xenial_x86,
                gal_bld_kvm_deb_xenial_ppc64le,
                gal_bld_kvm_deb_zesty_amd64, gal_bld_kvm_deb_zesty_x86,
                gal_bld_kvm_deb_artful_amd64, gal_bld_kvm_deb_artful_x86,
                gal_bld_kvm_zyp_opensuse42_amd64,
                gal_bld_kvm_zyp_sles11_x86, gal_bld_kvm_zyp_sles11_amd64,
                gal_bld_kvm_zyp_sles114_x86, gal_bld_kvm_zyp_sles114_amd64,
                gal_bld_kvm_zyp_sles12_amd64, gal_bld_kvm_zyp_sles11sp1_amd64,
                # Power8
                gal_bld_p8_rhel6_rpm, gal_bld_p8_rhel7_rpm,
                gal_bld_p8_rhel71_rpm,
                gal_bld_p8_suse12_rpm,

                ]


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8010, allowForce=True))

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8011, allowForce=False,
    change_hook_dialects={ 'github' : True },
    change_hook_auth=["file:changehook.passwd"]))

from buildbot.status import words
irc = words.IRC("irc.freenode.net", "mariabuildbot",
                channels=["maria"],
                password=configDict["cfg"]["ircPassword"],
                notify_events={
                  "exception": 1,
                  "successToFailure": 1,
                  "failureToSuccess": 1,
                },
                allowForce=True,
                )
# Disable it until we fix it to only notify about main trees.
#c["status"].append(irc)


from buildbot.status import mail
c['status'].append(mail.MailNotifier(fromaddr="buildbot-reports@hasky.askmonty.org",
                                      extraRecipients=["maria-buildbot-reports@lists.askmonty.org"],
                                      sendToInterestedUsers=False))

####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "MariaDB"
c['projectURL'] = "http://mariadb.org/jira"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://buildbot.askmonty.org/buildbot/"

c['buildHorizon'] = 250
c['logHorizon'] = 200
c['buildCacheSize'] = 5000
c['changeCacheSize'] = 10000
