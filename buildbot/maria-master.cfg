# -*- python -*-
# ex: set syntax=python:

# Master configuration file for MariaDB buildbot.
# Copyright (C) 2009  Monty Program AB.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# We load the slave and database passwords from an external file, so
# that the rest of the configuration can be public.
configDict= { "cfg": { } }
execfile("/etc/buildbot/maria-master-private.cfg", configDict, { })


####### BUILDSLAVES

def mkSlave(name, **kwargs):
    return BuildSlave(name, configDict["cfg"]["slavePasswords"][name], **kwargs)

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a tuple of bot-name and bot-password. These correspond to values given to
# the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave
c['slaves'] = [mkSlave("valgrind", max_builds=2)
              ,mkSlave("pcrews-win", max_builds=1)
              ,mkSlave("centos5", max_builds=1)
              ,mkSlave("archivist-cnc", max_builds=1)
              ,mkSlave("archivist-amd64", max_builds=1)
#              ,mkSlave("adutko-amd64", max_builds=1)
#              ,mkSlave("adutko-alpha", max_builds=1)
              ,mkSlave("toby-sol10", max_builds=1)
              ,mkSlave("toby-sol10-sparc", max_builds=1)
              ,mkSlave("psergey-pylon-x86", max_builds=1)
              ,mkSlave("psergey-pylon-amd64", max_builds=1)
              ,mkSlave("psergey-foxhole-x86", max_builds=1)
              ,mkSlave("psergey-pslp2-x86", max_builds=1)
              ,mkSlave("work-opensuse-amd64", max_builds=1)
              ,mkSlave("psergey-win32box", max_builds=1)
              ,mkSlave("vm-win-1", max_builds=1)
              ,mkSlave("bo-win-1", max_builds=1)
              ,mkSlave("sanja-gentoo-x86_64", max_builds=1)
              ,mkSlave("sanja-mac-x86", max_builds=1)
              ,mkSlave("knielsen-kvm-x86", max_builds=3)
              ,mkSlave("opensolaris-x86", max_builds=1)
              ,mkSlave("adutko-centos5-amd64", max_builds=1)
              ,mkSlave("mariadb-brs", max_builds=1)
              ,mkSlave("adutko-ultrasparc3", max_builds=1)
              ,mkSlave("philip-fedora13-quality1", max_builds=1)
               ]

# to limit to two concurrent builds on a slave, use
#  c['slaves'] = [BuildSlave("bot1name", "bot1passwd", max_builds=2)]


# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

# Get changes from Launchpad branch subscription emails.
# This requires that buildbot@askmonty.org be subscribed to each branch to be tracked.
from buildbot.changes import mail
myBranchMap = { "lp:~maria-captains/maria/5.1" : "5.1",
                "lp:~maria-captains/maria/5.2" : "5.2",
                "lp:~maria-captains/maria/6.0" : "6.0",
                "lp:~maria-captains/maria/maria-5.1-testing1" : "maria-5.1-testing1",
                "lp:~maria-captains/maria/maria-6.0-testing1" : "maria-6.0-testing1",
                "lp:~maria-captains/maria/maria-5.1-virtualcolumns" : "maria-5.1-virtualcolumns",
                "lp:~maria-captains/maria/mysql-5.0-keycachebackport5.1" : "mysql-5.0-keycachebackport5.1",
                "lp:~maria-captains/maria/mariadb-xtradb-merge2" : "mariadb-xtradb-merge2",
                "lp:~maria-captains/maria/mysql-5.1-testing" : "mysql-5.1-testing",
                "lp:~maria-captains/maria/mysql-6.0-testing2" : "mysql-6.0-testing2",
                "lp:~maria-captains/maria/mariadb-5.1-knielsen" : "mariadb-5.1-knielsen",
                "lp:~maria-captains/maria/mariadb-5.2-knielsen" : "mariadb-5.2-knielsen",
                "lp:~maria-captains/maria/mariadb-5.1-monty" : "mariadb-5.1-monty",
                "lp:~maria-captains/maria/mariadb-5.2-monty" : "mariadb-5.2-monty",
                "lp:~maria-captains/maria/mariadb-5.1-bothorsen" : "mariadb-5.1-bothorsen",
                "lp:~maria-captains/maria/5.1-release" : "5.1-release",
                "lp:~maria-captains/maria/5.1-merge" : "5.1-merge",
                "lp:~maria-captains/maria/maria-5.1-wl24" : "maria-5.1-wl24",
                "lp:~maria-captains/maria/maria-5.1-vcol" : "maria-5.1-vcol",
                "lp:~maria-captains/maria/maria-5.1-wl36" : "maria-5.1-wl36",
                "lp:~maria-captains/maria/mysql-5.1-mwl36" : "mysql-5.1-mwl36",
                "lp:~maria-captains/maria/5.1.39-oqgraph" : "5.1.39-oqgraph",
                "lp:~maria-captains/maria/maria-5.2-merge-5.1" : "maria-5.2-merge-5.1",
                "lp:~maria-captains/maria/5.2-dsmrr" : "5.2-dsmrr",
                "lp:~maria-captains/maria/5.3" : "5.3",
                "lp:~maria-captains/maria/5.3-dsmrr-cpk" : "5.3-dsmrr-cpk",
                "lp:~maria-captains/maria/5.3-subqueries" : "5.3-subqueries",
                "lp:~maria-captains/maria/5.3-merge-from-5.2" : "5.3-merge-from-5.2",
                "lp:~maria-captains/maria/5.3-subqueries-mwl90" : "5.3-subqueries-mwl90",
                "lp:~maria-captains/maria/maria-5.2-wl85" : "maria-5.2-wl85",
		"lp:~maria-captains/maria/5.3-mwl-66" : "5.3-mwl-66"
                }
mailSource = mail.BzrLaunchpadEmailMaildirSource("/var/lib/buildbot/Maildir",
                                                 branchMap=myBranchMap)
c['change_source'] = [mailSource]

# For example, if you had CVSToys installed on your repository, and your
# CVSROOT/freshcfg file had an entry like this:
#pb = ConfigurationSet([
#    (None, None, None, PBService(userpass=('foo', 'bar'), port=4519)),
#    ])

# then you could use the following buildmaster Change Source to subscribe to
# the FreshCVS daemon and be notified on every commit:
#
#from buildbot.changes.freshcvs import FreshCVSSource
#fc_source = FreshCVSSource("cvs.example.com", 4519, "foo", "bar")
#c['change_source'] = fc_source

# or, use a PBChangeSource, and then have your repository's commit script run
# 'buildbot sendchange', or use contrib/svn_buildbot.py, or
# contrib/arch_buildbot.py :
#
#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()


####### SCHEDULERS

## configure the Schedulers

from buildbot.scheduler import AnyBranchScheduler, Triggerable
c['schedulers'] = []
c['schedulers'].append(AnyBranchScheduler(
    name="mariadb",
    branches=["5.1", "5.2", "6.0", "maria-5.1-testing1", "maria-6.0-testing1",
              "mariadb-xtradb-merge2",
              "mysql-5.1-testing", "mysql-6.0-testing2",
              "mariadb-5.1-monty", "mariadb-5.2-monty",
              "mariadb-5.1-bothorsen",
              "mariadb-5.1-knielsen", "mariadb-5.2-knielsen", "5.1-release", "5.1-merge",
              "maria-5.1-wl24", "maria-5.1-vcol","maria-5.1-wl36","mysql-5.1-mwl36",
              "5.1.39-oqgraph", "5.2-dsmrr", "5.3", "5.3-dsmrr-cpk", "5.3-subqueries",
              "5.3-merge-from-5.2",
              "5.3-subqueries-mwl90",
              "maria-5.2-wl85",
              "5.3-mwl-66"
              ],
    treeStableTimer=60, # 1 sec for bzr
    builderNames=["centos5-debug", "hardy-amd64-makedist",
#                  "lenny-amd64-dbg", "adutko-alpha",
                  "debian5-i386-fulltest",
                  "jaunty-x86-valgrind", "jaunty-amd64-rel",
                  "gentoo-x86-dbg", "ubuntu-x86-dbg",
                  "macosx-x86-bld", "work-amd64-valgrind", "winxp-x86-nmake",
                  "win32-rel-nmake", "hardy-amd64-fulltest",
                  "gentoo-amd64-sanja",
#                  "opensolaris-511-x86",
                  "sol10-amd64-dbg", "sol10-sparc32-forte", "sol10-sparc64-forte",
                  "sol-sparc-32"]))

# A scheduler for less powerful hosts, only run on most important branches.
c['schedulers'].append(AnyBranchScheduler(
    name="mariadb-light",
    branches=["5.1", "5.2",
              "mariadb-5.1-knielsen", "mariadb-5.2-knielsen",
              "5.1-release", "5.1-merge",
              "5.2-release", "5.2-merge",
              "5.3-release", "5.3-merge",
              ],
    treeStableTimer=60, # 1 sec for bzr
    builderNames=["hardy-x86-rtai", "hardy-amd64-dbg",
                  ]))

# A scheduler for RQG tests that runs stable tests on main branches only 

c['schedulers'].append(AnyBranchScheduler(
    name="mariadb-rqg-main",
    branches=["5.1", "5.2",
              "5.1-release", "5.1-merge",
              "5.2-release", "5.2-merge",
              "5.3-release", "5.3-merge",
              ],
    treeStableTimer=60, # 1 sec for bzr
    builderNames=["rqg-perpush-main"
                  ]))

# A scheduler for RQG tests that runs Optimizer tests on Optimizer branches
c['schedulers'].append(AnyBranchScheduler(
    name="mariadb-rqg-optimizer",
    branches=["5.3", "5.3-subqueries-mwl90", "5.3-subqueries", "5.3-dsmrr-cpk", "5.2-dsmrr", "maria-5.1-vcol",
              "5.3-mwl-66", "5.3-mwl68"
              ],
    treeStableTimer=60, # 1 sec for bzr
    builderNames=["rqg-perpush-optimizer"
                  ]))

# A scheduler for RQG tests that runs Maria storage engine tests, e.g. recovery
c['schedulers'].append(AnyBranchScheduler(
    name="mariadb-rqg-mariaengine",
    branches=["5.1", "5.2", "5.3"
              ],
    treeStableTimer=60, # 1 sec for bzr
    builderNames=["rqg-perpush-mariaengine"
                  ]))

c['schedulers'].append(Triggerable(
        name="tarbuild-sched",
        builderNames=["win32-tarball", "win32-make-noinstall-zip", "centos5-amd64-minimal"]))

# A scheduler for testing kvm virtual machine builder.
c['schedulers'].append(AnyBranchScheduler(
    name="kvmtest",
    branches=["mariadb-5.1-knielsen", "5.1-release", "5.1",
              "5.1.39-oqgraph", "5.1-merge",
              "mariadb-5.1-monty",
              "5.2", "mariadb-5.2-knielsen", "mariadb-5.2-monty",
              ],
    treeStableTimer=60, # 1 sec for bzr
    properties= {"bakebranch": "lp:~maria-captains/ourdelta/ourdelta-montyprogram-fixes"},
    builderNames=["kvm-tarbake-jaunty-x86"]))

# A scheduler for testing ourdelta package builds from source tarball
# and pre-heated bakery.
c['schedulers'].append(Triggerable(
        name="kvm-ourdelta-sched",
        builderNames=["kvm-zip-winxp-x86", "kvm-rpm-centos5-x86", "kvm-rpm-centos5-amd64",
                      "kvm-deb-debian5-amd64", "kvm-deb-debian5-x86",
                      "kvm-deb-debian4-amd64", "kvm-deb-debian4-x86",
                      "kvm-deb-hardy-amd64", "kvm-deb-hardy-x86",
                      "kvm-deb-intrepid-amd64", "kvm-deb-intrepid-x86",
                      "kvm-deb-jaunty-amd64", "kvm-deb-jaunty-x86",
                      "kvm-deb-karmic-amd64", "kvm-deb-karmic-x86",
                      "kvm-deb-lucid-amd64", "kvm-deb-lucid-x86",
                      "kvm-bintar-hardy-amd64", "kvm-bintar-hardy-x86",
                      "opensolaris-511-bintar",
                      ]))


####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['bots']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

cvsroot = ":pserver:anonymous@cvs.sourceforge.net:/cvsroot/buildbot"
cvsmodule = "buildbot"

from buildbot.process import factory
from buildbot.steps.source import Bzr
from buildbot.steps.shell import ShellCommand, Compile, Test, SetProperty
from buildbot.process.mtrlogobserver import MTR, MtrLogObserver, EqConnectionPool
from buildbot.steps.transfer import FileUpload, FileDownload, DirectoryUpload
from buildbot.process.properties import WithProperties
from buildbot.steps.trigger import Trigger

gccWarningPattern= "^(.*?):([0-9]+): [Ww]arning: (.*)$"

def getCompileStep(cmd, subdir="", **kwargs):
    return Compile(command=cmd,
                   warningPattern=gccWarningPattern,
                   warningExtractor=Compile.warnExtractFromRegexpGroups,
                   suppressionFile=WithProperties(subdir + "support-files/compiler_warnings.supp"),
                   **kwargs
                   )

# The private config file instantiates an instance of EqConnectionPool("MySQLdb", ...)
# with the correct database account password etc.
connection_pool = configDict["cfg"]["connectionPool"]

def getMTR(**kwargs):
    return MTR(
        dbpool=connection_pool,
        warningPattern="MTR's internal check of the test case '.*' failed",
        **kwargs)

def getCloneVM(src, dst):
    return ShellCommand(
        description=["cloning", "vm"],
        descriptionDone=["clone", "vm"],
        command=["qemu-img", "create", "-b", "/kvm/vms/" + src, "-f", "qcow2", dst]);

# Have a nice fat checkout timeout.
# Bzr branching can be _really_ slow, especially on modest 'net connections.
bzr_checkout = Bzr(baseURL="http://bazaar.launchpad.net/%7Emaria-captains/maria/",
                   defaultBranch="5.1",
                   mode="clobber",
                   forceSharedRepo=True,
                   timeout = 4*3600)

# The forceSharedRepo is only available if build slaves install a recent
# version of Buildbot (at the time of writing from custom branch on github).
# As a work-around, we can instead run this build step before the checkout
# step, which is compatible with older versions of Buildbot on the slave side.
# Note that this is actually only necessary to run on the first checkout;
# after that it can be removed from the config to reduce clutter on the
# status web page.
bzr_shared_repo = ShellCommand(
                        workdir=".",
                        command=["sh", "-c", "bzr info . || bzr init-repo ."],
                        description=["making", "shared", "repo"],
                        descriptionDone=["make", "shared", "repo"])

# The first full checkout from Launchpad can take a _long_ time, as it needs
# to download some 600MByte of data.
# So use this step initially to avoid timeout, and switch to the normal one
# later when the bzr shared repository has been filled.
bzr_checkout_init_timeout = Bzr(baseURL="http://bazaar.launchpad.net/%7Emaria-captains/maria/",
                                defaultBranch="5.1",
                                mode="clobber",
                                forceSharedRepo=True,
                                timeout = 6*3600)

f1 = factory.BuildFactory()
f1.addStep(bzr_checkout)
f1.addStep(getCompileStep(["BUILD/compile-amd64-valgrind-max"],
                          env={"EXTRA_FLAGS": "-O3 -fno-omit-frame-pointer -Wno-uninitialized"}))
f1.addStep(getMTR(
        test_type="nm",
        test_info="Valgrind run, no --ps-protocol",
        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl --mem --parallel=3 --valgrind --valgrind-option=--show-reachable=yes --valgrind-option=--gen-suppressions=all --force --retry=3 --skip-ndb"]))

bld_valgrind = {'name': "hardy-amd64-valgrind",
                'slavename': "valgrind",
                'builddir': "valgrind",
                'factory': f1,
                "category": "main",
                }

bld_work_valgrind = {'name': "work-amd64-valgrind",
                'slavename': "work-opensuse-amd64",
                'builddir': "work-opensuse-amd64",
                'factory': f1,
                "category": "main",
                }

f_valgr_32 = factory.BuildFactory()
f_valgr_32.addStep(bzr_checkout)
f_valgr_32.addStep(getCompileStep(["BUILD/compile-pentium-valgrind-max"],
                                  env={"EXTRA_FLAGS": "-O3 -fno-omit-frame-pointer -Wno-uninitialized"}))
f_valgr_32.addStep(getMTR(
        test_type="nm",
        test_info="Valgrind run, no --ps-protocol",
        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl --valgrind --force --retry=3 --skip-ndb --parallel=2"],
        timeout = 3600))

bld_valgrind_32 = {'name': "jaunty-x86-valgrind",
                   'slavename': "psergey-pylon-x86",
                   'builddir': "psergey-pylon-x86",
                   'factory': f_valgr_32,
                   "category": "experimental",
                }


f_makedist = factory.BuildFactory()
# We have the problem that `make dist`, when it fails, can leave
# behind a chmod 000 directory that `rm -Rf` fails to remove.
# This needs to be fixed in the slave checkout step, but until it is, this
# workaround makes things at least not require manual fixing.
f_makedist.addStep(ShellCommand(
        description=["cleaning"], descriptionDone=["clean"],
        workdir=".",
        command=["sh", "-c", WithProperties("rm -Rf build || (chmod -R u+rwx build && rm -Rf build)")]))
f_makedist.addStep(bzr_checkout)
f_makedist.addStep(getCompileStep(
        ["sh", "-c", "BUILD/compile-dist && make dist"],
        description=["making", "dist"],
        descriptionDone=["make", "dist"]))
# Get the basename of the source tarball (not all trees support
# `make show-dist-name`, so fallback to parsing the configure.in).
f_makedist.addStep(SetProperty(property="distname",
                               command=["sh", "-c", "make show-dist-name 2>/dev/null || perl -nle 'print \"$1-$2\" if /AM_INIT_AUTOMAKE\((.*), (.*)\)/' configure.in"]))
f_makedist.addStep(FileUpload(slavesrc=WithProperties("%(distname)s.tar.gz"),
                              masterdest=WithProperties("/var/lib/buildbot/tarballs/%(buildnumber)s:%(distname)s.tar.gz")))
f_makedist.addStep(Trigger(
            schedulerNames=["tarbuild-sched"],
            waitForFinish=False,
            updateSourceStamp=True,
            set_properties={ "tarballpath": WithProperties("/var/lib/buildbot/tarballs/%(buildnumber)s:%(distname)s.tar.gz") },
            copy_properties=[ "distname" ]))
f_makedist.addStep(getCompileStep(
        ["make", "distcheck"],
        description=["making", "distcheck"],
        descriptionDone=["make", "distcheck"]))
f_makedist.addStep(ShellCommand(
        description="untarring", descriptionDone="untar",
        command=["sh", "-c", WithProperties("find . -maxdepth 1 -mindepth 1 -not -name '%(distname)s.tar.gz' -exec rm -Rf '{}' '+' && tar zxf %(distname)s.tar.gz")]))
# Can't easily get the compiler_warnings.supp file here for warning parsing,
# as the suppression feature does not support WithProperties yet :-(
f_makedist.addStep(getCompileStep(
        ["sh", "-c", WithProperties("X=\"$(pwd)\"; cd %(distname)s && CC=\"gcc -static-libgcc\" CXX=\"g++ -static-libgcc\" CFLAGS=\"-O2 -fno-omit-frame-pointer -g\" CXXFLAGS=\"-O2 -fno-omit-frame-pointer -g\" ./configure --enable-shared --enable-static --enable-thread-safe-client --enable-local-infile --with-big-tables --with-libwrap --with-ssl --without-docs --with-readline --with-extra-charsets=all --with-embedded-server --with-libevent --with-partition --with-zlib-dir=bundled --with-plugins=max-no-ndb \"--prefix=$X/install\" && make -j4 && make install && cd .. && rm -Rf %(distname)s")],
        "%(distname)s/",
        description=["making", "install"],
        descriptionDone=["make", "install"],
        ))
f_makedist.addStep(getMTR(
        test_type="nm",
        test_info="Makedist, no --ps-protocol",
        mtr_subdir="install/mysql-test",
        command=["sh", "-c", "cd install/mysql-test && exec perl mysql-test-run.pl --mem --parallel=4 --force --retry=3 --max-test-fail=100"]))
f_makedist.addStep(getMTR(
        test_type="pm",
        test_info="Makedist, with --ps-protocol",
        mtr_subdir="install/mysql-test",
        command=["sh", "-c", "cd install/mysql-test && exec perl mysql-test-run.pl --mem --parallel=4 --force --retry=3 --ps-protocol --max-test-fail=100"]))
f_makedist.addStep(getMTR(
        test_type="emb",
        test_info="Embedded server",
        mtr_subdir="install/mysql-test",
        command=["sh", "-c", "cd install/mysql-test && exec perl mysql-test-run.pl --mem --parallel=4 --force --retry=3 --embedded-server --max-test-fail=100"]))
f_makedist.addStep(getMTR(
        test_type="pbxt",
        test_info="PBXT run",
        mtr_subdir="install/mysql-test",
        command=["sh", "-c", "cd install/mysql-test && exec perl mysql-test-run.pl --force --retry=3 --mem --parallel=4 --skip-ndb --mysqld=--default-storage-engine=pbxt --suite=pbxt"]))

bld_makedist = {"name": "hardy-amd64-makedist",
                "slavename": "valgrind",
                "builddir": "makedist",
                "factory": f_makedist,
                "category": "main",
                }


compile_dbg_64 = getCompileStep(["BUILD/compile-pentium64-debug-max"])
test_2 = getMTR(
    test_type="nm",
    test_info="Normal run, no --ps-protocol",
    command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl --parallel=2 --force --retry=3 --skip-ndb"])

# Try if a longer timeout avoids problem in innodb_xtradb_bug317074 test.
test_longtimeout = getMTR(
    test_type="nm",
    test_info="Normal run, no --ps-protocol",
    command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl --force --retry=3 --skip-ndb --testcase-timeout=45 --mysqld=--skip-safemalloc"],
    timeout=2700)

f_dbg_2_64 = factory.BuildFactory()
f_dbg_2_64.addStep(bzr_checkout)
f_dbg_2_64.addStep(compile_dbg_64)
f_dbg_2_64.addStep(test_longtimeout)

f_dbg_2_64_mkshr = factory.BuildFactory()
f_dbg_2_64_mkshr.addStep(bzr_shared_repo)
f_dbg_2_64_mkshr.addStep(bzr_checkout_init_timeout)
f_dbg_2_64_mkshr.addStep(compile_dbg_64)
f_dbg_2_64_mkshr.addStep(test_2)

f_rel_1_32 = factory.BuildFactory()
f_rel_1_32.addStep(bzr_checkout)
f_rel_1_32.addStep(getCompileStep(["BUILD/compile-pentium-max"],
                                  env={"AM_MAKEFLAGS": "-j1", "EXTRA_FLAGS": "-DFORCE_INIT_OF_VARS"}))
# --testcase-timeout as this host is really slow at some tests.
f_rel_1_32.addStep(getMTR(
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl --force --retry=3 --skip-ndb --testcase-timeout=45 --suite-timeout=600 --mysqld=--skip-safemalloc"],
        timeout=2700))


f_win32_nmake = factory.BuildFactory()
f_win32_nmake.addStep(bzr_checkout)
f_win32_nmake.addStep(getCompileStep(
        ["sh win/configure-mariadb.sh"],
        description=["configuring"],
        descriptionDone=["configure"],
        ))
f_win32_nmake.addStep(getCompileStep(
        ["win\\build-nmake.bat"],
        description=["cmaking"],
        descriptionDone=["cmake"],
        ))
f_win32_nmake.addStep(getCompileStep(
        ["nmake"],
        description=["nmaking"],
        descriptionDone=["nmake"],
        ))
f_win32_nmake.addStep(getMTR(
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl --force --retry=3 --skip-ndb --testcase-timeout=45 --suite-timeout=600 --max-test-fail=500"],
        timeout=2700))
f_win32_nmake.addStep(getMTR(
        test_type="emb",
        test_info="--embedded-server run",
        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl --force --retry=3 --skip-ndb --testcase-timeout=45 --suite-timeout=600 --max-test-fail=500 --embedded-server"],
        timeout=2700))
f_win32_nmake.addStep(getMTR(
        test_type="pbxt",
        test_info="pbxt run",
        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl --force --retry=3 --skip-ndb --testcase-timeout=45 --suite-timeout=600 --max-test-fail=500 --mysqld=--default-storage-engine=pbxt --suite=pbxt"],
        timeout=2700))


bld_linux_debug = {'name': "centos5-debug",
                   'slavename': "centos5",
                   'builddir': "centos5-debug",
                   'factory': f_dbg_2_64_mkshr,
                   "category": "new",
                   }

bld_archivist_cnc = {'name': "hardy-x86-rtai",
                     'slavename': "archivist-cnc",
                     'builddir': "archivist-cnc",
                     'factory': f_rel_1_32,
                     "env": { "AM_MAKEFLAGS": "-j1" },
                     "category": "experimental",
                     }

bld_archivist_amd64 = {'name': "hardy-amd64-dbg",
                     'slavename': "archivist-amd64",
                     'builddir': "archivist-amd64",
                     'factory': f_dbg_2_64,
                       "env": { "AM_MAKEFLAGS": "-j1" },
                       "category": "main",
                     }

bld_adutko_amd64 = {'name': "lenny-amd64-dbg",
                     'slavename': "adutko-amd64",
                     'builddir': "adutko-amd64",
                     'factory': f_dbg_2_64_mkshr,
                    "category": "new",
                     }

bld_psergey_win32box = {'name': "winxp-x86-nmake",
                     'slavename': "psergey-win32box",
                     'builddir': "psergey-win32box",
                     'factory': f_win32_nmake,
                     "category": "experimental",
                     }

f_minimal = factory.BuildFactory()
f_minimal.addStep(FileDownload(mastersrc=WithProperties("%(tarballpath)s"),
                               slavedest=WithProperties("%(distname)s.tar.gz")))
f_minimal.addStep(ShellCommand(
        description="untarring", descriptionDone="untar",
        command=["sh", "-c", WithProperties("rm -Rf %(distname)s && tar zxf %(distname)s.tar.gz")]))
f_minimal.addStep(getCompileStep(
        ["sh", "-c", WithProperties("cd %(distname)s && ./configure --without-uca --without-query-cache --without-geomery --without-readline --without-libedit --without-embedded-server --without-plugin-example --without-plugin-innobase --without-plugin-federated --without-plugin-pbxt --without-plugin-partition --without-plugin-daemon_example --without-plugin-ftexample --without-plugin-archive --without-plugin-blackhole --without-plugin-ibmdb2i --without-plugin-ndbcluster --without-plugin-maria --with-debug && make -j3")],
        subdir="%(distname)s/"))
f_minimal.addStep(getMTR(
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        command=["sh", "-c", WithProperties("cd %(distname)s/mysql-test && exec perl mysql-test-run.pl --force --retry=3 --max-test-fail=100")],
        timeout = 3600,
        mtr_subdir=WithProperties("%(distname)s/mysql-test")))
f_minimal.addStep(getMTR(
        test_type="pm",
        test_info="--ps-protocol run",
        command=["sh", "-c", WithProperties("cd %(distname)s/mysql-test && exec perl mysql-test-run.pl --ps-protocol --force --retry=3 --max-test-fail=100")],
        timeout = 3600,
        mtr_subdir=WithProperties("%(distname)s/mysql-test")))

bld_centos5_amd64_minimal = {"name": "centos5-amd64-minimal",
                             "slavename": "adutko-centos5-amd64",
                             "builddir": "centos5-amd64-minimal",
                             "factory": f_minimal,
                             "category": "main",
                             }

f_win32_rel_nmake = factory.BuildFactory()
f_win32_rel_nmake.addStep(bzr_checkout)
f_win32_rel_nmake.addStep(getCompileStep(
        ["sh win/configure-mariadb.sh"],
        description=["configuring"],
        descriptionDone=["configure"],
        ))
f_win32_rel_nmake.addStep(getCompileStep(
        ["cmake", "-G", "NMake Makefiles", "-DCMAKE_BUILD_TYPE=RelWithDebInfo"],
        description=["cmaking"],
        descriptionDone=["cmake"],
        ))
f_win32_rel_nmake.addStep(getCompileStep(
        ["nmake"],
        description=["nmaking"],
        descriptionDone=["nmake"],
        ))
f_win32_rel_nmake.addStep(getMTR(
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl --force --retry=3 --skip-ndb --testcase-timeout=45 --suite-timeout=600"],
        timeout=2700))
f_win32_rel_nmake.addStep(getMTR(
        test_type="emb",
        test_info="--embedded-server run",
        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl --force --retry=3 --skip-ndb --testcase-timeout=45 --suite-timeout=600 --embedded-server"],
        timeout=2700))
f_win32_rel_nmake.addStep(getMTR(
        test_type="pbxt",
        test_info="PBXT run",
        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl --force --retry=3 --skip-ndb --testcase-timeout=45 --suite-timeout=600 --mysqld=--default-storage-engine=pbxt --suite=pbxt"],
        timeout=2700))

bld_win32_rel_nmake = {"name": "win32-rel-nmake",
                       "slavename": "bo-win-1",
                       "builddir": "win32-rel-nmake",
                       "factory": f_win32_rel_nmake,
                       "category": "experimental",
                       }

# This gets triggered with a source tarball from the makedist build.
f_win32_tarball = factory.BuildFactory()
f_win32_tarball.addStep(FileDownload(mastersrc=WithProperties("%(tarballpath)s"),
                        slavedest=WithProperties("%(distname)s.tar.gz")))
f_win32_tarball.addStep(ShellCommand(
        description="untarring", descriptionDone="untar",
        command=["sh", "-c", WithProperties("rm -Rf %(distname)s && tar zxf %(distname)s.tar.gz")]))
f_win32_tarball.addStep(Compile(
        description="configuring", descriptionDone="configure",
        command=["sh", "-c", WithProperties("cd %(distname)s && sh win/configure-mariadb.sh")]
        ))
f_win32_tarball.addStep(Compile(
        description="cmaking", descriptionDone="cmake",
        command=["sh", "-c", WithProperties("cd %(distname)s && cmd /c 'win\\build-nmake.bat'")]
        ))
f_win32_tarball.addStep(getCompileStep(
        ["sh", "-c", WithProperties("cd %(distname)s && cmd /c 'nmake'")],
        "%(distname)s/",
        description=["nmaking"],
        descriptionDone=["nmake"],
        ))
f_win32_tarball.addStep(getMTR(
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        command=["sh", "-c", WithProperties("cd %(distname)s/mysql-test && exec perl mysql-test-run.pl --force --retry=3 --skip-ndb --testcase-timeout=45 --suite-timeout=600 --max-test-fail=500")],
        timeout=2700,
        mtr_subdir=WithProperties("%(distname)s/mysql-test")))
f_win32_tarball.addStep(getMTR(
        test_type="pm",
        test_info="--ps-protocol run",
        command=["sh", "-c", WithProperties("cd %(distname)s/mysql-test && exec perl mysql-test-run.pl --force --retry=3 --skip-ndb --skip-rpl --ps-protocol --testcase-timeout=45 --suite-timeout=600 --max-test-fail=500")],
        timeout=2700,
        mtr_subdir=WithProperties("%(distname)s/mysql-test")))
f_win32_tarball.addStep(getMTR(
        test_type="emb",
        test_info="Embedded server",
        # Need --vs-config when building with nmake, as otherwise
        # mysql-test-run expects to find stuff in release/, debug/, etc.
        command=["sh", "-c", WithProperties("cd %(distname)s/mysql-test && exec perl mysql-test-run.pl --force --retry=3 --embedded-server --vs-config=. --testcase-timeout=45 --suite-timeout=600 --max-test-fail=50")],
        timeout=2700,
        mtr_subdir=WithProperties("%(distname)s/mysql-test")))

bld_win32_tarball = {"name": "win32-tarball",
                     "slavename": "vm-win-1",
                     "builddir": "win32-tarball",
                     "factory": f_win32_tarball,
                     "category": "experimental",
                     }

##
## Win32 release zipfile build
##
f_win32_makezip = factory.BuildFactory()
f_win32_makezip.addStep(FileDownload(mastersrc=WithProperties("%(tarballpath)s"),
                        slavedest=WithProperties("%(distname)s.tar.gz")))
f_win32_makezip.addStep(ShellCommand(
        description="untarring", descriptionDone="untar",
        command=["sh", "-c", WithProperties("rm -Rf %(distname)s && tar zxf %(distname)s.tar.gz")]))
f_win32_makezip.addStep(Compile(
        description="make", descriptionDone="configure",
        command=["sh", "-c", WithProperties("cd %(distname)s && sh win/make_mariadb_win_dist")]
        ))
# TODO: run tests also.

bld_win32_zip = {"name": "win32-make-noinstall-zip",
                 "slavename": "psergey-win32box",
                 "builddir": "make-noinstall-zip",
                 "factory": f_win32_makezip,
                 "category": "experimental",
                     }


##
##
test_1 = getMTR(
    test_type="nm",
    test_info="Normal run, no --ps-protocol",
    command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl --force --retry=3 --skip-ndb"])

f_dbg_sol_64 = factory.BuildFactory()
f_dbg_sol_64.addStep(bzr_checkout_init_timeout)
f_dbg_sol_64.addStep(getCompileStep(["BUILD/compile-solaris-amd64-debug"]))
f_dbg_sol_64.addStep(test_1)

bld_toby_amd64 = {'name': "sol10-amd64-dbg",
                     'slavename': "toby-sol10",
                     'builddir': "toby-sol10",
                     'factory': f_dbg_sol_64,
                     "category": "experimental",
                     }

f_dbg_sol_sparc32 = factory.BuildFactory()
f_dbg_sol_sparc32.addStep(bzr_shared_repo)
f_dbg_sol_sparc32.addStep(bzr_checkout_init_timeout)
f_dbg_sol_sparc32.addStep(getCompileStep(["BUILD/compile-solaris-sparc-forte-32"]))
f_dbg_sol_sparc32.addStep(test_1)

bld_toby_sparc32 = {'name': "sol10-sparc32-forte",
                    'slavename': "toby-sol10-sparc",
                    'builddir': "toby-sol10-sparc32",
                    'factory': f_dbg_sol_sparc32,
                    "category": "new",
                    }

f_dbg_sol_sparc64 = factory.BuildFactory()
f_dbg_sol_sparc64.addStep(bzr_shared_repo)
f_dbg_sol_sparc64.addStep(bzr_checkout_init_timeout)
f_dbg_sol_sparc64.addStep(getCompileStep(["BUILD/compile-solaris-sparc-forte"]))
f_dbg_sol_sparc64.addStep(test_1)

bld_toby_sparc64 = {'name': "sol10-sparc64-forte",
                    'slavename': "toby-sol10-sparc",
                    'builddir': "toby-sol10-sparc64",
                    'factory': f_dbg_sol_sparc64,
                    "category": "new",
                    }

f_sol_sparc_32 = factory.BuildFactory()
f_sol_sparc_32.addStep(bzr_shared_repo)
f_sol_sparc_32.addStep(bzr_checkout_init_timeout)
f_sol_sparc_32.addStep(getCompileStep(["BUILD/compile-solaris-sparc"],
                                      env={"EXTRA_FLAGS": "-DFORCE_INIT_OF_VARS"}))
f_sol_sparc_32.addStep(test_1)

bld_sol_sparc_32 = {"name": "sol-sparc-32",
                    "slavename": "adutko-ultrasparc3",
                    "builddir": "adutko-ultrasparc3",
                    "factory": f_sol_sparc_32,
                    "category": "main",
                    }

f_dbg_alpha = factory.BuildFactory()
f_dbg_alpha.addStep(bzr_shared_repo)
f_dbg_alpha.addStep(bzr_checkout_init_timeout)
f_dbg_alpha.addStep(getCompileStep(["BUILD/compile-alpha"]))
f_dbg_alpha.addStep(test_1)

bld_adutko_alpha = {'name': "adutko-alpha",
                     'slavename': "adutko-alpha",
                     'builddir': "adutko-alpha",
                     'factory': f_dbg_alpha,
                    "category": "new",
                     }

def test_nm(extra=""):
    return getMTR(
        test_type="nm",
        test_info="Normal run, mixed-mode replication, no --ps-protocol",
        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl --force --retry=3 --skip-ndb --mysqld=--binlog-format=mixed %s" % extra])

def test_pr(extra=""):
    return getMTR(
        test_type="pr",
        test_info="prepared statement protocol, row-based replication",
        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl --force --retry=3 --skip-ndb --mysqld=--binlog-format=row --ps-protocol %s" % extra])

def test_pbxt(extra=""):
    return getMTR(
        test_type="pbxt",
        test_info="PBXT suite tests",
        timeout=1800,
        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl --force --retry=3 --skip-ndb --mysqld=--default-storage-engine=pbxt --suite=pbxt %s" % extra])

f_rel_amd64 = factory.BuildFactory()
f_rel_amd64.addStep(bzr_checkout)
f_rel_amd64.addStep(getCompileStep(["BUILD/compile-pentium64-max"],
                                   env={"EXTRA_FLAGS": "-DFORCE_INIT_OF_VARS"}))
f_rel_amd64.addStep(test_nm())
f_rel_amd64.addStep(test_pr())
f_rel_amd64.addStep(test_pbxt())

bld_rel_amd64 = {'name': "jaunty-amd64-rel",
                 'slavename': "psergey-pylon-amd64",
                 'builddir': "psergey-pylon-amd64",
                 'factory': f_rel_amd64,
                 "category": "experimental",
                 }

# Full safemalloc is really hard on slow hosts, so use
# --mysqld=--skip-safemalloc here.
f_dbg_x86 = factory.BuildFactory()
f_dbg_x86.addStep(bzr_checkout)
f_dbg_x86.addStep(getCompileStep(["BUILD/compile-pentium-debug-max"]))
f_dbg_x86.addStep(test_nm("--mysqld=--skip-safemalloc"))
f_dbg_x86.addStep(test_pr("--mysqld=--skip-safemalloc"))
f_dbg_x86.addStep(test_pbxt("--mysqld=--skip-safemalloc"))

bld_dbg_x86 = {'name': "gentoo-x86-dbg",
               'slavename': "psergey-foxhole-x86",
               'builddir': "psergey-foxhole-x86",
               'factory': f_dbg_x86,
               "category": "experimental",
                 }

bld_dbg2_x86 = {'name': "ubuntu-x86-dbg",
               'slavename': "psergey-pslp2-x86",
               'builddir': "psergey-pslp2-x86",
               'factory': f_dbg_x86,
               "category": "experimental",
                 }

f_mac_x86 = factory.BuildFactory()
f_mac_x86.addStep(bzr_shared_repo)
f_mac_x86.addStep(bzr_checkout)
f_mac_x86.addStep(getCompileStep(["BUILD/compile-pentium-max"],
                                 env={"EXTRA_FLAGS": "-DFORCE_INIT_OF_VARS"}))
f_mac_x86.addStep(getMTR(
        test_type="nm",
        test_info="Mac OS nondebug:Normal run, mixed-mode replication, no --ps-protocol",
        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl --force --retry=3 --skip-ndb --mysqld=--binlog-format=mixed"]))
f_mac_x86.addStep(getMTR(
        test_type="pr",
        test_info="Mac OS nondebug: prepared statement protocol, row-based replication",
        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl --force --retry=3 --skip-ndb --mysqld=--binlog-format=row --ps-protocol"]))

bld_mac_x86 = {'name': "macosx-x86-bld",
               'slavename': "sanja-mac-x86",
               'builddir': "sanja-mac-x86",
               'factory': f_mac_x86,
               "category": "main",
              }

# A builder that runs the full test suite on a big machine (release build).
def getFulltest(buildarch):
    f_fulltest= factory.BuildFactory()
    f_fulltest.addStep(bzr_checkout)
    f_fulltest.addStep(getCompileStep(["BUILD/compile-" + buildarch + "-max"],
                                      env={"EXTRA_FLAGS": "-DFORCE_INIT_OF_VARS",
                                           "EXTRA_CONFIGS": "--with-embedded-privilege-control"}))
    f_fulltest.addStep(Test(
                command=["make", "test-unit"],
                description=["unit", "testing"],
                descriptionDone=["unit", "test"],
                ))
    f_fulltest.addStep(getMTR(
                test_type="emb", test_info="Embedded with --big",
                command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl --embedded-server --big --force --retry=3 --parallel=2 --skip-ndb --testcase-timeout=45 --max-test-fail=100"],
                ))
    f_fulltest.addStep(getMTR(
                test_type="pbxt", test_info="PBXT test suite with --big",
                command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl --suite=pbxt --mysqld=--default-storage-engine=pbxt --big --force --retry=3 --parallel=2 --max-test-fail=100"],
                ))
    f_fulltest.addStep(getMTR(
                test_type="nm", test_info="Normal mode with --big",
                command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl --big --force --retry=3 --skip-ndb --parallel=2 --testcase-timeout=45 --max-test-fail=100"],
                ))
    f_fulltest.addStep(getMTR(
                test_type="pm", test_info="--ps-protocol mode with --big",
                command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl --big --ps-protocol --force --retry=3 --skip-ndb  --parallel=2 --testcase-timeout=45 --max-test-fail=100"],
                ))
    f_fulltest.addStep(getMTR(
                test_type="xtra", test_info="Some additional test suites, with --big",
                command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl --suite=funcs_1,funcs_2,stress,jp --big --force --retry=3 --skip-ndb --parallel=2 --testcase-timeout=45 --max-test-fail=200"],
                ))
    return f_fulltest

bld_fulltest = {"name": "hardy-amd64-fulltest",
               "slavename": "valgrind",
               "builddir": "hardy-amd64-newtest",
               "factory": getFulltest("amd64"),
               "category": "main",
               }

bld_fulltest2 = {"name": "debian5-i386-fulltest",
                 "slavename": "mariadb-brs",
                 "builddir": "debian5-i386-fulltest",
                 "factory": getFulltest("pentium"),
                 "category": "main",
                 }

f_sanja_gentoo_amd64= factory.BuildFactory()
f_sanja_gentoo_amd64.addStep(bzr_checkout)
f_sanja_gentoo_amd64.addStep(getCompileStep(["BUILD/compile-amd64-valgrind-max"]))
f_sanja_gentoo_amd64.addStep(getMTR(
        test_type="pm",
        test_info="Valgrind, with --ps-protocol",
        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl --parallel=4 --force --retry=3 --valgrind --ps-protocol --max-test-fail=100"],
        timeout = 3600))
f_sanja_gentoo_amd64.addStep(getMTR(
        test_type="nm",
        test_info="Valgrind in pbxt suite",
        command=["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl --parallel=4 --force --retry=3 --valgrind --suite=pbxt --mysqld=--default-storage-engine=pbxt --max-test-fail=100"],
        timeout = 3600))


bld_sanja_gentoo_amd64 = {'name': "gentoo-amd64-sanja",
               'slavename': "sanja-gentoo-x86_64",
               'builddir': "sanja-gentoo-x86_64",
               'factory': f_sanja_gentoo_amd64,
                "category": "experimental",
              }

# The trees for which we save binary packages.
savedPackageBranches= ["5.1", "5.1-release", "5.2", "5.2-release", "5.3-release", "mariadb-5.1-knielsen", "mariadb-5.2-knielsen"]

# Get a build step that will archive binary packages (or source tarball).
# Only the newest 3 builds are saved for each (branch, builder) combination.
# The packages are saved under the build number of the tarbake step, so it is
# easy to locate all packages for a given release.
#
# The `sources' argument can contain multiple file names separated by spaces
# (it is interpolated directly into a shell `cp' command); and WithProperties
# expansion is performed.
def getPackageArchiveStep(sources, tarbuildnum):
    cmdText= ("TARBUILDNUM='" +  tarbuildnum + "'\n" + """
BUILDERNAME='%(buildername)s'
BRANCH='%(branch)s'
BASE="/archive/pack/$BRANCH"
DST="$BASE/build-$TARBUILDNUM/$BUILDERNAME"
set -ex
mkdir -p "$BASE"
rm -Rf "$DST"
(ls -td $BASE/build-*/"$BUILDERNAME" || : ) | (read DUMMY || exit 0; read DUMMY || exit 0; while read VICTIM; do rm -Rf "$VICTIM"; done)
rmdir $BASE/build-* 2>/dev/null || :
mkdir -p "$DST"
""" + 'cp -r ' + sources + ' "$DST/"\n')
    return ShellCommand(
        doStepIf=(lambda(step): step.getProperty("branch") in savedPackageBranches),
        description=["archiving"],
        descriptionDone=["archive"],
        command=["sh", "-c", WithProperties(cmdText)],
        )


f_kvm_tarbake_jaunty_x86= factory.BuildFactory()
f_kvm_tarbake_jaunty_x86.addStep(Compile(
        description=["making", "dist"],
        descriptionDone=["make", "dist"],
        logfiles={"kernel": "kernel_2223.log", "build.log": "build.log"},
        timeout = 3600,
        command=["runvm", "--port=2223", "--user=buildbot", "-cpu=qemu32,-nx", "--smp=4", "--logfile=kernel_2223.log", "/kvm/vms/vm-jaunty-i386-deb-tarbake.qcow2",
        WithProperties("""
set -ex
mkdir -p buildbot
cd buildbot
rm -Rf build
bzr co "%(bakebranch:-lp:ourdelta)s" build
cd build
bakery/preheat.sh
echo bakery-[0-9]* > bakery.txt
tar zcf $(cat bakery.txt).tar.gz $(cat bakery.txt)/
cd $(cat bakery.txt)/
bzr branch --no-tree "lp:~maria-captains/maria/%(branch)s" local-branch
RES=0
bakery/tarbake51.sh %(revision)s local-branch || RES=$?
echo $RES > ../result.txt
"""),
        "= scp -P 2223 'buildbot@localhost:buildbot/build/bakery-[0-9]*/build.log' .",
        "exit $(cat buildbot/build/result.txt)",
        """
set -ex
cd buildbot/build/$(cat buildbot/build/bakery.txt)/
basename mariadb-*.tar.gz .tar.gz > ../distdirname.txt
mv "$(cat ../distdirname.txt).tar.gz" ../
""",
        "= scp -P 2223 buildbot@localhost:buildbot/build/distdirname.txt .",
        "= scp -P 2223 buildbot@localhost:buildbot/build/bakery.txt .",
        "= scp -P 2223 'buildbot@localhost:buildbot/build/mariadb-*.tar.gz' .",
        "= scp -P 2223 'buildbot@localhost:buildbot/build/bakery-*.tar.gz' .",
        ],
        ))
f_kvm_tarbake_jaunty_x86.addStep(SetProperty(
        property="distdirname",
        command=["cat", "distdirname.txt"],
        ))
f_kvm_tarbake_jaunty_x86.addStep(SetProperty(
        property="bakery",
        command=["cat", "bakery.txt"],
        ))
f_kvm_tarbake_jaunty_x86.addStep(getPackageArchiveStep('"%(distdirname)s.tar.gz"', "%(buildnumber)s"))
f_kvm_tarbake_jaunty_x86.addStep(FileUpload(slavesrc=WithProperties("%(distdirname)s.tar.gz"),
                              masterdest=WithProperties("/var/lib/buildbot/OQ-tarballs/%(buildnumber)s:%(distdirname)s.tar.gz")))
f_kvm_tarbake_jaunty_x86.addStep(FileUpload(slavesrc=WithProperties("%(bakery)s.tar.gz"),
                              masterdest=WithProperties("/var/lib/buildbot/OQ-bakeries/%(buildnumber)s:%(bakery)s.tar.gz")))
f_kvm_tarbake_jaunty_x86.addStep(Trigger(
        schedulerNames=["kvm-ourdelta-sched"],
        waitForFinish=False,
        updateSourceStamp=True,
        set_properties={ "tarballpath": WithProperties("/var/lib/buildbot/OQ-tarballs/%(buildnumber)s:%(distdirname)s.tar.gz"),
                         "bakerypath": WithProperties("/var/lib/buildbot/OQ-bakeries/%(buildnumber)s:%(bakery)s.tar.gz"),
                         "distname": WithProperties("%(distdirname)s.tar.gz"),
                         "tarbuildnum": WithProperties("%(buildnumber)s"),
                       },
        copy_properties=[ "distdirname", "bakery" ]))

bld_kvm_tarbake_jaunty_x86 = {"name": "kvm-tarbake-jaunty-x86",
                              "slavename": "knielsen-kvm-x86",
                              "builddir": "kvm-tarbake-jaunty-x86",
                              "factory": f_kvm_tarbake_jaunty_x86,
                              "category": "package",
                             }

def getRpmBuilder(name, kvm_image, port, cpu, arch):
    rpm_fact = factory.BuildFactory()
    rpm_fact.addStep(FileDownload(
        mastersrc=WithProperties("%(tarballpath)s"),
        slavedest=WithProperties("%(distname)s")))
    rpm_fact.addStep(FileDownload(
        mastersrc=WithProperties("%(bakerypath)s"),
        slavedest=WithProperties("%(bakery)s.tar.gz")))
    rpm_fact.addStep(Compile(
        description=["making", "rpms"],
        descriptionDone=["make", "rpms"],
        logfiles={"kernel": "kernel_"+port+".log", "rpmbuild": "autobake-ourdelta.log"},
        timeout=7200,
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-build.qcow2", "--port="+port, "--user=buildbot", "--smp=4", "--cpu="+cpu, "--logfile=kernel_"+port+".log", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("= scp -P "+port+" %(distname)s buildbot@localhost:buildbot/"),
        WithProperties("= scp -P "+port+" %(bakery)s.tar.gz buildbot@localhost:buildbot/"),
        WithProperties("""
set -ex
cd buildbot
mkdir build
cd build
tar zxf ../%(bakery)s.tar.gz
cd %(bakery)s
RES=0
sudo RPM_SKIP_SIGN=1 bakery/autobake51-centos.sh ../../%(distname)s || RES=$?
echo $RES > ../result.txt
"""),
        # Make sure we get access to the build log when the build fails.
        "= scp -P "+port+" buildbot@localhost:autobake-ourdelta.log .",
        "exit $(cat buildbot/build/result.txt)",
        "= rm -Rf rpms && mkdir rpms",
        "= scp -P "+port+" 'buildbot@localhost:/usr/src/redhat/RPMS/"+arch+"/*.rpm' rpms/",
    ]))
    rpm_fact.addStep(getPackageArchiveStep("rpms", "%(tarbuildnum)s"))
    rpm_fact.addStep(Test(
        description=["testing", "install"],
        descriptionDone=["test", "install"],
        logfiles={"kernel": "kernel_"+port+".log"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2", "--port="+port, "--user=buildbot", "--smp=4", "--cpu="+cpu, "--logfile=kernel_"+port+".log", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" rpms buildbot@localhost:buildbot/",
"""
set -ex
cd buildbot
sudo rpm -i rpms/*.rpm
mysql -e "use test; create table t(a int primary key); insert into t values (1); select * from t; drop table t"
"""]))
    return {'name': name, 'slavename': 'knielsen-kvm-x86', 'builddir': name, 'factory': rpm_fact,
            "category": "package"}

bld_kvm_rpm_centos5_x86 = getRpmBuilder("kvm-rpm-centos5-x86", "vm-centos5-i386",
                                        "2225", "qemu32,-nx", "i386")
bld_kvm_rpm_centos5_amd64 = getRpmBuilder("kvm-rpm-centos5-amd64", "vm-centos5-amd64",
                                        "2237", "qemu64", "x86_64")


# The class Test seems to not have a direct way to completely disable
# warning parsing in logs. So use this impossible-to-match regexp
# instead.
impossibleRe = r"\Z.\A"

def getDebBuilder(name, kvm_image, port, cpu, kvmargs=[]):
    args= ["--port="+port, "--user=buildbot", "--smp=4", "--cpu="+cpu] + kvmargs
    deb_fact= factory.BuildFactory()
    deb_fact.addStep(FileDownload(
        mastersrc=WithProperties("%(tarballpath)s"),
        slavedest=WithProperties("%(distname)s")))
    deb_fact.addStep(FileDownload(
        mastersrc=WithProperties("%(bakerypath)s"),
        slavedest=WithProperties("%(bakery)s.tar.gz")))
    # Extract the compiler warning suppressions file from the source tarball.
    deb_fact.addStep(ShellCommand(
        description=["getting", ".supp"],
        descriptionDone=["get", ".supp"],
        command=["sh", "-c", WithProperties("""
rm -f compiler_warnings.supp
tar zxf "%(distname)s" --strip 2 "$(basename %(distname)s .tar.gz)/support-files/compiler_warnings.supp"
exit 0  # best-effort, not fatal if no suppression file
""")]))
    deb_fact.addStep(Compile(
        description=["making", "debs"],
        descriptionDone=["make", "debs"],
        logfiles={"kernel": "kernel_"+port+".log"},
        warningPattern=gccWarningPattern,
        warningExtractor=Compile.warnExtractFromRegexpGroups,
        suppressionFile=WithProperties("compiler_warnings.supp"),
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-build.qcow2"] + args +["--logfile=kernel_"+port+".log", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("= scp -P "+port+" %(distname)s buildbot@localhost:buildbot/"),
        WithProperties("= scp -P "+port+" %(bakery)s.tar.gz buildbot@localhost:buildbot/"),
        WithProperties("""
set -ex
cd buildbot
mkdir build
cd build
tar zxf ../%(bakery)s.tar.gz
cd %(bakery)s
mkdir -p ../../debs/binary ../../debs/source
bakery/autobake51-deb.sh ../../%(distname)s
cp `find build-temp-[0-9]*/ -maxdepth 1 -type f` ../../debs/binary/
cd ../../debs
dpkg-scanpackages binary /dev/null | gzip -9c > binary/Packages.gz
dpkg-scansources source /dev/null | gzip -9c > source/Sources.gz
"""),
        "= rm -Rf debs",
        "= scp -r -P "+port+" buildbot@localhost:buildbot/debs .",
        ]))
    deb_fact.addStep(getPackageArchiveStep("debs", "%(tarbuildnum)s"))
    deb_fact.addStep(Test(
        description=["testing", "install"],
        descriptionDone=["test", "install"],
        logfiles={"kernel": "kernel_"+port+".log"},
        warningPattern=impossibleRe,
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2"] + args + ["--logfile=kernel_"+port+".log", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" debs buildbot@localhost:buildbot/",
        """
set -ex
cd buildbot
sudo apt-get update
sudo sh -c 'DEBIAN_FRONTEND=noninteractive apt-get install --allow-unauthenticated -y mariadb-server'
mysql -uroot -prootpass -e "create database test; use test; create table t(a int primary key); insert into t values (1); select * from t; drop table t; drop database test"
"""]))
    deb_fact.addStep(Test(
        description=["testing", "upgrade"],
        descriptionDone=["test", "upgrade"],
        logfiles={"kernel": "kernel_"+port+".log"},
        warningPattern=impossibleRe,
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-upgrade.qcow2"] + args + ["--logfile=kernel_"+port+".log", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" debs buildbot@localhost:buildbot/",
        """
set -ex
cd buildbot
sudo apt-get update
mysql -uroot -prootpass -e "use mytest; select * from t"
sudo sh -c 'DEBIAN_FRONTEND=noninteractive apt-get install --allow-unauthenticated -y mariadb-server'
mysql -uroot -prootpass -e "use mytest; select * from t"
"""]))
    deb_fact.addStep(Test(
        description=["testing", "upgrade2"],
        descriptionDone=["test", "upgrade2"],
        logfiles={"kernel": "kernel_"+port+".log"},
        warningPattern=impossibleRe,
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-upgrade2.qcow2"] + args + ["--logfile=kernel_"+port+".log", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" debs buildbot@localhost:buildbot/",
        WithProperties("""
set -ex
cd buildbot
sudo apt-get update
mysql -uroot -prootpass -e "use mytest; select * from t"
sudo sh -c 'DEBIAN_FRONTEND=noninteractive apt-get install --allow-unauthenticated -y mariadb-server mariadb-server-$(echo %(branch)s | sed -e "s/.*\\\\(5\\\\.[1-3]\\\\).*/\\\\1/") mariadb-test libmariadbclient-dev mysql-common'
mysql -uroot -prootpass -e "use mytest; select * from t"
""")]))
    deb_fact.addStep(getMTR(
            test_type="nm",
            test_info="Normal run, no --ps-protocol",
            logfiles={"kernel": "kernel_"+port+".log"},
            command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2"] + args + ["--logfile=kernel_"+port+".log", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        "= scp -r -P "+port+" debs buildbot@localhost:buildbot/",
        """
set -ex
cd buildbot
sudo apt-get update
sudo sh -c 'DEBIAN_FRONTEND=noninteractive apt-get install --allow-unauthenticated -y mariadb-server mariadb-test'
sudo sh -c 'DEBIAN_FRONTEND=noninteractive apt-get remove --allow-unauthenticated -y apparmor || true'
cd /usr/share/mysql/mysql-test
perl mysql-test-run.pl --vardir=/dev/shm/var --parallel=4 --force --retry=3
"""]))
    return {'name': name, 'slavename': 'knielsen-kvm-x86', 'builddir': name, 'factory': deb_fact,
            "category": "package"}


bld_kvm_deb_hardy_amd64 = getDebBuilder("kvm-deb-hardy-amd64", "vm-hardy-amd64", "2228", "qemu64")
bld_kvm_deb_hardy_x86 = getDebBuilder("kvm-deb-hardy-x86", "vm-hardy-i386", "2229", "qemu32,-nx")
bld_kvm_deb_intrepid_amd64 = getDebBuilder("kvm-deb-intrepid-amd64", "vm-intrepid-amd64", "2230", "qemu64")
bld_kvm_deb_intrepid_x86 = getDebBuilder("kvm-deb-intrepid-x86", "vm-intrepid-i386", "2231", "qemu32,-nx")
bld_kvm_deb_karmic_amd64 = getDebBuilder("kvm-deb-karmic-amd64", "vm-karmic-amd64", "2232", "qemu64")
bld_kvm_deb_karmic_x86 = getDebBuilder("kvm-deb-karmic-x86", "vm-karmic-i386", "2233", "qemu32,-nx")
bld_kvm_deb_jaunty_amd64 = getDebBuilder("kvm-deb-jaunty-amd64", "vm-jaunty-amd64", "2235", "qemu64")
bld_kvm_deb_jaunty_x86 = getDebBuilder("kvm-deb-jaunty-x86", "vm-jaunty-i386-deb", "2236", "qemu32,-nx")
bld_kvm_deb_lucid_amd64 = getDebBuilder("kvm-deb-lucid-amd64", "vm-lucid-amd64", "2238", "qemu64")
bld_kvm_deb_lucid_x86 = getDebBuilder("kvm-deb-lucid-x86", "vm-lucid-i386", "2239", "qemu32,-nx")
bld_kvm_deb_debian5_amd64 = getDebBuilder("kvm-deb-debian5-amd64", "vm-debian5-amd64", "2234", "qemu64")
bld_kvm_deb_debian5_x86 = getDebBuilder("kvm-deb-debian5-x86", "vm-debian5-i386", "2226", "qemu32,-nx")
# Some serious kvm/kernel problem on debian4, need aggressive retry
bld_kvm_deb_debian4_amd64 = getDebBuilder("kvm-deb-debian4-amd64", "vm-debian4-amd64", "2240", "qemu64", kvmargs=["--netdev=e1000",  "--kvm-retries=20", "--kvm=-cdrom", "--kvm=/kvm/debian-40r8-amd64-netinst.iso"])
bld_kvm_deb_debian4_x86 = getDebBuilder("kvm-deb-debian4-x86", "vm-debian4-i386", "2241", "qemu32,-nx", kvmargs=["--netdev=e1000",  "--kvm-retries=20", "--kvm=-cdrom", "--kvm=/kvm/debian-40r8-i386-netinst.iso"])


def getBintarBuilder(name, kvm_image, port, cpu):
    bin_fact = factory.BuildFactory()
    bin_fact.addStep(FileDownload(
        mastersrc=WithProperties("%(tarballpath)s"),
        slavedest=WithProperties("%(distname)s")))
    bin_fact.addStep(FileDownload(
        mastersrc=WithProperties("%(bakerypath)s"),
        slavedest=WithProperties("%(bakery)s.tar.gz")))
    bin_fact.addStep(Compile(
        description=["making", "bintar"],
        descriptionDone=["make", "bintar"],
        logfiles={"kernel": "kernel_"+port+".log", "build.log": "build.log"},
        command=["runvm", "--port="+port, "--user=buildbot", "--cpu="+cpu, "--smp=4", "--logfile=kernel_"+port+".log", "--base-image=/kvm/vms/"+kvm_image+"-build.qcow2", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("= scp -P "+port+" %(distname)s buildbot@localhost:buildbot/"),
        WithProperties("= scp -P "+port+" %(bakery)s.tar.gz buildbot@localhost:buildbot/"),
        WithProperties("""
set -ex
cd buildbot
mkdir build
cd build
tar zxf ../%(bakery)s.tar.gz
cd %(bakery)s
RES=0
bakery/autobake51-bintar.sh ../../%(distname)s || RES=$?
echo $RES > ../result.txt
"""),
        # Make sure we get access to the build log when the build fails.
        WithProperties("= scp -P "+port+" buildbot@localhost:buildbot/build/%(bakery)s/build.log ."),
        "exit $(cat buildbot/build/result.txt)",
        WithProperties("cd buildbot/build/%(bakery)s && basename mariadb-*.tar.gz .tar.gz > ../../bindistname.txt"),
        WithProperties("= scp -P "+port+" 'buildbot@localhost:buildbot/build/%(bakery)s/mariadb-*.tar.gz' ."),
        "= scp -P "+port+" buildbot@localhost:buildbot/bindistname.txt .",
]))
    bin_fact.addStep(SetProperty(
        property="bindistname",
        command=["cat", "bindistname.txt"],
        ))
    bin_fact.addStep(getPackageArchiveStep('"%(bindistname)s.tar.gz"', "%(tarbuildnum)s"))
    bin_fact.addStep(Test(
        description=["testing", "bintar"],
        descriptionDone=["test", "bintar"],
        logfiles={"kernel": "kernel_"+port+".log"},
        command=["runvm", "--port="+port, "--user=buildbot", "--cpu="+cpu, "--smp=4", "--logfile=kernel_"+port+".log", "--base-image=/kvm/vms/"+kvm_image+"-install.qcow2", "vm-tmp-"+port+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("= scp -P "+port+" %(bindistname)s.tar.gz buildbot@localhost:buildbot/"),
        WithProperties("""
set -ex
cd buildbot
sudo rm -Rf /usr/local/%(bindistname)s
sudo tar zxf %(bindistname)s.tar.gz -C /usr/local/
cd /usr/local/%(bindistname)s
sudo adduser --system --group mysql
sudo sudo chown -R mysql .
sudo chgrp -R mysql .
sudo scripts/mysql_install_db --user=mysql
sudo chown -R root .
sudo chown -R mysql data mysql-test
cd mysql-test
sudo su -s /bin/sh -c "perl mysql-test-run.pl alias" mysql
""")]))
    return {'name': name, 'slavename': 'knielsen-kvm-x86', 'builddir': name, 'factory': bin_fact,
            "category": "package" }

bld_kvm_bintar_hardy_amd64 = getBintarBuilder("kvm-bintar-hardy-amd64", "vm-hardy-amd64", "2227", "qemu64")
bld_kvm_bintar_hardy_x86 = getBintarBuilder("kvm-bintar-hardy-x86", "vm-hardy-i386", "2222", "qemu32,-nx")


def getWinBuilder(name, kvm_image, port1, port2, cpu, kvmargs=[]):
    args= ["--windows", "--user=buildbot", "--cpu="+cpu, "--smp=4"] + kvmargs
    bin_fact = factory.BuildFactory()
    bin_fact.addStep(FileDownload(
        mastersrc=WithProperties("%(tarballpath)s"),
        slavedest=WithProperties("%(distname)s")))
    bin_fact.addStep(Compile(
        description=["making", "noinstall"],
        descriptionDone=["make", "noinstall"],
        logfiles={"kernel": "kernel_"+port1+".log"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-vs2008.qcow2"] + args + ["--port="+port1, "--logfile=kernel_"+port1+".log", "vm-tmp-"+port1+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("= scp -P "+port1+" %(distname)s buildbot@localhost:buildbot/"),
        WithProperties("""
set -ex
cd buildbot
mkdir build
cd build
tar zxf ../%(distname)s
cd $(basename %(distname)s .tar.gz)
sh win/make_mariadb_win_dist
basename mariadb-noinstall-*.zip .zip > ../../bindistname.txt
if fgrep -q 'INCLUDE(CPack)' CMakeLists.txt ; then cpack -C RelWithDebInfo ; else touch MariaDB-0.0.0-win32.exe ; fi
basename MariaDB-*.exe .exe > ../../exedistname.txt
"""),
        WithProperties("= scp -P "+port1+" 'buildbot@localhost:buildbot/build/mariadb*/mariadb-noinstall-*.zip' ."),
        WithProperties("= scp -P "+port1+" 'buildbot@localhost:buildbot/build/mariadb*/MariaDB-*.exe' ."),
        "= scp -P "+port1+" buildbot@localhost:buildbot/bindistname.txt .",
        "= scp -P "+port1+" buildbot@localhost:buildbot/exedistname.txt .",
]))
    bin_fact.addStep(SetProperty(
        property="bindistname",
        command=["cat", "bindistname.txt"],
        ))
    bin_fact.addStep(SetProperty(
        property="exedistname",
        command=["cat", "exedistname.txt"],
        ))
    bin_fact.addStep(getPackageArchiveStep('"%(bindistname)s.zip" "%(exedistname)s.exe"', "%(tarbuildnum)s"))
    bin_fact.addStep(getMTR(
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        logfiles={"kernel": "kernel_"+port2+".log"},
        command=["runvm", "--base-image=/kvm/vms/"+kvm_image+"-clean.qcow2"] + args + ["--port="+port2, "--logfile=kernel_"+port2+".log", "vm-tmp-"+port2+".qcow2",
        "rm -Rf buildbot && mkdir buildbot",
        WithProperties("= scp -P "+port2+" %(bindistname)s.zip buildbot@localhost:buildbot/"),
        WithProperties("""
set -ex
cd buildbot
mkdir test
cd test
unzip ../%(bindistname)s.zip
cd mariadb-*-win32/mysql-test
perl mysql-test-run.pl --force --parallel=2 --retry=3 --testcase-timeout=45 --suite-timeout=600 --max-test-fail=500
""")]))

    return {'name': name, 'slavename': 'knielsen-kvm-x86', 'builddir': name, 'factory': bin_fact,
            "category": "package" }


bld_kvm_zip_winxp_x86 = getWinBuilder("kvm-zip-winxp-x86", "xp-32", "2242", "2243", "qemu32", kvmargs=["--netdev=ne2k_pci"])



bld_opensolaris_511_x86 = {'name': 'opensolaris-511-x86',
                           'slavename': 'opensolaris-x86',
                           'builddir': 'opensolaris-511-x86',
                           'factory': f_dbg_sol_64,
                           "category": "main",
                          }

f_sol_64_bintar = factory.BuildFactory()
f_sol_64_bintar.addStep(FileDownload(mastersrc=WithProperties("%(tarballpath)s"),
                                     slavedest=WithProperties("%(distname)s")))
f_sol_64_bintar.addStep(ShellCommand(
        description="untarring", descriptionDone="untar",
        command=["sh", "-c", WithProperties("rm -Rf %(distdirname)s && tar zxf %(distname)s")]))
f_sol_64_bintar.addStep(getCompileStep(["sh", "-c", WithProperties("cd %(distdirname)s && BUILD/compile-solaris-amd64-debug")],
                                       subdir="%(distdirname)s/"))
f_sol_64_bintar.addStep(ShellCommand(
        description="packaging", descriptionDone="package",
        command=["sh", "-c", WithProperties("""
set -ex
cd %(distdirname)s
scripts/make_binary_distribution
ORIG_TAR=$(echo mariadb-*.tar.gz)
ORIG_DIR=$(basename ${ORIG_TAR} .tar.gz)
NEW_DIR="$(echo "${ORIG_DIR}" | sed -e 's/-MariaDB//')"
NEW_TAR="${NEW_DIR}.tar.gz"
rm -Rf $ORIG_DIR
tar zxf $ORIG_TAR
mv $ORIG_DIR "${NEW_DIR}"
tar zcf "${NEW_TAR}" "${NEW_DIR}/"
echo "${NEW_TAR}" > ../bindistname.txt
""")]))
f_sol_64_bintar.addStep(SetProperty(
        property="bindistname",
        command=["cat", "bindistname.txt"],
        ))
f_sol_64_bintar.addStep(getPackageArchiveStep('"%(distdirname)s/%(bindistname)s"', "%(tarbuildnum)s"))
f_sol_64_bintar.addStep(getMTR(
        test_type="nm",
        test_info="Normal run, no --ps-protocol",
        command=["sh", "-c", WithProperties("cd %(distdirname)s/mysql-test && exec perl mysql-test-run.pl --force --retry=3 --skip-ndb")],
                 mtr_subdir=WithProperties("%(distdirname)s/mysql-test")))

bld_opensolaris_511_bintar = {'name': 'opensolaris-511-bintar',
                              'slavename': 'opensolaris-x86',
                              'builddir': 'opensolaris-511-bintar',
                              'factory': f_sol_64_bintar,
                              "category": "package",
                              }

#
# Random Query Generator tests - http://www.launchpad.net/randgen
#

f_rqg_main = factory.BuildFactory()
f_rqg_main.addStep(bzr_checkout)
f_rqg_main.addStep(getCompileStep(["BUILD/compile-pentium64-debug-max"],
                               env={"EXTRA_FLAGS": "-DFORCE_INIT_OF_VARS"}))
f_rqg_main.addStep(ShellCommand(
        description=["patching","MTRv1"], descriptionDone=["patched","MTRv1"],
        workdir=".",
        command=["sh", "-c", " patch -p 0 --directory=build < mtrv1.patch"]))

f_rqg_main.addStep(Test(
                command=["sh", "-c", "perl $RQG_HOME/runall.pl  --basedir=. --vardir=../vardir --grammar=$RQG_HOME/conf/examples/example.yy --threads=1 --queries=1"],
                description=["rqg", "smoking"],
                descriptionDone=["rqg", "smoked"],
                ))

bld_rqg_main = {'name': 'rqg-perpush-main',
             'slavename': 'philip-fedora13-quality1',
             'builddir': 'rqg-perpush-main',
             'factory': f_rqg_main,
             'category': 'experimental',
             }

f_rqg_mariaengine = factory.BuildFactory()
f_rqg_mariaengine.addStep(bzr_checkout)
f_rqg_mariaengine.addStep(getCompileStep(["BUILD/compile-pentium64-debug-max"],
                               env={"EXTRA_FLAGS": "-DFORCE_INIT_OF_VARS"}))
f_rqg_mariaengine.addStep(ShellCommand(
        description=["patching","MTRv1"], descriptionDone=["patched","MTRv1"],
        workdir=".",
        command=["sh", "-c", " patch -p 0 --directory=build < mtrv1.patch"]))

f_rqg_mariaengine.addStep(Test(
                command=["sh", "-c", "perl $RQG_HOME/runall.pl  --basedir=. --vardir=../vardir --grammar=$RQG_HOME/conf/engines/engine_stress.yy --gendata=$RQG_HOME/conf/engines/engine_stress.zz --reporter=Recovery --duration=240 --queries=1M --engine=Maria --rows=10000 --mysqld=--maria-checkpoint-interval=0  --mysqld=--log-output=file"],
                description=["rqg", "maria_recovery"],
                descriptionDone=["rqg", "maria_recovered"],
                ))

bld_rqg_mariaengine = {'name': 'rqg-perpush-mariaengine',
             'slavename': 'philip-fedora13-quality1',
             'builddir': 'rqg-perpush-mariaengine',
             'factory': f_rqg_mariaengine,
             'category': 'experimental',
             }

f_rqg_optimizer = factory.BuildFactory()
f_rqg_optimizer.addStep(bzr_checkout)
f_rqg_optimizer.addStep(getCompileStep(["BUILD/compile-pentium64-debug-max"],
                               env={"EXTRA_FLAGS": "-DFORCE_INIT_OF_VARS"}))
f_rqg_optimizer.addStep(ShellCommand(
        description=["patching","MTRv1"], descriptionDone=["patched","MTRv1"],
        workdir=".",
        command=["sh", "-c", " patch -p 0 --directory=build < mtrv1.patch"]))
f_rqg_optimizer.addStep(Test(
                command=["sh", "-c", "perl $RQG_HOME/runall.pl  --basedir=. --vardir=../vardir --grammar=$RQG_HOME/conf/optimizer/optimizer_subquery.yy --threads=1 --queries=1M --duration=300"],
                description=["RQG", "optimizer_subquery"],
                descriptionDone=["RQG", "optimizer_subquery done"],
                ))
f_rqg_optimizer.addStep(Test(
                command=["sh", "-c", "perl $RQG_HOME/runall.pl  --basedir=. --vardir=../vardir --grammar=$RQG_HOME/conf/optimizer/optimizer_no_subquery.yy --threads=1 --queries=1M --duration=300"],
                description=["RQG", "optimizer_nosubquery"],
                descriptionDone=["RQG", "optimizer_nosubquery done"],
                ))
f_rqg_optimizer.addStep(Test(
                command=["sh", "-c", "perl $RQG_HOME/runall.pl  --basedir=. --vardir=../vardir --grammar=$RQG_HOME/conf/optimizer/range_access.yy --gendata=$RQG_HOME/conf/optimizer/range_access.zz --threads=1 --queries=1M --duration=300"],
                description=["RQG", "optimizer_range"],
                descriptionDone=["RQG", "optimizer_range done"],
                ))

f_rqg_optimizer.addStep(Test(
                command=["sh", "-c", "perl $RQG_HOME/runall.pl  --basedir=. --vardir=../vardir --grammar=$RQG_HOME/conf/optimizer/outer_join.yy --gendata=$RQG_HOME/conf/optimizer/outer_join.zz --threads=1 --queries=1M --duration=300"],
                description=["RQG", "optimizer_outer_join"],
                descriptionDone=["RQG", "optimizer_outer_join done"],
                ))

bld_rqg_optimizer = {'name': 'rqg-perpush-optimizer',
             'slavename': 'philip-fedora13-quality1',
             'builddir': 'rqg-perpush-optimizer',
             'factory': f_rqg_optimizer,
             'category': 'experimental',
             }

# End of Random Query Generator Tests


c['builders'] = [bld_fulltest, bld_fulltest2, bld_work_valgrind,
                 bld_valgrind_32, bld_rel_amd64, bld_dbg_x86,
                 bld_makedist,
                 bld_archivist_amd64, bld_archivist_cnc,
                 bld_dbg2_x86, bld_psergey_win32box, bld_win32_tarball,
                 bld_win32_zip,
                 bld_win32_rel_nmake, bld_mac_x86,
                 bld_toby_amd64, bld_toby_sparc32, bld_toby_sparc64,
                 bld_linux_debug,
                 bld_centos5_amd64_minimal,
#                 bld_adutko_amd64, bld_adutko_alpha,
                 bld_sanja_gentoo_amd64,
#                 bld_valgrind, 
                 bld_kvm_tarbake_jaunty_x86,
                 bld_kvm_zip_winxp_x86,
                 bld_kvm_rpm_centos5_x86, bld_kvm_rpm_centos5_amd64,
                 bld_kvm_deb_debian4_amd64, bld_kvm_deb_debian4_x86,
                 bld_kvm_deb_debian5_amd64, bld_kvm_deb_debian5_x86,
                 bld_kvm_deb_hardy_amd64, bld_kvm_deb_hardy_x86,
                 bld_kvm_deb_intrepid_amd64, bld_kvm_deb_intrepid_x86,
                 bld_kvm_deb_jaunty_amd64, bld_kvm_deb_jaunty_x86,
                 bld_kvm_deb_karmic_amd64, bld_kvm_deb_karmic_x86,
                 bld_kvm_deb_lucid_amd64, bld_kvm_deb_lucid_x86,
                 bld_kvm_bintar_hardy_amd64, bld_kvm_bintar_hardy_x86,
                 bld_opensolaris_511_bintar,
#                 bld_opensolaris_511_x86,
                 bld_sol_sparc_32,
                 bld_rqg_main, bld_rqg_optimizer, bld_rqg_mariaengine
                 ]


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8010, allowForce=True))

from buildbot.status import words
irc = words.IRC("irc.freenode.net", "mariabuildbot",
                channels=["maria"],
                password=configDict["cfg"]["ircPassword"],
                notify_events={
                  "exception": 1,
                  "successToFailure": 1,
                  "failureToSuccess": 1,
                },
                allowForce=True,
                )
# Disable it until we fix it to only notify about main trees.
#c["status"].append(irc)
        

# from buildbot.status import mail
# c['status'].append(mail.MailNotifier(fromaddr="buildbot@localhost",
#                                      extraRecipients=["builds@example.com"],
#                                      sendToInterestedUsers=False))
#
# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "MariaDB"
c['projectURL'] = "https://launchpad.net/maria"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://askmonty.org/buildbot/"
